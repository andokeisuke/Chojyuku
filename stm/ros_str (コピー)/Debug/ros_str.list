
ros_str.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bd4  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08008d9c  08008d9c  00018d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009194  08009194  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009194  08009194  00019194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800919c  0800919c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800919c  0800919c  0001919c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091a4  080091a4  000191a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080091a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cec  20000078  0800921c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000d64  0800921c  00020d64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b85  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c26  00000000  00000000  00034c29  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001110  00000000  00000000  00037850  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001000  00000000  00000000  00038960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000242ab  00000000  00000000  00039960  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c254  00000000  00000000  0005dc0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5d17  00000000  00000000  00069e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013fb76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e5c  00000000  00000000  0013fbf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000078 	.word	0x20000078
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008d84 	.word	0x08008d84

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000007c 	.word	0x2000007c
 8000204:	08008d84 	.word	0x08008d84

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b28:	f000 b972 	b.w	8000e10 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9e08      	ldr	r6, [sp, #32]
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	4688      	mov	r8, r1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d14b      	bne.n	8000bea <__udivmoddi4+0xa6>
 8000b52:	428a      	cmp	r2, r1
 8000b54:	4615      	mov	r5, r2
 8000b56:	d967      	bls.n	8000c28 <__udivmoddi4+0xe4>
 8000b58:	fab2 f282 	clz	r2, r2
 8000b5c:	b14a      	cbz	r2, 8000b72 <__udivmoddi4+0x2e>
 8000b5e:	f1c2 0720 	rsb	r7, r2, #32
 8000b62:	fa01 f302 	lsl.w	r3, r1, r2
 8000b66:	fa20 f707 	lsr.w	r7, r0, r7
 8000b6a:	4095      	lsls	r5, r2
 8000b6c:	ea47 0803 	orr.w	r8, r7, r3
 8000b70:	4094      	lsls	r4, r2
 8000b72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b76:	0c23      	lsrs	r3, r4, #16
 8000b78:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b7c:	fa1f fc85 	uxth.w	ip, r5
 8000b80:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b84:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b88:	fb07 f10c 	mul.w	r1, r7, ip
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d909      	bls.n	8000ba4 <__udivmoddi4+0x60>
 8000b90:	18eb      	adds	r3, r5, r3
 8000b92:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b96:	f080 811b 	bcs.w	8000dd0 <__udivmoddi4+0x28c>
 8000b9a:	4299      	cmp	r1, r3
 8000b9c:	f240 8118 	bls.w	8000dd0 <__udivmoddi4+0x28c>
 8000ba0:	3f02      	subs	r7, #2
 8000ba2:	442b      	add	r3, r5
 8000ba4:	1a5b      	subs	r3, r3, r1
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb8:	45a4      	cmp	ip, r4
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x8c>
 8000bbc:	192c      	adds	r4, r5, r4
 8000bbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bc2:	f080 8107 	bcs.w	8000dd4 <__udivmoddi4+0x290>
 8000bc6:	45a4      	cmp	ip, r4
 8000bc8:	f240 8104 	bls.w	8000dd4 <__udivmoddi4+0x290>
 8000bcc:	3802      	subs	r0, #2
 8000bce:	442c      	add	r4, r5
 8000bd0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bd4:	eba4 040c 	sub.w	r4, r4, ip
 8000bd8:	2700      	movs	r7, #0
 8000bda:	b11e      	cbz	r6, 8000be4 <__udivmoddi4+0xa0>
 8000bdc:	40d4      	lsrs	r4, r2
 8000bde:	2300      	movs	r3, #0
 8000be0:	e9c6 4300 	strd	r4, r3, [r6]
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d909      	bls.n	8000c02 <__udivmoddi4+0xbe>
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	f000 80eb 	beq.w	8000dca <__udivmoddi4+0x286>
 8000bf4:	2700      	movs	r7, #0
 8000bf6:	e9c6 0100 	strd	r0, r1, [r6]
 8000bfa:	4638      	mov	r0, r7
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	fab3 f783 	clz	r7, r3
 8000c06:	2f00      	cmp	r7, #0
 8000c08:	d147      	bne.n	8000c9a <__udivmoddi4+0x156>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d302      	bcc.n	8000c14 <__udivmoddi4+0xd0>
 8000c0e:	4282      	cmp	r2, r0
 8000c10:	f200 80fa 	bhi.w	8000e08 <__udivmoddi4+0x2c4>
 8000c14:	1a84      	subs	r4, r0, r2
 8000c16:	eb61 0303 	sbc.w	r3, r1, r3
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	4698      	mov	r8, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d0e0      	beq.n	8000be4 <__udivmoddi4+0xa0>
 8000c22:	e9c6 4800 	strd	r4, r8, [r6]
 8000c26:	e7dd      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000c28:	b902      	cbnz	r2, 8000c2c <__udivmoddi4+0xe8>
 8000c2a:	deff      	udf	#255	; 0xff
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	f040 808f 	bne.w	8000d54 <__udivmoddi4+0x210>
 8000c36:	1b49      	subs	r1, r1, r5
 8000c38:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3c:	fa1f f885 	uxth.w	r8, r5
 8000c40:	2701      	movs	r7, #1
 8000c42:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c46:	0c23      	lsrs	r3, r4, #16
 8000c48:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c50:	fb08 f10c 	mul.w	r1, r8, ip
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x124>
 8000c58:	18eb      	adds	r3, r5, r3
 8000c5a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x122>
 8000c60:	4299      	cmp	r1, r3
 8000c62:	f200 80cd 	bhi.w	8000e00 <__udivmoddi4+0x2bc>
 8000c66:	4684      	mov	ip, r0
 8000c68:	1a59      	subs	r1, r3, r1
 8000c6a:	b2a3      	uxth	r3, r4
 8000c6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c70:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c74:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c78:	fb08 f800 	mul.w	r8, r8, r0
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x14c>
 8000c80:	192c      	adds	r4, r5, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x14a>
 8000c88:	45a0      	cmp	r8, r4
 8000c8a:	f200 80b6 	bhi.w	8000dfa <__udivmoddi4+0x2b6>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	eba4 0408 	sub.w	r4, r4, r8
 8000c94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c98:	e79f      	b.n	8000bda <__udivmoddi4+0x96>
 8000c9a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c9e:	40bb      	lsls	r3, r7
 8000ca0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ca4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cac:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cb0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cb4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb8:	4325      	orrs	r5, r4
 8000cba:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cbe:	0c2c      	lsrs	r4, r5, #16
 8000cc0:	fb08 3319 	mls	r3, r8, r9, r3
 8000cc4:	fa1f fa8e 	uxth.w	sl, lr
 8000cc8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ccc:	fb09 f40a 	mul.w	r4, r9, sl
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	fa02 f207 	lsl.w	r2, r2, r7
 8000cd6:	fa00 f107 	lsl.w	r1, r0, r7
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b0>
 8000cdc:	eb1e 0303 	adds.w	r3, lr, r3
 8000ce0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ce4:	f080 8087 	bcs.w	8000df6 <__udivmoddi4+0x2b2>
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	f240 8084 	bls.w	8000df6 <__udivmoddi4+0x2b2>
 8000cee:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf2:	4473      	add	r3, lr
 8000cf4:	1b1b      	subs	r3, r3, r4
 8000cf6:	b2ad      	uxth	r5, r5
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000d00:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d04:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d08:	45a2      	cmp	sl, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1da>
 8000d0c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d14:	d26b      	bcs.n	8000dee <__udivmoddi4+0x2aa>
 8000d16:	45a2      	cmp	sl, r4
 8000d18:	d969      	bls.n	8000dee <__udivmoddi4+0x2aa>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4474      	add	r4, lr
 8000d1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d22:	fba0 8902 	umull	r8, r9, r0, r2
 8000d26:	eba4 040a 	sub.w	r4, r4, sl
 8000d2a:	454c      	cmp	r4, r9
 8000d2c:	46c2      	mov	sl, r8
 8000d2e:	464b      	mov	r3, r9
 8000d30:	d354      	bcc.n	8000ddc <__udivmoddi4+0x298>
 8000d32:	d051      	beq.n	8000dd8 <__udivmoddi4+0x294>
 8000d34:	2e00      	cmp	r6, #0
 8000d36:	d069      	beq.n	8000e0c <__udivmoddi4+0x2c8>
 8000d38:	ebb1 050a 	subs.w	r5, r1, sl
 8000d3c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d40:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d44:	40fd      	lsrs	r5, r7
 8000d46:	40fc      	lsrs	r4, r7
 8000d48:	ea4c 0505 	orr.w	r5, ip, r5
 8000d4c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d50:	2700      	movs	r7, #0
 8000d52:	e747      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000d54:	f1c2 0320 	rsb	r3, r2, #32
 8000d58:	fa20 f703 	lsr.w	r7, r0, r3
 8000d5c:	4095      	lsls	r5, r2
 8000d5e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d62:	fa21 f303 	lsr.w	r3, r1, r3
 8000d66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d6a:	4338      	orrs	r0, r7
 8000d6c:	0c01      	lsrs	r1, r0, #16
 8000d6e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d72:	fa1f f885 	uxth.w	r8, r5
 8000d76:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7e:	fb07 f308 	mul.w	r3, r7, r8
 8000d82:	428b      	cmp	r3, r1
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x256>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d90:	d22f      	bcs.n	8000df2 <__udivmoddi4+0x2ae>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d92d      	bls.n	8000df2 <__udivmoddi4+0x2ae>
 8000d96:	3f02      	subs	r7, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1acb      	subs	r3, r1, r3
 8000d9c:	b281      	uxth	r1, r0
 8000d9e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb00 f308 	mul.w	r3, r0, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x27e>
 8000db2:	1869      	adds	r1, r5, r1
 8000db4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db8:	d217      	bcs.n	8000dea <__udivmoddi4+0x2a6>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d915      	bls.n	8000dea <__udivmoddi4+0x2a6>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4429      	add	r1, r5
 8000dc2:	1ac9      	subs	r1, r1, r3
 8000dc4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc8:	e73b      	b.n	8000c42 <__udivmoddi4+0xfe>
 8000dca:	4637      	mov	r7, r6
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e709      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000dd0:	4607      	mov	r7, r0
 8000dd2:	e6e7      	b.n	8000ba4 <__udivmoddi4+0x60>
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	e6fb      	b.n	8000bd0 <__udivmoddi4+0x8c>
 8000dd8:	4541      	cmp	r1, r8
 8000dda:	d2ab      	bcs.n	8000d34 <__udivmoddi4+0x1f0>
 8000ddc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000de0:	eb69 020e 	sbc.w	r2, r9, lr
 8000de4:	3801      	subs	r0, #1
 8000de6:	4613      	mov	r3, r2
 8000de8:	e7a4      	b.n	8000d34 <__udivmoddi4+0x1f0>
 8000dea:	4660      	mov	r0, ip
 8000dec:	e7e9      	b.n	8000dc2 <__udivmoddi4+0x27e>
 8000dee:	4618      	mov	r0, r3
 8000df0:	e795      	b.n	8000d1e <__udivmoddi4+0x1da>
 8000df2:	4667      	mov	r7, ip
 8000df4:	e7d1      	b.n	8000d9a <__udivmoddi4+0x256>
 8000df6:	4681      	mov	r9, r0
 8000df8:	e77c      	b.n	8000cf4 <__udivmoddi4+0x1b0>
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	442c      	add	r4, r5
 8000dfe:	e747      	b.n	8000c90 <__udivmoddi4+0x14c>
 8000e00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e04:	442b      	add	r3, r5
 8000e06:	e72f      	b.n	8000c68 <__udivmoddi4+0x124>
 8000e08:	4638      	mov	r0, r7
 8000e0a:	e708      	b.n	8000c1e <__udivmoddi4+0xda>
 8000e0c:	4637      	mov	r7, r6
 8000e0e:	e6e9      	b.n	8000be4 <__udivmoddi4+0xa0>

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <HAL_Init+0x40>)
 8000e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <HAL_Init+0x40>)
 8000e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_Init+0x40>)
 8000e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 f94d 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f000 f808 	bl	8000e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e48:	f007 fafa 	bl	8008440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023c00 	.word	0x40023c00

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_InitTick+0x54>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_InitTick+0x58>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f965 	bl	8001146 <HAL_SYSTICK_Config>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00e      	b.n	8000ea4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b0f      	cmp	r3, #15
 8000e8a:	d80a      	bhi.n	8000ea2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e94:	f000 f92d 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e98:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <HAL_InitTick+0x5c>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e000      	b.n	8000ea4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000004 	.word	0x20000004
 8000eb4:	20000000 	.word	0x20000000

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000004 	.word	0x20000004
 8000edc:	20000aa8 	.word	0x20000aa8

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000aa8 	.word	0x20000aa8

08000ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f00:	f7ff ffee 	bl	8000ee0 <HAL_GetTick>
 8000f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f10:	d005      	beq.n	8000f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <HAL_Delay+0x40>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f1e:	bf00      	nop
 8000f20:	f7ff ffde 	bl	8000ee0 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d8f7      	bhi.n	8000f20 <HAL_Delay+0x28>
  {
  }
}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000004 	.word	0x20000004

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	; (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	; (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	; (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff29 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff3e 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff8e 	bl	8001030 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5d 	bl	8000fdc <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff31 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffa2 	bl	8001098 <SysTick_Config>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800116c:	f7ff feb8 	bl	8000ee0 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e099      	b.n	80012b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2202      	movs	r2, #2
 8001188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0201 	bic.w	r2, r2, #1
 800119a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800119c:	e00f      	b.n	80011be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800119e:	f7ff fe9f 	bl	8000ee0 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b05      	cmp	r3, #5
 80011aa:	d908      	bls.n	80011be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2220      	movs	r2, #32
 80011b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2203      	movs	r2, #3
 80011b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e078      	b.n	80012b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1e8      	bne.n	800119e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	4b38      	ldr	r3, [pc, #224]	; (80012b8 <HAL_DMA_Init+0x158>)
 80011d8:	4013      	ands	r3, r2
 80011da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001202:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	4313      	orrs	r3, r2
 800120e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	2b04      	cmp	r3, #4
 8001216:	d107      	bne.n	8001228 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	4313      	orrs	r3, r2
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4313      	orrs	r3, r2
 8001226:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f023 0307 	bic.w	r3, r3, #7
 800123e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	4313      	orrs	r3, r2
 8001248:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	2b04      	cmp	r3, #4
 8001250:	d117      	bne.n	8001282 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	4313      	orrs	r3, r2
 800125a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001260:	2b00      	cmp	r3, #0
 8001262:	d00e      	beq.n	8001282 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 fa91 	bl	800178c <DMA_CheckFifoParam>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d008      	beq.n	8001282 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2240      	movs	r2, #64	; 0x40
 8001274:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800127e:	2301      	movs	r3, #1
 8001280:	e016      	b.n	80012b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 fa48 	bl	8001720 <DMA_CalcBaseAndBitshift>
 8001290:	4603      	mov	r3, r0
 8001292:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001298:	223f      	movs	r2, #63	; 0x3f
 800129a:	409a      	lsls	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	f010803f 	.word	0xf010803f

080012bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_DMA_Start_IT+0x26>
 80012de:	2302      	movs	r3, #2
 80012e0:	e040      	b.n	8001364 <HAL_DMA_Start_IT+0xa8>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d12f      	bne.n	8001356 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2202      	movs	r2, #2
 80012fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2200      	movs	r2, #0
 8001302:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f000 f9da 	bl	80016c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001314:	223f      	movs	r2, #63	; 0x3f
 8001316:	409a      	lsls	r2, r3
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0216 	orr.w	r2, r2, #22
 800132a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	2b00      	cmp	r3, #0
 8001332:	d007      	beq.n	8001344 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f042 0208 	orr.w	r2, r2, #8
 8001342:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0201 	orr.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	e005      	b.n	8001362 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800135e:	2302      	movs	r3, #2
 8001360:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001362:	7dfb      	ldrb	r3, [r7, #23]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d004      	beq.n	800138a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e00c      	b.n	80013a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2205      	movs	r2, #5
 800138e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0201 	bic.w	r2, r2, #1
 80013a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013bc:	4b92      	ldr	r3, [pc, #584]	; (8001608 <HAL_DMA_IRQHandler+0x258>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a92      	ldr	r2, [pc, #584]	; (800160c <HAL_DMA_IRQHandler+0x25c>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	0a9b      	lsrs	r3, r3, #10
 80013c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013da:	2208      	movs	r2, #8
 80013dc:	409a      	lsls	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d01a      	beq.n	800141c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d013      	beq.n	800141c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0204 	bic.w	r2, r2, #4
 8001402:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001408:	2208      	movs	r2, #8
 800140a:	409a      	lsls	r2, r3
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001414:	f043 0201 	orr.w	r2, r3, #1
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001420:	2201      	movs	r2, #1
 8001422:	409a      	lsls	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4013      	ands	r3, r2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d012      	beq.n	8001452 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143e:	2201      	movs	r2, #1
 8001440:	409a      	lsls	r2, r3
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144a:	f043 0202 	orr.w	r2, r3, #2
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001456:	2204      	movs	r2, #4
 8001458:	409a      	lsls	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4013      	ands	r3, r2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d012      	beq.n	8001488 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00b      	beq.n	8001488 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001474:	2204      	movs	r2, #4
 8001476:	409a      	lsls	r2, r3
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001480:	f043 0204 	orr.w	r2, r3, #4
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148c:	2210      	movs	r2, #16
 800148e:	409a      	lsls	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4013      	ands	r3, r2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d043      	beq.n	8001520 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d03c      	beq.n	8001520 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014aa:	2210      	movs	r2, #16
 80014ac:	409a      	lsls	r2, r3
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d018      	beq.n	80014f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d108      	bne.n	80014e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d024      	beq.n	8001520 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	4798      	blx	r3
 80014de:	e01f      	b.n	8001520 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d01b      	beq.n	8001520 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	4798      	blx	r3
 80014f0:	e016      	b.n	8001520 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d107      	bne.n	8001510 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0208 	bic.w	r2, r2, #8
 800150e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001524:	2220      	movs	r2, #32
 8001526:	409a      	lsls	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4013      	ands	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 808e 	beq.w	800164e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0310 	and.w	r3, r3, #16
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 8086 	beq.w	800164e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001546:	2220      	movs	r2, #32
 8001548:	409a      	lsls	r2, r3
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b05      	cmp	r3, #5
 8001558:	d136      	bne.n	80015c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0216 	bic.w	r2, r2, #22
 8001568:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	695a      	ldr	r2, [r3, #20]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001578:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	2b00      	cmp	r3, #0
 8001580:	d103      	bne.n	800158a <HAL_DMA_IRQHandler+0x1da>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001586:	2b00      	cmp	r3, #0
 8001588:	d007      	beq.n	800159a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0208 	bic.w	r2, r2, #8
 8001598:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159e:	223f      	movs	r2, #63	; 0x3f
 80015a0:	409a      	lsls	r2, r3
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d07d      	beq.n	80016ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	4798      	blx	r3
        }
        return;
 80015c6:	e078      	b.n	80016ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d01c      	beq.n	8001610 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d108      	bne.n	80015f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d030      	beq.n	800164e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	4798      	blx	r3
 80015f4:	e02b      	b.n	800164e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d027      	beq.n	800164e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	4798      	blx	r3
 8001606:	e022      	b.n	800164e <HAL_DMA_IRQHandler+0x29e>
 8001608:	20000008 	.word	0x20000008
 800160c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10f      	bne.n	800163e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0210 	bic.w	r2, r2, #16
 800162c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001652:	2b00      	cmp	r3, #0
 8001654:	d032      	beq.n	80016bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d022      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2205      	movs	r2, #5
 8001666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0201 	bic.w	r2, r2, #1
 8001678:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	3301      	adds	r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	429a      	cmp	r2, r3
 8001684:	d307      	bcc.n	8001696 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f2      	bne.n	800167a <HAL_DMA_IRQHandler+0x2ca>
 8001694:	e000      	b.n	8001698 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001696:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	4798      	blx	r3
 80016b8:	e000      	b.n	80016bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80016ba:	bf00      	nop
    }
  }
}
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop

080016c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b40      	cmp	r3, #64	; 0x40
 80016f0:	d108      	bne.n	8001704 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001702:	e007      	b.n	8001714 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	60da      	str	r2, [r3, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	3b10      	subs	r3, #16
 8001730:	4a14      	ldr	r2, [pc, #80]	; (8001784 <DMA_CalcBaseAndBitshift+0x64>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	091b      	lsrs	r3, r3, #4
 8001738:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800173a:	4a13      	ldr	r2, [pc, #76]	; (8001788 <DMA_CalcBaseAndBitshift+0x68>)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b03      	cmp	r3, #3
 800174c:	d909      	bls.n	8001762 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001756:	f023 0303 	bic.w	r3, r3, #3
 800175a:	1d1a      	adds	r2, r3, #4
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	659a      	str	r2, [r3, #88]	; 0x58
 8001760:	e007      	b.n	8001772 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800176a:	f023 0303 	bic.w	r3, r3, #3
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001776:	4618      	mov	r0, r3
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	aaaaaaab 	.word	0xaaaaaaab
 8001788:	08008ff8 	.word	0x08008ff8

0800178c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d11f      	bne.n	80017e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	d855      	bhi.n	8001858 <DMA_CheckFifoParam+0xcc>
 80017ac:	a201      	add	r2, pc, #4	; (adr r2, 80017b4 <DMA_CheckFifoParam+0x28>)
 80017ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b2:	bf00      	nop
 80017b4:	080017c5 	.word	0x080017c5
 80017b8:	080017d7 	.word	0x080017d7
 80017bc:	080017c5 	.word	0x080017c5
 80017c0:	08001859 	.word	0x08001859
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d045      	beq.n	800185c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017d4:	e042      	b.n	800185c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017de:	d13f      	bne.n	8001860 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017e4:	e03c      	b.n	8001860 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ee:	d121      	bne.n	8001834 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d836      	bhi.n	8001864 <DMA_CheckFifoParam+0xd8>
 80017f6:	a201      	add	r2, pc, #4	; (adr r2, 80017fc <DMA_CheckFifoParam+0x70>)
 80017f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fc:	0800180d 	.word	0x0800180d
 8001800:	08001813 	.word	0x08001813
 8001804:	0800180d 	.word	0x0800180d
 8001808:	08001825 	.word	0x08001825
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
      break;
 8001810:	e02f      	b.n	8001872 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001816:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d024      	beq.n	8001868 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001822:	e021      	b.n	8001868 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800182c:	d11e      	bne.n	800186c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001832:	e01b      	b.n	800186c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d902      	bls.n	8001840 <DMA_CheckFifoParam+0xb4>
 800183a:	2b03      	cmp	r3, #3
 800183c:	d003      	beq.n	8001846 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800183e:	e018      	b.n	8001872 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]
      break;
 8001844:	e015      	b.n	8001872 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00e      	beq.n	8001870 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
      break;
 8001856:	e00b      	b.n	8001870 <DMA_CheckFifoParam+0xe4>
      break;
 8001858:	bf00      	nop
 800185a:	e00a      	b.n	8001872 <DMA_CheckFifoParam+0xe6>
      break;
 800185c:	bf00      	nop
 800185e:	e008      	b.n	8001872 <DMA_CheckFifoParam+0xe6>
      break;
 8001860:	bf00      	nop
 8001862:	e006      	b.n	8001872 <DMA_CheckFifoParam+0xe6>
      break;
 8001864:	bf00      	nop
 8001866:	e004      	b.n	8001872 <DMA_CheckFifoParam+0xe6>
      break;
 8001868:	bf00      	nop
 800186a:	e002      	b.n	8001872 <DMA_CheckFifoParam+0xe6>
      break;   
 800186c:	bf00      	nop
 800186e:	e000      	b.n	8001872 <DMA_CheckFifoParam+0xe6>
      break;
 8001870:	bf00      	nop
    }
  } 
  
  return status; 
 8001872:	7bfb      	ldrb	r3, [r7, #15]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	e165      	b.n	8001b68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800189c:	2201      	movs	r2, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	f040 8154 	bne.w	8001b62 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d00b      	beq.n	80018da <HAL_GPIO_Init+0x5a>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d007      	beq.n	80018da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ce:	2b11      	cmp	r3, #17
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b12      	cmp	r3, #18
 80018d8:	d130      	bne.n	800193c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2203      	movs	r2, #3
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001910:	2201      	movs	r2, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 0201 	and.w	r2, r3, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2203      	movs	r2, #3
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0xfc>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b12      	cmp	r3, #18
 800197a:	d123      	bne.n	80019c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	08da      	lsrs	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3208      	adds	r2, #8
 8001984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	08da      	lsrs	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3208      	adds	r2, #8
 80019be:	69b9      	ldr	r1, [r7, #24]
 80019c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0203 	and.w	r2, r3, #3
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80ae 	beq.w	8001b62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b5c      	ldr	r3, [pc, #368]	; (8001b7c <HAL_GPIO_Init+0x2fc>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a5b      	ldr	r2, [pc, #364]	; (8001b7c <HAL_GPIO_Init+0x2fc>)
 8001a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b59      	ldr	r3, [pc, #356]	; (8001b7c <HAL_GPIO_Init+0x2fc>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a22:	4a57      	ldr	r2, [pc, #348]	; (8001b80 <HAL_GPIO_Init+0x300>)
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	220f      	movs	r2, #15
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4e      	ldr	r2, [pc, #312]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d025      	beq.n	8001a9a <HAL_GPIO_Init+0x21a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4d      	ldr	r2, [pc, #308]	; (8001b88 <HAL_GPIO_Init+0x308>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d01f      	beq.n	8001a96 <HAL_GPIO_Init+0x216>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4c      	ldr	r2, [pc, #304]	; (8001b8c <HAL_GPIO_Init+0x30c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d019      	beq.n	8001a92 <HAL_GPIO_Init+0x212>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4b      	ldr	r2, [pc, #300]	; (8001b90 <HAL_GPIO_Init+0x310>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d013      	beq.n	8001a8e <HAL_GPIO_Init+0x20e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4a      	ldr	r2, [pc, #296]	; (8001b94 <HAL_GPIO_Init+0x314>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00d      	beq.n	8001a8a <HAL_GPIO_Init+0x20a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a49      	ldr	r2, [pc, #292]	; (8001b98 <HAL_GPIO_Init+0x318>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d007      	beq.n	8001a86 <HAL_GPIO_Init+0x206>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a48      	ldr	r2, [pc, #288]	; (8001b9c <HAL_GPIO_Init+0x31c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d101      	bne.n	8001a82 <HAL_GPIO_Init+0x202>
 8001a7e:	2306      	movs	r3, #6
 8001a80:	e00c      	b.n	8001a9c <HAL_GPIO_Init+0x21c>
 8001a82:	2307      	movs	r3, #7
 8001a84:	e00a      	b.n	8001a9c <HAL_GPIO_Init+0x21c>
 8001a86:	2305      	movs	r3, #5
 8001a88:	e008      	b.n	8001a9c <HAL_GPIO_Init+0x21c>
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x21c>
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e004      	b.n	8001a9c <HAL_GPIO_Init+0x21c>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e002      	b.n	8001a9c <HAL_GPIO_Init+0x21c>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <HAL_GPIO_Init+0x21c>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	f002 0203 	and.w	r2, r2, #3
 8001aa2:	0092      	lsls	r2, r2, #2
 8001aa4:	4093      	lsls	r3, r2
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aac:	4934      	ldr	r1, [pc, #208]	; (8001b80 <HAL_GPIO_Init+0x300>)
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aba:	4b39      	ldr	r3, [pc, #228]	; (8001ba0 <HAL_GPIO_Init+0x320>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ade:	4a30      	ldr	r2, [pc, #192]	; (8001ba0 <HAL_GPIO_Init+0x320>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ae4:	4b2e      	ldr	r3, [pc, #184]	; (8001ba0 <HAL_GPIO_Init+0x320>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b08:	4a25      	ldr	r2, [pc, #148]	; (8001ba0 <HAL_GPIO_Init+0x320>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b0e:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <HAL_GPIO_Init+0x320>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b32:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <HAL_GPIO_Init+0x320>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <HAL_GPIO_Init+0x320>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b5c:	4a10      	ldr	r2, [pc, #64]	; (8001ba0 <HAL_GPIO_Init+0x320>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3301      	adds	r3, #1
 8001b66:	61fb      	str	r3, [r7, #28]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	2b0f      	cmp	r3, #15
 8001b6c:	f67f ae96 	bls.w	800189c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b70:	bf00      	nop
 8001b72:	3724      	adds	r7, #36	; 0x24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40013800 	.word	0x40013800
 8001b84:	40020000 	.word	0x40020000
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	40020800 	.word	0x40020800
 8001b90:	40020c00 	.word	0x40020c00
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40021400 	.word	0x40021400
 8001b9c:	40021800 	.word	0x40021800
 8001ba0:	40013c00 	.word	0x40013c00

08001ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb4:	787b      	ldrb	r3, [r7, #1]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bba:	887a      	ldrh	r2, [r7, #2]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bc0:	e003      	b.n	8001bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bc2:	887b      	ldrh	r3, [r7, #2]
 8001bc4:	041a      	lsls	r2, r3, #16
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	619a      	str	r2, [r3, #24]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_PWREx_EnableOverDrive+0x90>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a1f      	ldr	r2, [pc, #124]	; (8001c68 <HAL_PWREx_EnableOverDrive+0x90>)
 8001bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_PWREx_EnableOverDrive+0x90>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001bfe:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <HAL_PWREx_EnableOverDrive+0x94>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c04:	f7ff f96c 	bl	8000ee0 <HAL_GetTick>
 8001c08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c0a:	e009      	b.n	8001c20 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c0c:	f7ff f968 	bl	8000ee0 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c1a:	d901      	bls.n	8001c20 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e01f      	b.n	8001c60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2c:	d1ee      	bne.n	8001c0c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c34:	f7ff f954 	bl	8000ee0 <HAL_GetTick>
 8001c38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c3a:	e009      	b.n	8001c50 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c3c:	f7ff f950 	bl	8000ee0 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c4a:	d901      	bls.n	8001c50 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e007      	b.n	8001c60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c5c:	d1ee      	bne.n	8001c3c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	420e0040 	.word	0x420e0040
 8001c70:	40007000 	.word	0x40007000
 8001c74:	420e0044 	.word	0x420e0044

08001c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0cc      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b68      	ldr	r3, [pc, #416]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d90c      	bls.n	8001cb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b65      	ldr	r3, [pc, #404]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca2:	4b63      	ldr	r3, [pc, #396]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0b8      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d020      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ccc:	4b59      	ldr	r3, [pc, #356]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4a58      	ldr	r2, [pc, #352]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce4:	4b53      	ldr	r3, [pc, #332]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4a52      	ldr	r2, [pc, #328]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	4b50      	ldr	r3, [pc, #320]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	494d      	ldr	r1, [pc, #308]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d044      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d119      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e07f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d003      	beq.n	8001d36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d36:	4b3f      	ldr	r3, [pc, #252]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e06f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d46:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e067      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d56:	4b37      	ldr	r3, [pc, #220]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f023 0203 	bic.w	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4934      	ldr	r1, [pc, #208]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d68:	f7ff f8ba 	bl	8000ee0 <HAL_GetTick>
 8001d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d70:	f7ff f8b6 	bl	8000ee0 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e04f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 020c 	and.w	r2, r3, #12
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d1eb      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d98:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d20c      	bcs.n	8001dc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e032      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	4916      	ldr	r1, [pc, #88]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dea:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	490e      	ldr	r1, [pc, #56]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dfe:	f000 f855 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8001e02:	4601      	mov	r1, r0
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	5cd3      	ldrb	r3, [r2, r3]
 8001e12:	fa21 f303 	lsr.w	r3, r1, r3
 8001e16:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f81a 	bl	8000e58 <HAL_InitTick>

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023c00 	.word	0x40023c00
 8001e34:	40023800 	.word	0x40023800
 8001e38:	0800917c 	.word	0x0800917c
 8001e3c:	20000008 	.word	0x20000008
 8001e40:	20000000 	.word	0x20000000

08001e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000008 	.word	0x20000008

08001e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e60:	f7ff fff0 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e64:	4601      	mov	r1, r0
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	0a9b      	lsrs	r3, r3, #10
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	4a03      	ldr	r2, [pc, #12]	; (8001e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e72:	5cd3      	ldrb	r3, [r2, r3]
 8001e74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	0800918c 	.word	0x0800918c

08001e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e88:	f7ff ffdc 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e8c:	4601      	mov	r1, r0
 8001e8e:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	0b5b      	lsrs	r3, r3, #13
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	4a03      	ldr	r2, [pc, #12]	; (8001ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	0800918c 	.word	0x0800918c

08001eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ec6:	4b9f      	ldr	r3, [pc, #636]	; (8002144 <HAL_RCC_GetSysClockFreq+0x298>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b0c      	cmp	r3, #12
 8001ed0:	f200 8130 	bhi.w	8002134 <HAL_RCC_GetSysClockFreq+0x288>
 8001ed4:	a201      	add	r2, pc, #4	; (adr r2, 8001edc <HAL_RCC_GetSysClockFreq+0x30>)
 8001ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eda:	bf00      	nop
 8001edc:	08001f11 	.word	0x08001f11
 8001ee0:	08002135 	.word	0x08002135
 8001ee4:	08002135 	.word	0x08002135
 8001ee8:	08002135 	.word	0x08002135
 8001eec:	08001f17 	.word	0x08001f17
 8001ef0:	08002135 	.word	0x08002135
 8001ef4:	08002135 	.word	0x08002135
 8001ef8:	08002135 	.word	0x08002135
 8001efc:	08001f1d 	.word	0x08001f1d
 8001f00:	08002135 	.word	0x08002135
 8001f04:	08002135 	.word	0x08002135
 8001f08:	08002135 	.word	0x08002135
 8001f0c:	0800202b 	.word	0x0800202b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f10:	4b8d      	ldr	r3, [pc, #564]	; (8002148 <HAL_RCC_GetSysClockFreq+0x29c>)
 8001f12:	613b      	str	r3, [r7, #16]
       break;
 8001f14:	e111      	b.n	800213a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f16:	4b8d      	ldr	r3, [pc, #564]	; (800214c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001f18:	613b      	str	r3, [r7, #16]
      break;
 8001f1a:	e10e      	b.n	800213a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f1c:	4b89      	ldr	r3, [pc, #548]	; (8002144 <HAL_RCC_GetSysClockFreq+0x298>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f24:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f26:	4b87      	ldr	r3, [pc, #540]	; (8002144 <HAL_RCC_GetSysClockFreq+0x298>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d023      	beq.n	8001f7a <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f32:	4b84      	ldr	r3, [pc, #528]	; (8002144 <HAL_RCC_GetSysClockFreq+0x298>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	099b      	lsrs	r3, r3, #6
 8001f38:	f04f 0400 	mov.w	r4, #0
 8001f3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	ea03 0501 	and.w	r5, r3, r1
 8001f48:	ea04 0602 	and.w	r6, r4, r2
 8001f4c:	4a7f      	ldr	r2, [pc, #508]	; (800214c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001f4e:	fb02 f106 	mul.w	r1, r2, r6
 8001f52:	2200      	movs	r2, #0
 8001f54:	fb02 f205 	mul.w	r2, r2, r5
 8001f58:	440a      	add	r2, r1
 8001f5a:	497c      	ldr	r1, [pc, #496]	; (800214c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001f5c:	fba5 0101 	umull	r0, r1, r5, r1
 8001f60:	1853      	adds	r3, r2, r1
 8001f62:	4619      	mov	r1, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f04f 0400 	mov.w	r4, #0
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4623      	mov	r3, r4
 8001f6e:	f7fe fdd1 	bl	8000b14 <__aeabi_uldivmod>
 8001f72:	4603      	mov	r3, r0
 8001f74:	460c      	mov	r4, r1
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	e049      	b.n	800200e <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f7a:	4b72      	ldr	r3, [pc, #456]	; (8002144 <HAL_RCC_GetSysClockFreq+0x298>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	099b      	lsrs	r3, r3, #6
 8001f80:	f04f 0400 	mov.w	r4, #0
 8001f84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	ea03 0501 	and.w	r5, r3, r1
 8001f90:	ea04 0602 	and.w	r6, r4, r2
 8001f94:	4629      	mov	r1, r5
 8001f96:	4632      	mov	r2, r6
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	f04f 0400 	mov.w	r4, #0
 8001fa0:	0154      	lsls	r4, r2, #5
 8001fa2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fa6:	014b      	lsls	r3, r1, #5
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4622      	mov	r2, r4
 8001fac:	1b49      	subs	r1, r1, r5
 8001fae:	eb62 0206 	sbc.w	r2, r2, r6
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	f04f 0400 	mov.w	r4, #0
 8001fba:	0194      	lsls	r4, r2, #6
 8001fbc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001fc0:	018b      	lsls	r3, r1, #6
 8001fc2:	1a5b      	subs	r3, r3, r1
 8001fc4:	eb64 0402 	sbc.w	r4, r4, r2
 8001fc8:	f04f 0100 	mov.w	r1, #0
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	00e2      	lsls	r2, r4, #3
 8001fd2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fd6:	00d9      	lsls	r1, r3, #3
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4614      	mov	r4, r2
 8001fdc:	195b      	adds	r3, r3, r5
 8001fde:	eb44 0406 	adc.w	r4, r4, r6
 8001fe2:	f04f 0100 	mov.w	r1, #0
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	02a2      	lsls	r2, r4, #10
 8001fec:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ff0:	0299      	lsls	r1, r3, #10
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4614      	mov	r4, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	4621      	mov	r1, r4
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f04f 0400 	mov.w	r4, #0
 8002000:	461a      	mov	r2, r3
 8002002:	4623      	mov	r3, r4
 8002004:	f7fe fd86 	bl	8000b14 <__aeabi_uldivmod>
 8002008:	4603      	mov	r3, r0
 800200a:	460c      	mov	r4, r1
 800200c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800200e:	4b4d      	ldr	r3, [pc, #308]	; (8002144 <HAL_RCC_GetSysClockFreq+0x298>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	0c1b      	lsrs	r3, r3, #16
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	3301      	adds	r3, #1
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	fbb2 f3f3 	udiv	r3, r2, r3
 8002026:	613b      	str	r3, [r7, #16]
      break;
 8002028:	e087      	b.n	800213a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800202a:	4b46      	ldr	r3, [pc, #280]	; (8002144 <HAL_RCC_GetSysClockFreq+0x298>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002032:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002034:	4b43      	ldr	r3, [pc, #268]	; (8002144 <HAL_RCC_GetSysClockFreq+0x298>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d023      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002040:	4b40      	ldr	r3, [pc, #256]	; (8002144 <HAL_RCC_GetSysClockFreq+0x298>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	099b      	lsrs	r3, r3, #6
 8002046:	f04f 0400 	mov.w	r4, #0
 800204a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	ea03 0501 	and.w	r5, r3, r1
 8002056:	ea04 0602 	and.w	r6, r4, r2
 800205a:	4a3c      	ldr	r2, [pc, #240]	; (800214c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800205c:	fb02 f106 	mul.w	r1, r2, r6
 8002060:	2200      	movs	r2, #0
 8002062:	fb02 f205 	mul.w	r2, r2, r5
 8002066:	440a      	add	r2, r1
 8002068:	4938      	ldr	r1, [pc, #224]	; (800214c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800206a:	fba5 0101 	umull	r0, r1, r5, r1
 800206e:	1853      	adds	r3, r2, r1
 8002070:	4619      	mov	r1, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f04f 0400 	mov.w	r4, #0
 8002078:	461a      	mov	r2, r3
 800207a:	4623      	mov	r3, r4
 800207c:	f7fe fd4a 	bl	8000b14 <__aeabi_uldivmod>
 8002080:	4603      	mov	r3, r0
 8002082:	460c      	mov	r4, r1
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	e049      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002088:	4b2e      	ldr	r3, [pc, #184]	; (8002144 <HAL_RCC_GetSysClockFreq+0x298>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	099b      	lsrs	r3, r3, #6
 800208e:	f04f 0400 	mov.w	r4, #0
 8002092:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	ea03 0501 	and.w	r5, r3, r1
 800209e:	ea04 0602 	and.w	r6, r4, r2
 80020a2:	4629      	mov	r1, r5
 80020a4:	4632      	mov	r2, r6
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	f04f 0400 	mov.w	r4, #0
 80020ae:	0154      	lsls	r4, r2, #5
 80020b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020b4:	014b      	lsls	r3, r1, #5
 80020b6:	4619      	mov	r1, r3
 80020b8:	4622      	mov	r2, r4
 80020ba:	1b49      	subs	r1, r1, r5
 80020bc:	eb62 0206 	sbc.w	r2, r2, r6
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	f04f 0400 	mov.w	r4, #0
 80020c8:	0194      	lsls	r4, r2, #6
 80020ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020ce:	018b      	lsls	r3, r1, #6
 80020d0:	1a5b      	subs	r3, r3, r1
 80020d2:	eb64 0402 	sbc.w	r4, r4, r2
 80020d6:	f04f 0100 	mov.w	r1, #0
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	00e2      	lsls	r2, r4, #3
 80020e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020e4:	00d9      	lsls	r1, r3, #3
 80020e6:	460b      	mov	r3, r1
 80020e8:	4614      	mov	r4, r2
 80020ea:	195b      	adds	r3, r3, r5
 80020ec:	eb44 0406 	adc.w	r4, r4, r6
 80020f0:	f04f 0100 	mov.w	r1, #0
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	02a2      	lsls	r2, r4, #10
 80020fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80020fe:	0299      	lsls	r1, r3, #10
 8002100:	460b      	mov	r3, r1
 8002102:	4614      	mov	r4, r2
 8002104:	4618      	mov	r0, r3
 8002106:	4621      	mov	r1, r4
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f04f 0400 	mov.w	r4, #0
 800210e:	461a      	mov	r2, r3
 8002110:	4623      	mov	r3, r4
 8002112:	f7fe fcff 	bl	8000b14 <__aeabi_uldivmod>
 8002116:	4603      	mov	r3, r0
 8002118:	460c      	mov	r4, r1
 800211a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_RCC_GetSysClockFreq+0x298>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	0f1b      	lsrs	r3, r3, #28
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002130:	613b      	str	r3, [r7, #16]
      break;
 8002132:	e002      	b.n	800213a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002136:	613b      	str	r3, [r7, #16]
      break;
 8002138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800213a:	693b      	ldr	r3, [r7, #16]
}
 800213c:	4618      	mov	r0, r3
 800213e:	371c      	adds	r7, #28
 8002140:	46bd      	mov	sp, r7
 8002142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002144:	40023800 	.word	0x40023800
 8002148:	00f42400 	.word	0x00f42400
 800214c:	017d7840 	.word	0x017d7840

08002150 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 8083 	beq.w	8002270 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800216a:	4b95      	ldr	r3, [pc, #596]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b04      	cmp	r3, #4
 8002174:	d019      	beq.n	80021aa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002176:	4b92      	ldr	r3, [pc, #584]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800217e:	2b08      	cmp	r3, #8
 8002180:	d106      	bne.n	8002190 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002182:	4b8f      	ldr	r3, [pc, #572]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800218e:	d00c      	beq.n	80021aa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002190:	4b8b      	ldr	r3, [pc, #556]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002198:	2b0c      	cmp	r3, #12
 800219a:	d112      	bne.n	80021c2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800219c:	4b88      	ldr	r3, [pc, #544]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021a8:	d10b      	bne.n	80021c2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021aa:	4b85      	ldr	r3, [pc, #532]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d05b      	beq.n	800226e <HAL_RCC_OscConfig+0x11e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d157      	bne.n	800226e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e216      	b.n	80025f0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ca:	d106      	bne.n	80021da <HAL_RCC_OscConfig+0x8a>
 80021cc:	4b7c      	ldr	r3, [pc, #496]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a7b      	ldr	r2, [pc, #492]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	e01d      	b.n	8002216 <HAL_RCC_OscConfig+0xc6>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e2:	d10c      	bne.n	80021fe <HAL_RCC_OscConfig+0xae>
 80021e4:	4b76      	ldr	r3, [pc, #472]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a75      	ldr	r2, [pc, #468]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	4b73      	ldr	r3, [pc, #460]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a72      	ldr	r2, [pc, #456]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80021f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	e00b      	b.n	8002216 <HAL_RCC_OscConfig+0xc6>
 80021fe:	4b70      	ldr	r3, [pc, #448]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a6f      	ldr	r2, [pc, #444]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b6d      	ldr	r3, [pc, #436]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a6c      	ldr	r2, [pc, #432]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002210:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002214:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d013      	beq.n	8002246 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221e:	f7fe fe5f 	bl	8000ee0 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002226:	f7fe fe5b 	bl	8000ee0 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b64      	cmp	r3, #100	; 0x64
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e1db      	b.n	80025f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002238:	4b61      	ldr	r3, [pc, #388]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0xd6>
 8002244:	e014      	b.n	8002270 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002246:	f7fe fe4b 	bl	8000ee0 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224e:	f7fe fe47 	bl	8000ee0 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b64      	cmp	r3, #100	; 0x64
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e1c7      	b.n	80025f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002260:	4b57      	ldr	r3, [pc, #348]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f0      	bne.n	800224e <HAL_RCC_OscConfig+0xfe>
 800226c:	e000      	b.n	8002270 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d06f      	beq.n	800235c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800227c:	4b50      	ldr	r3, [pc, #320]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 030c 	and.w	r3, r3, #12
 8002284:	2b00      	cmp	r3, #0
 8002286:	d017      	beq.n	80022b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002288:	4b4d      	ldr	r3, [pc, #308]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002290:	2b08      	cmp	r3, #8
 8002292:	d105      	bne.n	80022a0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002294:	4b4a      	ldr	r3, [pc, #296]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00b      	beq.n	80022b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a0:	4b47      	ldr	r3, [pc, #284]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022a8:	2b0c      	cmp	r3, #12
 80022aa:	d11c      	bne.n	80022e6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ac:	4b44      	ldr	r3, [pc, #272]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d116      	bne.n	80022e6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b8:	4b41      	ldr	r3, [pc, #260]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_OscConfig+0x180>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e18f      	b.n	80025f0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d0:	4b3b      	ldr	r3, [pc, #236]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4938      	ldr	r1, [pc, #224]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e4:	e03a      	b.n	800235c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d020      	beq.n	8002330 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ee:	4b35      	ldr	r3, [pc, #212]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe fdf4 	bl	8000ee0 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022fc:	f7fe fdf0 	bl	8000ee0 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e170      	b.n	80025f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230e:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231a:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4925      	ldr	r1, [pc, #148]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]
 800232e:	e015      	b.n	800235c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002330:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <HAL_RCC_OscConfig+0x274>)
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7fe fdd3 	bl	8000ee0 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233e:	f7fe fdcf 	bl	8000ee0 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e14f      	b.n	80025f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f0      	bne.n	800233e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d037      	beq.n	80023d8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d016      	beq.n	800239e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002370:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <HAL_RCC_OscConfig+0x278>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002376:	f7fe fdb3 	bl	8000ee0 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237e:	f7fe fdaf 	bl	8000ee0 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e12f      	b.n	80025f0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_RCC_OscConfig+0x270>)
 8002392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x22e>
 800239c:	e01c      	b.n	80023d8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_RCC_OscConfig+0x278>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a4:	f7fe fd9c 	bl	8000ee0 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023aa:	e00f      	b.n	80023cc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ac:	f7fe fd98 	bl	8000ee0 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d908      	bls.n	80023cc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e118      	b.n	80025f0 <HAL_RCC_OscConfig+0x4a0>
 80023be:	bf00      	nop
 80023c0:	40023800 	.word	0x40023800
 80023c4:	42470000 	.word	0x42470000
 80023c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023cc:	4b8a      	ldr	r3, [pc, #552]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 80023ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1e9      	bne.n	80023ac <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 8097 	beq.w	8002514 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e6:	2300      	movs	r3, #0
 80023e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ea:	4b83      	ldr	r3, [pc, #524]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10f      	bne.n	8002416 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	4b7f      	ldr	r3, [pc, #508]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	4a7e      	ldr	r2, [pc, #504]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002404:	6413      	str	r3, [r2, #64]	; 0x40
 8002406:	4b7c      	ldr	r3, [pc, #496]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002412:	2301      	movs	r3, #1
 8002414:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002416:	4b79      	ldr	r3, [pc, #484]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d118      	bne.n	8002454 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002422:	4b76      	ldr	r3, [pc, #472]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a75      	ldr	r2, [pc, #468]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 8002428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242e:	f7fe fd57 	bl	8000ee0 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002436:	f7fe fd53 	bl	8000ee0 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e0d3      	b.n	80025f0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002448:	4b6c      	ldr	r3, [pc, #432]	; (80025fc <HAL_RCC_OscConfig+0x4ac>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x31a>
 800245c:	4b66      	ldr	r3, [pc, #408]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	4a65      	ldr	r2, [pc, #404]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6713      	str	r3, [r2, #112]	; 0x70
 8002468:	e01c      	b.n	80024a4 <HAL_RCC_OscConfig+0x354>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b05      	cmp	r3, #5
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x33c>
 8002472:	4b61      	ldr	r3, [pc, #388]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 8002474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002476:	4a60      	ldr	r2, [pc, #384]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 8002478:	f043 0304 	orr.w	r3, r3, #4
 800247c:	6713      	str	r3, [r2, #112]	; 0x70
 800247e:	4b5e      	ldr	r3, [pc, #376]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	4a5d      	ldr	r2, [pc, #372]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6713      	str	r3, [r2, #112]	; 0x70
 800248a:	e00b      	b.n	80024a4 <HAL_RCC_OscConfig+0x354>
 800248c:	4b5a      	ldr	r3, [pc, #360]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 800248e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002490:	4a59      	ldr	r2, [pc, #356]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	6713      	str	r3, [r2, #112]	; 0x70
 8002498:	4b57      	ldr	r3, [pc, #348]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 800249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249c:	4a56      	ldr	r2, [pc, #344]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 800249e:	f023 0304 	bic.w	r3, r3, #4
 80024a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d015      	beq.n	80024d8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ac:	f7fe fd18 	bl	8000ee0 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b4:	f7fe fd14 	bl	8000ee0 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e092      	b.n	80025f0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ca:	4b4b      	ldr	r3, [pc, #300]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0ee      	beq.n	80024b4 <HAL_RCC_OscConfig+0x364>
 80024d6:	e014      	b.n	8002502 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d8:	f7fe fd02 	bl	8000ee0 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e0:	f7fe fcfe 	bl	8000ee0 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e07c      	b.n	80025f0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f6:	4b40      	ldr	r3, [pc, #256]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 80024f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1ee      	bne.n	80024e0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002502:	7dfb      	ldrb	r3, [r7, #23]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d105      	bne.n	8002514 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002508:	4b3b      	ldr	r3, [pc, #236]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	4a3a      	ldr	r2, [pc, #232]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 800250e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002512:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d068      	beq.n	80025ee <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800251c:	4b36      	ldr	r3, [pc, #216]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 030c 	and.w	r3, r3, #12
 8002524:	2b08      	cmp	r3, #8
 8002526:	d060      	beq.n	80025ea <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d145      	bne.n	80025bc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002530:	4b33      	ldr	r3, [pc, #204]	; (8002600 <HAL_RCC_OscConfig+0x4b0>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002536:	f7fe fcd3 	bl	8000ee0 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253e:	f7fe fccf 	bl	8000ee0 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e04f      	b.n	80025f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002550:	4b29      	ldr	r3, [pc, #164]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f0      	bne.n	800253e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69da      	ldr	r2, [r3, #28]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	019b      	lsls	r3, r3, #6
 800256c:	431a      	orrs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002572:	085b      	lsrs	r3, r3, #1
 8002574:	3b01      	subs	r3, #1
 8002576:	041b      	lsls	r3, r3, #16
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	061b      	lsls	r3, r3, #24
 8002580:	431a      	orrs	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	071b      	lsls	r3, r3, #28
 8002588:	491b      	ldr	r1, [pc, #108]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800258e:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <HAL_RCC_OscConfig+0x4b0>)
 8002590:	2201      	movs	r2, #1
 8002592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7fe fca4 	bl	8000ee0 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259c:	f7fe fca0 	bl	8000ee0 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e020      	b.n	80025f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x44c>
 80025ba:	e018      	b.n	80025ee <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025bc:	4b10      	ldr	r3, [pc, #64]	; (8002600 <HAL_RCC_OscConfig+0x4b0>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c2:	f7fe fc8d 	bl	8000ee0 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ca:	f7fe fc89 	bl	8000ee0 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e009      	b.n	80025f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_RCC_OscConfig+0x4a8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f0      	bne.n	80025ca <HAL_RCC_OscConfig+0x47a>
 80025e8:	e001      	b.n	80025ee <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40007000 	.word	0x40007000
 8002600:	42470060 	.word	0x42470060

08002604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e01d      	b.n	8002652 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f005 ffdc 	bl	80085e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3304      	adds	r3, #4
 8002640:	4619      	mov	r1, r3
 8002642:	4610      	mov	r0, r2
 8002644:	f000 fc0e 	bl	8002e64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800265a:	b480      	push	{r7}
 800265c:	b085      	sub	sp, #20
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0201 	orr.w	r2, r2, #1
 8002670:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b06      	cmp	r3, #6
 8002682:	d007      	beq.n	8002694 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e01d      	b.n	80026f0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d106      	bne.n	80026ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f005 fee1 	bl	8008490 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2202      	movs	r2, #2
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3304      	adds	r3, #4
 80026de:	4619      	mov	r1, r3
 80026e0:	4610      	mov	r0, r2
 80026e2:	f000 fbbf 	bl	8002e64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2201      	movs	r2, #1
 8002708:	6839      	ldr	r1, [r7, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f000 fe94 	bl	8003438 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a15      	ldr	r2, [pc, #84]	; (800276c <HAL_TIM_PWM_Start+0x74>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d004      	beq.n	8002724 <HAL_TIM_PWM_Start+0x2c>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a14      	ldr	r2, [pc, #80]	; (8002770 <HAL_TIM_PWM_Start+0x78>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d101      	bne.n	8002728 <HAL_TIM_PWM_Start+0x30>
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <HAL_TIM_PWM_Start+0x32>
 8002728:	2300      	movs	r3, #0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d007      	beq.n	800273e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800273c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b06      	cmp	r3, #6
 800274e:	d007      	beq.n	8002760 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0201 	orr.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40010000 	.word	0x40010000
 8002770:	40010400 	.word	0x40010400

08002774 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e083      	b.n	8002890 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d106      	bne.n	80027a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f005 fe99 	bl	80084d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2202      	movs	r2, #2
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027b8:	f023 0307 	bic.w	r3, r3, #7
 80027bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3304      	adds	r3, #4
 80027c6:	4619      	mov	r1, r3
 80027c8:	4610      	mov	r0, r2
 80027ca:	f000 fb4b 	bl	8002e64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f6:	f023 0303 	bic.w	r3, r3, #3
 80027fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	4313      	orrs	r3, r2
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002814:	f023 030c 	bic.w	r3, r3, #12
 8002818:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002820:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002824:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	021b      	lsls	r3, r3, #8
 8002830:	4313      	orrs	r3, r2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	011a      	lsls	r2, r3, #4
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	031b      	lsls	r3, r3, #12
 8002844:	4313      	orrs	r3, r2
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002852:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800285a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	4313      	orrs	r3, r2
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4313      	orrs	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <HAL_TIM_Encoder_Start+0x16>
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d008      	beq.n	80028be <HAL_TIM_Encoder_Start+0x26>
 80028ac:	e00f      	b.n	80028ce <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2201      	movs	r2, #1
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fdbe 	bl	8003438 <TIM_CCxChannelCmd>
      break;
 80028bc:	e016      	b.n	80028ec <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2201      	movs	r2, #1
 80028c4:	2104      	movs	r1, #4
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 fdb6 	bl	8003438 <TIM_CCxChannelCmd>
      break;
 80028cc:	e00e      	b.n	80028ec <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2201      	movs	r2, #1
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fdae 	bl	8003438 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2201      	movs	r2, #1
 80028e2:	2104      	movs	r1, #4
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fda7 	bl	8003438 <TIM_CCxChannelCmd>
      break;
 80028ea:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b02      	cmp	r3, #2
 800291a:	d122      	bne.n	8002962 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b02      	cmp	r3, #2
 8002928:	d11b      	bne.n	8002962 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f06f 0202 	mvn.w	r2, #2
 8002932:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 fa6c 	bl	8002e26 <HAL_TIM_IC_CaptureCallback>
 800294e:	e005      	b.n	800295c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 fa5e 	bl	8002e12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fa6f 	bl	8002e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b04      	cmp	r3, #4
 800296e:	d122      	bne.n	80029b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b04      	cmp	r3, #4
 800297c:	d11b      	bne.n	80029b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f06f 0204 	mvn.w	r2, #4
 8002986:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fa42 	bl	8002e26 <HAL_TIM_IC_CaptureCallback>
 80029a2:	e005      	b.n	80029b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fa34 	bl	8002e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 fa45 	bl	8002e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d122      	bne.n	8002a0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d11b      	bne.n	8002a0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f06f 0208 	mvn.w	r2, #8
 80029da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2204      	movs	r2, #4
 80029e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 fa18 	bl	8002e26 <HAL_TIM_IC_CaptureCallback>
 80029f6:	e005      	b.n	8002a04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fa0a 	bl	8002e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fa1b 	bl	8002e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	2b10      	cmp	r3, #16
 8002a16:	d122      	bne.n	8002a5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	d11b      	bne.n	8002a5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f06f 0210 	mvn.w	r2, #16
 8002a2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2208      	movs	r2, #8
 8002a34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f9ee 	bl	8002e26 <HAL_TIM_IC_CaptureCallback>
 8002a4a:	e005      	b.n	8002a58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f9e0 	bl	8002e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f9f1 	bl	8002e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d10e      	bne.n	8002a8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d107      	bne.n	8002a8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f06f 0201 	mvn.w	r2, #1
 8002a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f001 fdd9 	bl	800463c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a94:	2b80      	cmp	r3, #128	; 0x80
 8002a96:	d10e      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa2:	2b80      	cmp	r3, #128	; 0x80
 8002aa4:	d107      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 fdbf 	bl	8003634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac0:	2b40      	cmp	r3, #64	; 0x40
 8002ac2:	d10e      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ace:	2b40      	cmp	r3, #64	; 0x40
 8002ad0:	d107      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f9b6 	bl	8002e4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b20      	cmp	r3, #32
 8002aee:	d10e      	bne.n	8002b0e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	d107      	bne.n	8002b0e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f06f 0220 	mvn.w	r2, #32
 8002b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 fd89 	bl	8003620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e0b4      	b.n	8002c9c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b0c      	cmp	r3, #12
 8002b46:	f200 809f 	bhi.w	8002c88 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002b4a:	a201      	add	r2, pc, #4	; (adr r2, 8002b50 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b50:	08002b85 	.word	0x08002b85
 8002b54:	08002c89 	.word	0x08002c89
 8002b58:	08002c89 	.word	0x08002c89
 8002b5c:	08002c89 	.word	0x08002c89
 8002b60:	08002bc5 	.word	0x08002bc5
 8002b64:	08002c89 	.word	0x08002c89
 8002b68:	08002c89 	.word	0x08002c89
 8002b6c:	08002c89 	.word	0x08002c89
 8002b70:	08002c07 	.word	0x08002c07
 8002b74:	08002c89 	.word	0x08002c89
 8002b78:	08002c89 	.word	0x08002c89
 8002b7c:	08002c89 	.word	0x08002c89
 8002b80:	08002c47 	.word	0x08002c47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fa0a 	bl	8002fa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0208 	orr.w	r2, r2, #8
 8002b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699a      	ldr	r2, [r3, #24]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0204 	bic.w	r2, r2, #4
 8002bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6999      	ldr	r1, [r3, #24]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	619a      	str	r2, [r3, #24]
      break;
 8002bc2:	e062      	b.n	8002c8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68b9      	ldr	r1, [r7, #8]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 fa5a 	bl	8003084 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6999      	ldr	r1, [r3, #24]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	021a      	lsls	r2, r3, #8
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	619a      	str	r2, [r3, #24]
      break;
 8002c04:	e041      	b.n	8002c8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 faaf 	bl	8003170 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69da      	ldr	r2, [r3, #28]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0208 	orr.w	r2, r2, #8
 8002c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69da      	ldr	r2, [r3, #28]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0204 	bic.w	r2, r2, #4
 8002c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	69d9      	ldr	r1, [r3, #28]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	61da      	str	r2, [r3, #28]
      break;
 8002c44:	e021      	b.n	8002c8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68b9      	ldr	r1, [r7, #8]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 fb03 	bl	8003258 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69da      	ldr	r2, [r3, #28]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69da      	ldr	r2, [r3, #28]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69d9      	ldr	r1, [r3, #28]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	021a      	lsls	r2, r3, #8
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	61da      	str	r2, [r3, #28]
      break;
 8002c86:	e000      	b.n	8002c8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002c88:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_TIM_ConfigClockSource+0x18>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e0a6      	b.n	8002e0a <HAL_TIM_ConfigClockSource+0x166>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ce2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b40      	cmp	r3, #64	; 0x40
 8002cf2:	d067      	beq.n	8002dc4 <HAL_TIM_ConfigClockSource+0x120>
 8002cf4:	2b40      	cmp	r3, #64	; 0x40
 8002cf6:	d80b      	bhi.n	8002d10 <HAL_TIM_ConfigClockSource+0x6c>
 8002cf8:	2b10      	cmp	r3, #16
 8002cfa:	d073      	beq.n	8002de4 <HAL_TIM_ConfigClockSource+0x140>
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d802      	bhi.n	8002d06 <HAL_TIM_ConfigClockSource+0x62>
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d06f      	beq.n	8002de4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002d04:	e078      	b.n	8002df8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d06c      	beq.n	8002de4 <HAL_TIM_ConfigClockSource+0x140>
 8002d0a:	2b30      	cmp	r3, #48	; 0x30
 8002d0c:	d06a      	beq.n	8002de4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002d0e:	e073      	b.n	8002df8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d10:	2b70      	cmp	r3, #112	; 0x70
 8002d12:	d00d      	beq.n	8002d30 <HAL_TIM_ConfigClockSource+0x8c>
 8002d14:	2b70      	cmp	r3, #112	; 0x70
 8002d16:	d804      	bhi.n	8002d22 <HAL_TIM_ConfigClockSource+0x7e>
 8002d18:	2b50      	cmp	r3, #80	; 0x50
 8002d1a:	d033      	beq.n	8002d84 <HAL_TIM_ConfigClockSource+0xe0>
 8002d1c:	2b60      	cmp	r3, #96	; 0x60
 8002d1e:	d041      	beq.n	8002da4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002d20:	e06a      	b.n	8002df8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d26:	d066      	beq.n	8002df6 <HAL_TIM_ConfigClockSource+0x152>
 8002d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d2c:	d017      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002d2e:	e063      	b.n	8002df8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	6899      	ldr	r1, [r3, #8]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f000 fb5a 	bl	80033f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d52:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	609a      	str	r2, [r3, #8]
      break;
 8002d5c:	e04c      	b.n	8002df8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6899      	ldr	r1, [r3, #8]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f000 fb43 	bl	80033f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d80:	609a      	str	r2, [r3, #8]
      break;
 8002d82:	e039      	b.n	8002df8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	6859      	ldr	r1, [r3, #4]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	461a      	mov	r2, r3
 8002d92:	f000 fab7 	bl	8003304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2150      	movs	r1, #80	; 0x50
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fb10 	bl	80033c2 <TIM_ITRx_SetConfig>
      break;
 8002da2:	e029      	b.n	8002df8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	6859      	ldr	r1, [r3, #4]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	461a      	mov	r2, r3
 8002db2:	f000 fad6 	bl	8003362 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2160      	movs	r1, #96	; 0x60
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fb00 	bl	80033c2 <TIM_ITRx_SetConfig>
      break;
 8002dc2:	e019      	b.n	8002df8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f000 fa97 	bl	8003304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2140      	movs	r1, #64	; 0x40
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 faf0 	bl	80033c2 <TIM_ITRx_SetConfig>
      break;
 8002de2:	e009      	b.n	8002df8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4619      	mov	r1, r3
 8002dee:	4610      	mov	r0, r2
 8002df0:	f000 fae7 	bl	80033c2 <TIM_ITRx_SetConfig>
      break;
 8002df4:	e000      	b.n	8002df8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002df6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a40      	ldr	r2, [pc, #256]	; (8002f78 <TIM_Base_SetConfig+0x114>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d013      	beq.n	8002ea4 <TIM_Base_SetConfig+0x40>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e82:	d00f      	beq.n	8002ea4 <TIM_Base_SetConfig+0x40>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a3d      	ldr	r2, [pc, #244]	; (8002f7c <TIM_Base_SetConfig+0x118>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d00b      	beq.n	8002ea4 <TIM_Base_SetConfig+0x40>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a3c      	ldr	r2, [pc, #240]	; (8002f80 <TIM_Base_SetConfig+0x11c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d007      	beq.n	8002ea4 <TIM_Base_SetConfig+0x40>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a3b      	ldr	r2, [pc, #236]	; (8002f84 <TIM_Base_SetConfig+0x120>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d003      	beq.n	8002ea4 <TIM_Base_SetConfig+0x40>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a3a      	ldr	r2, [pc, #232]	; (8002f88 <TIM_Base_SetConfig+0x124>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d108      	bne.n	8002eb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a2f      	ldr	r2, [pc, #188]	; (8002f78 <TIM_Base_SetConfig+0x114>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d02b      	beq.n	8002f16 <TIM_Base_SetConfig+0xb2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec4:	d027      	beq.n	8002f16 <TIM_Base_SetConfig+0xb2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a2c      	ldr	r2, [pc, #176]	; (8002f7c <TIM_Base_SetConfig+0x118>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d023      	beq.n	8002f16 <TIM_Base_SetConfig+0xb2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a2b      	ldr	r2, [pc, #172]	; (8002f80 <TIM_Base_SetConfig+0x11c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d01f      	beq.n	8002f16 <TIM_Base_SetConfig+0xb2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a2a      	ldr	r2, [pc, #168]	; (8002f84 <TIM_Base_SetConfig+0x120>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d01b      	beq.n	8002f16 <TIM_Base_SetConfig+0xb2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a29      	ldr	r2, [pc, #164]	; (8002f88 <TIM_Base_SetConfig+0x124>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d017      	beq.n	8002f16 <TIM_Base_SetConfig+0xb2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a28      	ldr	r2, [pc, #160]	; (8002f8c <TIM_Base_SetConfig+0x128>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d013      	beq.n	8002f16 <TIM_Base_SetConfig+0xb2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a27      	ldr	r2, [pc, #156]	; (8002f90 <TIM_Base_SetConfig+0x12c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00f      	beq.n	8002f16 <TIM_Base_SetConfig+0xb2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a26      	ldr	r2, [pc, #152]	; (8002f94 <TIM_Base_SetConfig+0x130>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00b      	beq.n	8002f16 <TIM_Base_SetConfig+0xb2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a25      	ldr	r2, [pc, #148]	; (8002f98 <TIM_Base_SetConfig+0x134>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d007      	beq.n	8002f16 <TIM_Base_SetConfig+0xb2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a24      	ldr	r2, [pc, #144]	; (8002f9c <TIM_Base_SetConfig+0x138>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d003      	beq.n	8002f16 <TIM_Base_SetConfig+0xb2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a23      	ldr	r2, [pc, #140]	; (8002fa0 <TIM_Base_SetConfig+0x13c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d108      	bne.n	8002f28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a0a      	ldr	r2, [pc, #40]	; (8002f78 <TIM_Base_SetConfig+0x114>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d003      	beq.n	8002f5c <TIM_Base_SetConfig+0xf8>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a0c      	ldr	r2, [pc, #48]	; (8002f88 <TIM_Base_SetConfig+0x124>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d103      	bne.n	8002f64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	615a      	str	r2, [r3, #20]
}
 8002f6a:	bf00      	nop
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40010000 	.word	0x40010000
 8002f7c:	40000400 	.word	0x40000400
 8002f80:	40000800 	.word	0x40000800
 8002f84:	40000c00 	.word	0x40000c00
 8002f88:	40010400 	.word	0x40010400
 8002f8c:	40014000 	.word	0x40014000
 8002f90:	40014400 	.word	0x40014400
 8002f94:	40014800 	.word	0x40014800
 8002f98:	40001800 	.word	0x40001800
 8002f9c:	40001c00 	.word	0x40001c00
 8002fa0:	40002000 	.word	0x40002000

08002fa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	f023 0201 	bic.w	r2, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0303 	bic.w	r3, r3, #3
 8002fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f023 0302 	bic.w	r3, r3, #2
 8002fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a20      	ldr	r2, [pc, #128]	; (800307c <TIM_OC1_SetConfig+0xd8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d003      	beq.n	8003008 <TIM_OC1_SetConfig+0x64>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a1f      	ldr	r2, [pc, #124]	; (8003080 <TIM_OC1_SetConfig+0xdc>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d10c      	bne.n	8003022 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f023 0308 	bic.w	r3, r3, #8
 800300e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	4313      	orrs	r3, r2
 8003018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f023 0304 	bic.w	r3, r3, #4
 8003020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a15      	ldr	r2, [pc, #84]	; (800307c <TIM_OC1_SetConfig+0xd8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d003      	beq.n	8003032 <TIM_OC1_SetConfig+0x8e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a14      	ldr	r2, [pc, #80]	; (8003080 <TIM_OC1_SetConfig+0xdc>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d111      	bne.n	8003056 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4313      	orrs	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	621a      	str	r2, [r3, #32]
}
 8003070:	bf00      	nop
 8003072:	371c      	adds	r7, #28
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	40010000 	.word	0x40010000
 8003080:	40010400 	.word	0x40010400

08003084 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	f023 0210 	bic.w	r2, r3, #16
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	021b      	lsls	r3, r3, #8
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f023 0320 	bic.w	r3, r3, #32
 80030ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4313      	orrs	r3, r2
 80030da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a22      	ldr	r2, [pc, #136]	; (8003168 <TIM_OC2_SetConfig+0xe4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d003      	beq.n	80030ec <TIM_OC2_SetConfig+0x68>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a21      	ldr	r2, [pc, #132]	; (800316c <TIM_OC2_SetConfig+0xe8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d10d      	bne.n	8003108 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003106:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a17      	ldr	r2, [pc, #92]	; (8003168 <TIM_OC2_SetConfig+0xe4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d003      	beq.n	8003118 <TIM_OC2_SetConfig+0x94>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a16      	ldr	r2, [pc, #88]	; (800316c <TIM_OC2_SetConfig+0xe8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d113      	bne.n	8003140 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800311e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003126:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	621a      	str	r2, [r3, #32]
}
 800315a:	bf00      	nop
 800315c:	371c      	adds	r7, #28
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40010000 	.word	0x40010000
 800316c:	40010400 	.word	0x40010400

08003170 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0303 	bic.w	r3, r3, #3
 80031a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a21      	ldr	r2, [pc, #132]	; (8003250 <TIM_OC3_SetConfig+0xe0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d003      	beq.n	80031d6 <TIM_OC3_SetConfig+0x66>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a20      	ldr	r2, [pc, #128]	; (8003254 <TIM_OC3_SetConfig+0xe4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d10d      	bne.n	80031f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	021b      	lsls	r3, r3, #8
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a16      	ldr	r2, [pc, #88]	; (8003250 <TIM_OC3_SetConfig+0xe0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d003      	beq.n	8003202 <TIM_OC3_SetConfig+0x92>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a15      	ldr	r2, [pc, #84]	; (8003254 <TIM_OC3_SetConfig+0xe4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d113      	bne.n	800322a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	621a      	str	r2, [r3, #32]
}
 8003244:	bf00      	nop
 8003246:	371c      	adds	r7, #28
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	40010000 	.word	0x40010000
 8003254:	40010400 	.word	0x40010400

08003258 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800328e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	021b      	lsls	r3, r3, #8
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4313      	orrs	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	031b      	lsls	r3, r3, #12
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a12      	ldr	r2, [pc, #72]	; (80032fc <TIM_OC4_SetConfig+0xa4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d003      	beq.n	80032c0 <TIM_OC4_SetConfig+0x68>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a11      	ldr	r2, [pc, #68]	; (8003300 <TIM_OC4_SetConfig+0xa8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d109      	bne.n	80032d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	019b      	lsls	r3, r3, #6
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	621a      	str	r2, [r3, #32]
}
 80032ee:	bf00      	nop
 80032f0:	371c      	adds	r7, #28
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40010000 	.word	0x40010000
 8003300:	40010400 	.word	0x40010400

08003304 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	f023 0201 	bic.w	r2, r3, #1
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800332e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f023 030a 	bic.w	r3, r3, #10
 8003340:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4313      	orrs	r3, r2
 8003348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	621a      	str	r2, [r3, #32]
}
 8003356:	bf00      	nop
 8003358:	371c      	adds	r7, #28
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003362:	b480      	push	{r7}
 8003364:	b087      	sub	sp, #28
 8003366:	af00      	add	r7, sp, #0
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	f023 0210 	bic.w	r2, r3, #16
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800338c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	031b      	lsls	r3, r3, #12
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800339e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	621a      	str	r2, [r3, #32]
}
 80033b6:	bf00      	nop
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b085      	sub	sp, #20
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4313      	orrs	r3, r2
 80033e0:	f043 0307 	orr.w	r3, r3, #7
 80033e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	609a      	str	r2, [r3, #8]
}
 80033ec:	bf00      	nop
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003412:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	021a      	lsls	r2, r3, #8
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	431a      	orrs	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	4313      	orrs	r3, r2
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	4313      	orrs	r3, r2
 8003424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	609a      	str	r2, [r3, #8]
}
 800342c:	bf00      	nop
 800342e:	371c      	adds	r7, #28
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	2201      	movs	r2, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a1a      	ldr	r2, [r3, #32]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	43db      	mvns	r3, r3
 800345a:	401a      	ands	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a1a      	ldr	r2, [r3, #32]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	fa01 f303 	lsl.w	r3, r1, r3
 8003470:	431a      	orrs	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	621a      	str	r2, [r3, #32]
}
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003498:	2302      	movs	r3, #2
 800349a:	e05a      	b.n	8003552 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a21      	ldr	r2, [pc, #132]	; (8003560 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d022      	beq.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e8:	d01d      	beq.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1d      	ldr	r2, [pc, #116]	; (8003564 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d018      	beq.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a1b      	ldr	r2, [pc, #108]	; (8003568 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d013      	beq.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a1a      	ldr	r2, [pc, #104]	; (800356c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00e      	beq.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a18      	ldr	r2, [pc, #96]	; (8003570 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d009      	beq.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a17      	ldr	r2, [pc, #92]	; (8003574 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d004      	beq.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a15      	ldr	r2, [pc, #84]	; (8003578 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d10c      	bne.n	8003540 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800352c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	4313      	orrs	r3, r2
 8003536:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40010000 	.word	0x40010000
 8003564:	40000400 	.word	0x40000400
 8003568:	40000800 	.word	0x40000800
 800356c:	40000c00 	.word	0x40000c00
 8003570:	40010400 	.word	0x40010400
 8003574:	40014000 	.word	0x40014000
 8003578:	40001800 	.word	0x40001800

0800357c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003594:	2302      	movs	r3, #2
 8003596:	e03d      	b.n	8003614 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e03f      	b.n	80036da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f005 f83a 	bl	80086e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2224      	movs	r2, #36	; 0x24
 8003678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800368a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 fc2d 	bl	8003eec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	4613      	mov	r3, r2
 80036f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d153      	bne.n	80037a6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <HAL_UART_Transmit_DMA+0x26>
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e04c      	b.n	80037a8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_UART_Transmit_DMA+0x38>
 8003718:	2302      	movs	r3, #2
 800371a:	e045      	b.n	80037a8 <HAL_UART_Transmit_DMA+0xc4>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	88fa      	ldrh	r2, [r7, #6]
 800372e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	88fa      	ldrh	r2, [r7, #6]
 8003734:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2221      	movs	r2, #33	; 0x21
 8003740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	4a19      	ldr	r2, [pc, #100]	; (80037b0 <HAL_UART_Transmit_DMA+0xcc>)
 800374a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	4a18      	ldr	r2, [pc, #96]	; (80037b4 <HAL_UART_Transmit_DMA+0xd0>)
 8003752:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	4a17      	ldr	r2, [pc, #92]	; (80037b8 <HAL_UART_Transmit_DMA+0xd4>)
 800375a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	2200      	movs	r2, #0
 8003762:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003764:	f107 0308 	add.w	r3, r7, #8
 8003768:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	6819      	ldr	r1, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	3304      	adds	r3, #4
 8003778:	461a      	mov	r2, r3
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	f7fd fd9e 	bl	80012bc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003788:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695a      	ldr	r2, [r3, #20]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037a0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	e000      	b.n	80037a8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80037a6:	2302      	movs	r3, #2
  }
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	08003af9 	.word	0x08003af9
 80037b4:	08003b4b 	.word	0x08003b4b
 80037b8:	08003beb 	.word	0x08003beb

080037bc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	4613      	mov	r3, r2
 80037c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	d166      	bne.n	80038a4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <HAL_UART_Receive_DMA+0x26>
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e05f      	b.n	80038a6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_UART_Receive_DMA+0x38>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e058      	b.n	80038a6 <HAL_UART_Receive_DMA+0xea>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	88fa      	ldrh	r2, [r7, #6]
 8003806:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2222      	movs	r2, #34	; 0x22
 8003812:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381a:	4a25      	ldr	r2, [pc, #148]	; (80038b0 <HAL_UART_Receive_DMA+0xf4>)
 800381c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003822:	4a24      	ldr	r2, [pc, #144]	; (80038b4 <HAL_UART_Receive_DMA+0xf8>)
 8003824:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382a:	4a23      	ldr	r2, [pc, #140]	; (80038b8 <HAL_UART_Receive_DMA+0xfc>)
 800382c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003832:	2200      	movs	r2, #0
 8003834:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003836:	f107 0308 	add.w	r3, r7, #8
 800383a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3304      	adds	r3, #4
 8003846:	4619      	mov	r1, r3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	f7fd fd35 	bl	80012bc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003852:	2300      	movs	r3, #0
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800387e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695a      	ldr	r2, [r3, #20]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800389e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	e000      	b.n	80038a6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80038a4:	2302      	movs	r3, #2
  }
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	08003b67 	.word	0x08003b67
 80038b4:	08003bcf 	.word	0x08003bcf
 80038b8:	08003beb 	.word	0x08003beb

080038bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80038dc:	2300      	movs	r3, #0
 80038de:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10d      	bne.n	800390e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_UART_IRQHandler+0x52>
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fa6f 	bl	8003dea <UART_Receive_IT>
      return;
 800390c:	e0d1      	b.n	8003ab2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80b0 	beq.w	8003a76 <HAL_UART_IRQHandler+0x1ba>
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d105      	bne.n	800392c <HAL_UART_IRQHandler+0x70>
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 80a5 	beq.w	8003a76 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_UART_IRQHandler+0x90>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003944:	f043 0201 	orr.w	r2, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <HAL_UART_IRQHandler+0xb0>
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003964:	f043 0202 	orr.w	r2, r3, #2
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_UART_IRQHandler+0xd0>
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003984:	f043 0204 	orr.w	r2, r3, #4
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00f      	beq.n	80039b6 <HAL_UART_IRQHandler+0xfa>
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b00      	cmp	r3, #0
 800399e:	d104      	bne.n	80039aa <HAL_UART_IRQHandler+0xee>
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d005      	beq.n	80039b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	f043 0208 	orr.w	r2, r3, #8
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d078      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d007      	beq.n	80039d8 <HAL_UART_IRQHandler+0x11c>
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fa09 	bl	8003dea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e2:	2b40      	cmp	r3, #64	; 0x40
 80039e4:	bf0c      	ite	eq
 80039e6:	2301      	moveq	r3, #1
 80039e8:	2300      	movne	r3, #0
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d102      	bne.n	8003a00 <HAL_UART_IRQHandler+0x144>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d031      	beq.n	8003a64 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f952 	bl	8003caa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a10:	2b40      	cmp	r3, #64	; 0x40
 8003a12:	d123      	bne.n	8003a5c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a22:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a30:	4a21      	ldr	r2, [pc, #132]	; (8003ab8 <HAL_UART_IRQHandler+0x1fc>)
 8003a32:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fd fc97 	bl	800136c <HAL_DMA_Abort_IT>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d016      	beq.n	8003a72 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a4e:	4610      	mov	r0, r2
 8003a50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a52:	e00e      	b.n	8003a72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f845 	bl	8003ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a5a:	e00a      	b.n	8003a72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f841 	bl	8003ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a62:	e006      	b.n	8003a72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f83d 	bl	8003ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003a70:	e01e      	b.n	8003ab0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a72:	bf00      	nop
    return;
 8003a74:	e01c      	b.n	8003ab0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_UART_IRQHandler+0x1d6>
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f93f 	bl	8003d0e <UART_Transmit_IT>
    return;
 8003a90:	e00f      	b.n	8003ab2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x1f6>
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f987 	bl	8003dba <UART_EndTransmit_IT>
    return;
 8003aac:	bf00      	nop
 8003aae:	e000      	b.n	8003ab2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003ab0:	bf00      	nop
  }
}
 8003ab2:	3720      	adds	r7, #32
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	08003ce7 	.word	0x08003ce7

08003abc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d113      	bne.n	8003b3c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695a      	ldr	r2, [r3, #20]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b28:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b38:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b3a:	e002      	b.n	8003b42 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f003 fccd 	bl	80074dc <HAL_UART_TxCpltCallback>
}
 8003b42:	bf00      	nop
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b56:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f7ff ffaf 	bl	8003abc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d11e      	bne.n	8003bc0 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b96:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0201 	bic.w	r2, r2, #1
 8003ba6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695a      	ldr	r2, [r3, #20]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f003 fc9d 	bl	8007500 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bc6:	bf00      	nop
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f7ff ff77 	bl	8003ad0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c06:	2b80      	cmp	r3, #128	; 0x80
 8003c08:	bf0c      	ite	eq
 8003c0a:	2301      	moveq	r3, #1
 8003c0c:	2300      	movne	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b21      	cmp	r3, #33	; 0x21
 8003c1c:	d108      	bne.n	8003c30 <UART_DMAError+0x46>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2200      	movs	r2, #0
 8003c28:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003c2a:	68b8      	ldr	r0, [r7, #8]
 8003c2c:	f000 f827 	bl	8003c7e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	2b40      	cmp	r3, #64	; 0x40
 8003c3c:	bf0c      	ite	eq
 8003c3e:	2301      	moveq	r3, #1
 8003c40:	2300      	movne	r3, #0
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b22      	cmp	r3, #34	; 0x22
 8003c50:	d108      	bne.n	8003c64 <UART_DMAError+0x7a>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003c5e:	68b8      	ldr	r0, [r7, #8]
 8003c60:	f000 f823 	bl	8003caa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c68:	f043 0210 	orr.w	r2, r3, #16
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c70:	68b8      	ldr	r0, [r7, #8]
 8003c72:	f7ff ff37 	bl	8003ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c76:	bf00      	nop
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003c94:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cc0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0201 	bic.w	r2, r2, #1
 8003cd0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b084      	sub	sp, #16
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f7ff feef 	bl	8003ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d06:	bf00      	nop
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b085      	sub	sp, #20
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b21      	cmp	r3, #33	; 0x21
 8003d20:	d144      	bne.n	8003dac <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2a:	d11a      	bne.n	8003d62 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d40:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d105      	bne.n	8003d56 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	1c9a      	adds	r2, r3, #2
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	621a      	str	r2, [r3, #32]
 8003d54:	e00e      	b.n	8003d74 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	621a      	str	r2, [r3, #32]
 8003d60:	e008      	b.n	8003d74 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	1c59      	adds	r1, r3, #1
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6211      	str	r1, [r2, #32]
 8003d6c:	781a      	ldrb	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	4619      	mov	r1, r3
 8003d82:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10f      	bne.n	8003da8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003da6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	e000      	b.n	8003dae <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003dac:	2302      	movs	r3, #2
  }
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b082      	sub	sp, #8
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f003 fb7e 	bl	80074dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b084      	sub	sp, #16
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b22      	cmp	r3, #34	; 0x22
 8003dfc:	d171      	bne.n	8003ee2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e06:	d123      	bne.n	8003e50 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10e      	bne.n	8003e34 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	1c9a      	adds	r2, r3, #2
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	629a      	str	r2, [r3, #40]	; 0x28
 8003e32:	e029      	b.n	8003e88 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	629a      	str	r2, [r3, #40]	; 0x28
 8003e4e:	e01b      	b.n	8003e88 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10a      	bne.n	8003e6e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6858      	ldr	r0, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	1c59      	adds	r1, r3, #1
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6291      	str	r1, [r2, #40]	; 0x28
 8003e68:	b2c2      	uxtb	r2, r0
 8003e6a:	701a      	strb	r2, [r3, #0]
 8003e6c:	e00c      	b.n	8003e88 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7a:	1c58      	adds	r0, r3, #1
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	6288      	str	r0, [r1, #40]	; 0x28
 8003e80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	4619      	mov	r1, r3
 8003e96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d120      	bne.n	8003ede <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0220 	bic.w	r2, r2, #32
 8003eaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695a      	ldr	r2, [r3, #20]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0201 	bic.w	r2, r2, #1
 8003eca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f003 fb13 	bl	8007500 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e002      	b.n	8003ee4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	e000      	b.n	8003ee4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003ee2:	2302      	movs	r3, #2
  }
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef0:	b085      	sub	sp, #20
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003f2e:	f023 030c 	bic.w	r3, r3, #12
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6812      	ldr	r2, [r2, #0]
 8003f36:	68f9      	ldr	r1, [r7, #12]
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699a      	ldr	r2, [r3, #24]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f5a:	f040 818b 	bne.w	8004274 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4ac1      	ldr	r2, [pc, #772]	; (8004268 <UART_SetConfig+0x37c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d005      	beq.n	8003f74 <UART_SetConfig+0x88>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4abf      	ldr	r2, [pc, #764]	; (800426c <UART_SetConfig+0x380>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	f040 80bd 	bne.w	80040ee <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f74:	f7fd ff86 	bl	8001e84 <HAL_RCC_GetPCLK2Freq>
 8003f78:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	461d      	mov	r5, r3
 8003f7e:	f04f 0600 	mov.w	r6, #0
 8003f82:	46a8      	mov	r8, r5
 8003f84:	46b1      	mov	r9, r6
 8003f86:	eb18 0308 	adds.w	r3, r8, r8
 8003f8a:	eb49 0409 	adc.w	r4, r9, r9
 8003f8e:	4698      	mov	r8, r3
 8003f90:	46a1      	mov	r9, r4
 8003f92:	eb18 0805 	adds.w	r8, r8, r5
 8003f96:	eb49 0906 	adc.w	r9, r9, r6
 8003f9a:	f04f 0100 	mov.w	r1, #0
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fa6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003faa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003fae:	4688      	mov	r8, r1
 8003fb0:	4691      	mov	r9, r2
 8003fb2:	eb18 0005 	adds.w	r0, r8, r5
 8003fb6:	eb49 0106 	adc.w	r1, r9, r6
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	461d      	mov	r5, r3
 8003fc0:	f04f 0600 	mov.w	r6, #0
 8003fc4:	196b      	adds	r3, r5, r5
 8003fc6:	eb46 0406 	adc.w	r4, r6, r6
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4623      	mov	r3, r4
 8003fce:	f7fc fda1 	bl	8000b14 <__aeabi_uldivmod>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	4ba5      	ldr	r3, [pc, #660]	; (8004270 <UART_SetConfig+0x384>)
 8003fda:	fba3 2302 	umull	r2, r3, r3, r2
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	461d      	mov	r5, r3
 8003fe8:	f04f 0600 	mov.w	r6, #0
 8003fec:	46a9      	mov	r9, r5
 8003fee:	46b2      	mov	sl, r6
 8003ff0:	eb19 0309 	adds.w	r3, r9, r9
 8003ff4:	eb4a 040a 	adc.w	r4, sl, sl
 8003ff8:	4699      	mov	r9, r3
 8003ffa:	46a2      	mov	sl, r4
 8003ffc:	eb19 0905 	adds.w	r9, r9, r5
 8004000:	eb4a 0a06 	adc.w	sl, sl, r6
 8004004:	f04f 0100 	mov.w	r1, #0
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004010:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004014:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004018:	4689      	mov	r9, r1
 800401a:	4692      	mov	sl, r2
 800401c:	eb19 0005 	adds.w	r0, r9, r5
 8004020:	eb4a 0106 	adc.w	r1, sl, r6
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	461d      	mov	r5, r3
 800402a:	f04f 0600 	mov.w	r6, #0
 800402e:	196b      	adds	r3, r5, r5
 8004030:	eb46 0406 	adc.w	r4, r6, r6
 8004034:	461a      	mov	r2, r3
 8004036:	4623      	mov	r3, r4
 8004038:	f7fc fd6c 	bl	8000b14 <__aeabi_uldivmod>
 800403c:	4603      	mov	r3, r0
 800403e:	460c      	mov	r4, r1
 8004040:	461a      	mov	r2, r3
 8004042:	4b8b      	ldr	r3, [pc, #556]	; (8004270 <UART_SetConfig+0x384>)
 8004044:	fba3 1302 	umull	r1, r3, r3, r2
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	2164      	movs	r1, #100	; 0x64
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	3332      	adds	r3, #50	; 0x32
 8004056:	4a86      	ldr	r2, [pc, #536]	; (8004270 <UART_SetConfig+0x384>)
 8004058:	fba2 2303 	umull	r2, r3, r2, r3
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004064:	4498      	add	r8, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	461d      	mov	r5, r3
 800406a:	f04f 0600 	mov.w	r6, #0
 800406e:	46a9      	mov	r9, r5
 8004070:	46b2      	mov	sl, r6
 8004072:	eb19 0309 	adds.w	r3, r9, r9
 8004076:	eb4a 040a 	adc.w	r4, sl, sl
 800407a:	4699      	mov	r9, r3
 800407c:	46a2      	mov	sl, r4
 800407e:	eb19 0905 	adds.w	r9, r9, r5
 8004082:	eb4a 0a06 	adc.w	sl, sl, r6
 8004086:	f04f 0100 	mov.w	r1, #0
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004092:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004096:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800409a:	4689      	mov	r9, r1
 800409c:	4692      	mov	sl, r2
 800409e:	eb19 0005 	adds.w	r0, r9, r5
 80040a2:	eb4a 0106 	adc.w	r1, sl, r6
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	461d      	mov	r5, r3
 80040ac:	f04f 0600 	mov.w	r6, #0
 80040b0:	196b      	adds	r3, r5, r5
 80040b2:	eb46 0406 	adc.w	r4, r6, r6
 80040b6:	461a      	mov	r2, r3
 80040b8:	4623      	mov	r3, r4
 80040ba:	f7fc fd2b 	bl	8000b14 <__aeabi_uldivmod>
 80040be:	4603      	mov	r3, r0
 80040c0:	460c      	mov	r4, r1
 80040c2:	461a      	mov	r2, r3
 80040c4:	4b6a      	ldr	r3, [pc, #424]	; (8004270 <UART_SetConfig+0x384>)
 80040c6:	fba3 1302 	umull	r1, r3, r3, r2
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	2164      	movs	r1, #100	; 0x64
 80040ce:	fb01 f303 	mul.w	r3, r1, r3
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	3332      	adds	r3, #50	; 0x32
 80040d8:	4a65      	ldr	r2, [pc, #404]	; (8004270 <UART_SetConfig+0x384>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	f003 0207 	and.w	r2, r3, #7
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4442      	add	r2, r8
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	e26f      	b.n	80045ce <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040ee:	f7fd feb5 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 80040f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	461d      	mov	r5, r3
 80040f8:	f04f 0600 	mov.w	r6, #0
 80040fc:	46a8      	mov	r8, r5
 80040fe:	46b1      	mov	r9, r6
 8004100:	eb18 0308 	adds.w	r3, r8, r8
 8004104:	eb49 0409 	adc.w	r4, r9, r9
 8004108:	4698      	mov	r8, r3
 800410a:	46a1      	mov	r9, r4
 800410c:	eb18 0805 	adds.w	r8, r8, r5
 8004110:	eb49 0906 	adc.w	r9, r9, r6
 8004114:	f04f 0100 	mov.w	r1, #0
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004120:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004124:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004128:	4688      	mov	r8, r1
 800412a:	4691      	mov	r9, r2
 800412c:	eb18 0005 	adds.w	r0, r8, r5
 8004130:	eb49 0106 	adc.w	r1, r9, r6
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	461d      	mov	r5, r3
 800413a:	f04f 0600 	mov.w	r6, #0
 800413e:	196b      	adds	r3, r5, r5
 8004140:	eb46 0406 	adc.w	r4, r6, r6
 8004144:	461a      	mov	r2, r3
 8004146:	4623      	mov	r3, r4
 8004148:	f7fc fce4 	bl	8000b14 <__aeabi_uldivmod>
 800414c:	4603      	mov	r3, r0
 800414e:	460c      	mov	r4, r1
 8004150:	461a      	mov	r2, r3
 8004152:	4b47      	ldr	r3, [pc, #284]	; (8004270 <UART_SetConfig+0x384>)
 8004154:	fba3 2302 	umull	r2, r3, r3, r2
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	461d      	mov	r5, r3
 8004162:	f04f 0600 	mov.w	r6, #0
 8004166:	46a9      	mov	r9, r5
 8004168:	46b2      	mov	sl, r6
 800416a:	eb19 0309 	adds.w	r3, r9, r9
 800416e:	eb4a 040a 	adc.w	r4, sl, sl
 8004172:	4699      	mov	r9, r3
 8004174:	46a2      	mov	sl, r4
 8004176:	eb19 0905 	adds.w	r9, r9, r5
 800417a:	eb4a 0a06 	adc.w	sl, sl, r6
 800417e:	f04f 0100 	mov.w	r1, #0
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800418a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800418e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004192:	4689      	mov	r9, r1
 8004194:	4692      	mov	sl, r2
 8004196:	eb19 0005 	adds.w	r0, r9, r5
 800419a:	eb4a 0106 	adc.w	r1, sl, r6
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	461d      	mov	r5, r3
 80041a4:	f04f 0600 	mov.w	r6, #0
 80041a8:	196b      	adds	r3, r5, r5
 80041aa:	eb46 0406 	adc.w	r4, r6, r6
 80041ae:	461a      	mov	r2, r3
 80041b0:	4623      	mov	r3, r4
 80041b2:	f7fc fcaf 	bl	8000b14 <__aeabi_uldivmod>
 80041b6:	4603      	mov	r3, r0
 80041b8:	460c      	mov	r4, r1
 80041ba:	461a      	mov	r2, r3
 80041bc:	4b2c      	ldr	r3, [pc, #176]	; (8004270 <UART_SetConfig+0x384>)
 80041be:	fba3 1302 	umull	r1, r3, r3, r2
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	2164      	movs	r1, #100	; 0x64
 80041c6:	fb01 f303 	mul.w	r3, r1, r3
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	3332      	adds	r3, #50	; 0x32
 80041d0:	4a27      	ldr	r2, [pc, #156]	; (8004270 <UART_SetConfig+0x384>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041de:	4498      	add	r8, r3
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	461d      	mov	r5, r3
 80041e4:	f04f 0600 	mov.w	r6, #0
 80041e8:	46a9      	mov	r9, r5
 80041ea:	46b2      	mov	sl, r6
 80041ec:	eb19 0309 	adds.w	r3, r9, r9
 80041f0:	eb4a 040a 	adc.w	r4, sl, sl
 80041f4:	4699      	mov	r9, r3
 80041f6:	46a2      	mov	sl, r4
 80041f8:	eb19 0905 	adds.w	r9, r9, r5
 80041fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8004200:	f04f 0100 	mov.w	r1, #0
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800420c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004210:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004214:	4689      	mov	r9, r1
 8004216:	4692      	mov	sl, r2
 8004218:	eb19 0005 	adds.w	r0, r9, r5
 800421c:	eb4a 0106 	adc.w	r1, sl, r6
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	461d      	mov	r5, r3
 8004226:	f04f 0600 	mov.w	r6, #0
 800422a:	196b      	adds	r3, r5, r5
 800422c:	eb46 0406 	adc.w	r4, r6, r6
 8004230:	461a      	mov	r2, r3
 8004232:	4623      	mov	r3, r4
 8004234:	f7fc fc6e 	bl	8000b14 <__aeabi_uldivmod>
 8004238:	4603      	mov	r3, r0
 800423a:	460c      	mov	r4, r1
 800423c:	461a      	mov	r2, r3
 800423e:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <UART_SetConfig+0x384>)
 8004240:	fba3 1302 	umull	r1, r3, r3, r2
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	2164      	movs	r1, #100	; 0x64
 8004248:	fb01 f303 	mul.w	r3, r1, r3
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	3332      	adds	r3, #50	; 0x32
 8004252:	4a07      	ldr	r2, [pc, #28]	; (8004270 <UART_SetConfig+0x384>)
 8004254:	fba2 2303 	umull	r2, r3, r2, r3
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	f003 0207 	and.w	r2, r3, #7
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4442      	add	r2, r8
 8004264:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004266:	e1b2      	b.n	80045ce <UART_SetConfig+0x6e2>
 8004268:	40011000 	.word	0x40011000
 800426c:	40011400 	.word	0x40011400
 8004270:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4ad7      	ldr	r2, [pc, #860]	; (80045d8 <UART_SetConfig+0x6ec>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d005      	beq.n	800428a <UART_SetConfig+0x39e>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4ad6      	ldr	r2, [pc, #856]	; (80045dc <UART_SetConfig+0x6f0>)
 8004284:	4293      	cmp	r3, r2
 8004286:	f040 80d1 	bne.w	800442c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800428a:	f7fd fdfb 	bl	8001e84 <HAL_RCC_GetPCLK2Freq>
 800428e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	469a      	mov	sl, r3
 8004294:	f04f 0b00 	mov.w	fp, #0
 8004298:	46d0      	mov	r8, sl
 800429a:	46d9      	mov	r9, fp
 800429c:	eb18 0308 	adds.w	r3, r8, r8
 80042a0:	eb49 0409 	adc.w	r4, r9, r9
 80042a4:	4698      	mov	r8, r3
 80042a6:	46a1      	mov	r9, r4
 80042a8:	eb18 080a 	adds.w	r8, r8, sl
 80042ac:	eb49 090b 	adc.w	r9, r9, fp
 80042b0:	f04f 0100 	mov.w	r1, #0
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042c4:	4688      	mov	r8, r1
 80042c6:	4691      	mov	r9, r2
 80042c8:	eb1a 0508 	adds.w	r5, sl, r8
 80042cc:	eb4b 0609 	adc.w	r6, fp, r9
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	4619      	mov	r1, r3
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	f04f 0300 	mov.w	r3, #0
 80042de:	f04f 0400 	mov.w	r4, #0
 80042e2:	0094      	lsls	r4, r2, #2
 80042e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042e8:	008b      	lsls	r3, r1, #2
 80042ea:	461a      	mov	r2, r3
 80042ec:	4623      	mov	r3, r4
 80042ee:	4628      	mov	r0, r5
 80042f0:	4631      	mov	r1, r6
 80042f2:	f7fc fc0f 	bl	8000b14 <__aeabi_uldivmod>
 80042f6:	4603      	mov	r3, r0
 80042f8:	460c      	mov	r4, r1
 80042fa:	461a      	mov	r2, r3
 80042fc:	4bb8      	ldr	r3, [pc, #736]	; (80045e0 <UART_SetConfig+0x6f4>)
 80042fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	469b      	mov	fp, r3
 800430c:	f04f 0c00 	mov.w	ip, #0
 8004310:	46d9      	mov	r9, fp
 8004312:	46e2      	mov	sl, ip
 8004314:	eb19 0309 	adds.w	r3, r9, r9
 8004318:	eb4a 040a 	adc.w	r4, sl, sl
 800431c:	4699      	mov	r9, r3
 800431e:	46a2      	mov	sl, r4
 8004320:	eb19 090b 	adds.w	r9, r9, fp
 8004324:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004328:	f04f 0100 	mov.w	r1, #0
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004334:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004338:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800433c:	4689      	mov	r9, r1
 800433e:	4692      	mov	sl, r2
 8004340:	eb1b 0509 	adds.w	r5, fp, r9
 8004344:	eb4c 060a 	adc.w	r6, ip, sl
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	4619      	mov	r1, r3
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	f04f 0400 	mov.w	r4, #0
 800435a:	0094      	lsls	r4, r2, #2
 800435c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004360:	008b      	lsls	r3, r1, #2
 8004362:	461a      	mov	r2, r3
 8004364:	4623      	mov	r3, r4
 8004366:	4628      	mov	r0, r5
 8004368:	4631      	mov	r1, r6
 800436a:	f7fc fbd3 	bl	8000b14 <__aeabi_uldivmod>
 800436e:	4603      	mov	r3, r0
 8004370:	460c      	mov	r4, r1
 8004372:	461a      	mov	r2, r3
 8004374:	4b9a      	ldr	r3, [pc, #616]	; (80045e0 <UART_SetConfig+0x6f4>)
 8004376:	fba3 1302 	umull	r1, r3, r3, r2
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	2164      	movs	r1, #100	; 0x64
 800437e:	fb01 f303 	mul.w	r3, r1, r3
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	3332      	adds	r3, #50	; 0x32
 8004388:	4a95      	ldr	r2, [pc, #596]	; (80045e0 <UART_SetConfig+0x6f4>)
 800438a:	fba2 2303 	umull	r2, r3, r2, r3
 800438e:	095b      	lsrs	r3, r3, #5
 8004390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004394:	4498      	add	r8, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	469b      	mov	fp, r3
 800439a:	f04f 0c00 	mov.w	ip, #0
 800439e:	46d9      	mov	r9, fp
 80043a0:	46e2      	mov	sl, ip
 80043a2:	eb19 0309 	adds.w	r3, r9, r9
 80043a6:	eb4a 040a 	adc.w	r4, sl, sl
 80043aa:	4699      	mov	r9, r3
 80043ac:	46a2      	mov	sl, r4
 80043ae:	eb19 090b 	adds.w	r9, r9, fp
 80043b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80043b6:	f04f 0100 	mov.w	r1, #0
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043ca:	4689      	mov	r9, r1
 80043cc:	4692      	mov	sl, r2
 80043ce:	eb1b 0509 	adds.w	r5, fp, r9
 80043d2:	eb4c 060a 	adc.w	r6, ip, sl
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	4619      	mov	r1, r3
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	f04f 0400 	mov.w	r4, #0
 80043e8:	0094      	lsls	r4, r2, #2
 80043ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043ee:	008b      	lsls	r3, r1, #2
 80043f0:	461a      	mov	r2, r3
 80043f2:	4623      	mov	r3, r4
 80043f4:	4628      	mov	r0, r5
 80043f6:	4631      	mov	r1, r6
 80043f8:	f7fc fb8c 	bl	8000b14 <__aeabi_uldivmod>
 80043fc:	4603      	mov	r3, r0
 80043fe:	460c      	mov	r4, r1
 8004400:	461a      	mov	r2, r3
 8004402:	4b77      	ldr	r3, [pc, #476]	; (80045e0 <UART_SetConfig+0x6f4>)
 8004404:	fba3 1302 	umull	r1, r3, r3, r2
 8004408:	095b      	lsrs	r3, r3, #5
 800440a:	2164      	movs	r1, #100	; 0x64
 800440c:	fb01 f303 	mul.w	r3, r1, r3
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	3332      	adds	r3, #50	; 0x32
 8004416:	4a72      	ldr	r2, [pc, #456]	; (80045e0 <UART_SetConfig+0x6f4>)
 8004418:	fba2 2303 	umull	r2, r3, r2, r3
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	f003 020f 	and.w	r2, r3, #15
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4442      	add	r2, r8
 8004428:	609a      	str	r2, [r3, #8]
 800442a:	e0d0      	b.n	80045ce <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800442c:	f7fd fd16 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 8004430:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	469a      	mov	sl, r3
 8004436:	f04f 0b00 	mov.w	fp, #0
 800443a:	46d0      	mov	r8, sl
 800443c:	46d9      	mov	r9, fp
 800443e:	eb18 0308 	adds.w	r3, r8, r8
 8004442:	eb49 0409 	adc.w	r4, r9, r9
 8004446:	4698      	mov	r8, r3
 8004448:	46a1      	mov	r9, r4
 800444a:	eb18 080a 	adds.w	r8, r8, sl
 800444e:	eb49 090b 	adc.w	r9, r9, fp
 8004452:	f04f 0100 	mov.w	r1, #0
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800445e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004462:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004466:	4688      	mov	r8, r1
 8004468:	4691      	mov	r9, r2
 800446a:	eb1a 0508 	adds.w	r5, sl, r8
 800446e:	eb4b 0609 	adc.w	r6, fp, r9
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	4619      	mov	r1, r3
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	f04f 0400 	mov.w	r4, #0
 8004484:	0094      	lsls	r4, r2, #2
 8004486:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800448a:	008b      	lsls	r3, r1, #2
 800448c:	461a      	mov	r2, r3
 800448e:	4623      	mov	r3, r4
 8004490:	4628      	mov	r0, r5
 8004492:	4631      	mov	r1, r6
 8004494:	f7fc fb3e 	bl	8000b14 <__aeabi_uldivmod>
 8004498:	4603      	mov	r3, r0
 800449a:	460c      	mov	r4, r1
 800449c:	461a      	mov	r2, r3
 800449e:	4b50      	ldr	r3, [pc, #320]	; (80045e0 <UART_SetConfig+0x6f4>)
 80044a0:	fba3 2302 	umull	r2, r3, r3, r2
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	469b      	mov	fp, r3
 80044ae:	f04f 0c00 	mov.w	ip, #0
 80044b2:	46d9      	mov	r9, fp
 80044b4:	46e2      	mov	sl, ip
 80044b6:	eb19 0309 	adds.w	r3, r9, r9
 80044ba:	eb4a 040a 	adc.w	r4, sl, sl
 80044be:	4699      	mov	r9, r3
 80044c0:	46a2      	mov	sl, r4
 80044c2:	eb19 090b 	adds.w	r9, r9, fp
 80044c6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044ca:	f04f 0100 	mov.w	r1, #0
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044de:	4689      	mov	r9, r1
 80044e0:	4692      	mov	sl, r2
 80044e2:	eb1b 0509 	adds.w	r5, fp, r9
 80044e6:	eb4c 060a 	adc.w	r6, ip, sl
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	4619      	mov	r1, r3
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	f04f 0300 	mov.w	r3, #0
 80044f8:	f04f 0400 	mov.w	r4, #0
 80044fc:	0094      	lsls	r4, r2, #2
 80044fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004502:	008b      	lsls	r3, r1, #2
 8004504:	461a      	mov	r2, r3
 8004506:	4623      	mov	r3, r4
 8004508:	4628      	mov	r0, r5
 800450a:	4631      	mov	r1, r6
 800450c:	f7fc fb02 	bl	8000b14 <__aeabi_uldivmod>
 8004510:	4603      	mov	r3, r0
 8004512:	460c      	mov	r4, r1
 8004514:	461a      	mov	r2, r3
 8004516:	4b32      	ldr	r3, [pc, #200]	; (80045e0 <UART_SetConfig+0x6f4>)
 8004518:	fba3 1302 	umull	r1, r3, r3, r2
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	2164      	movs	r1, #100	; 0x64
 8004520:	fb01 f303 	mul.w	r3, r1, r3
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	3332      	adds	r3, #50	; 0x32
 800452a:	4a2d      	ldr	r2, [pc, #180]	; (80045e0 <UART_SetConfig+0x6f4>)
 800452c:	fba2 2303 	umull	r2, r3, r2, r3
 8004530:	095b      	lsrs	r3, r3, #5
 8004532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004536:	4498      	add	r8, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	469b      	mov	fp, r3
 800453c:	f04f 0c00 	mov.w	ip, #0
 8004540:	46d9      	mov	r9, fp
 8004542:	46e2      	mov	sl, ip
 8004544:	eb19 0309 	adds.w	r3, r9, r9
 8004548:	eb4a 040a 	adc.w	r4, sl, sl
 800454c:	4699      	mov	r9, r3
 800454e:	46a2      	mov	sl, r4
 8004550:	eb19 090b 	adds.w	r9, r9, fp
 8004554:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004558:	f04f 0100 	mov.w	r1, #0
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004564:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004568:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800456c:	4689      	mov	r9, r1
 800456e:	4692      	mov	sl, r2
 8004570:	eb1b 0509 	adds.w	r5, fp, r9
 8004574:	eb4c 060a 	adc.w	r6, ip, sl
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	4619      	mov	r1, r3
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	f04f 0300 	mov.w	r3, #0
 8004586:	f04f 0400 	mov.w	r4, #0
 800458a:	0094      	lsls	r4, r2, #2
 800458c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004590:	008b      	lsls	r3, r1, #2
 8004592:	461a      	mov	r2, r3
 8004594:	4623      	mov	r3, r4
 8004596:	4628      	mov	r0, r5
 8004598:	4631      	mov	r1, r6
 800459a:	f7fc fabb 	bl	8000b14 <__aeabi_uldivmod>
 800459e:	4603      	mov	r3, r0
 80045a0:	460c      	mov	r4, r1
 80045a2:	461a      	mov	r2, r3
 80045a4:	4b0e      	ldr	r3, [pc, #56]	; (80045e0 <UART_SetConfig+0x6f4>)
 80045a6:	fba3 1302 	umull	r1, r3, r3, r2
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	2164      	movs	r1, #100	; 0x64
 80045ae:	fb01 f303 	mul.w	r3, r1, r3
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	3332      	adds	r3, #50	; 0x32
 80045b8:	4a09      	ldr	r2, [pc, #36]	; (80045e0 <UART_SetConfig+0x6f4>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	f003 020f 	and.w	r2, r3, #15
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4442      	add	r2, r8
 80045ca:	609a      	str	r2, [r3, #8]
}
 80045cc:	e7ff      	b.n	80045ce <UART_SetConfig+0x6e2>
 80045ce:	bf00      	nop
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045d8:	40011000 	.word	0x40011000
 80045dc:	40011400 	.word	0x40011400
 80045e0:	51eb851f 	.word	0x51eb851f

080045e4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	0a5a      	lsrs	r2, r3, #9
 80045f4:	490f      	ldr	r1, [pc, #60]	; (8004634 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80045f6:	fba1 1202 	umull	r1, r2, r1, r2
 80045fa:	09d2      	lsrs	r2, r2, #7
 80045fc:	490e      	ldr	r1, [pc, #56]	; (8004638 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80045fe:	fb01 f202 	mul.w	r2, r1, r2
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	0a5b      	lsrs	r3, r3, #9
 800460c:	4a09      	ldr	r2, [pc, #36]	; (8004634 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800460e:	fba2 2303 	umull	r2, r3, r2, r3
 8004612:	09db      	lsrs	r3, r3, #7
 8004614:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	441a      	add	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	601a      	str	r2, [r3, #0]
}
 8004628:	bf00      	nop
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	00044b83 	.word	0x00044b83
 8004638:	3b9aca00 	.word	0x3b9aca00

0800463c <HAL_TIM_PeriodElapsedCallback>:

extern int pwm_cmd;
extern double cmd_vel,cmd_deg;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800463c:	b590      	push	{r4, r7, lr}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464c:	d116      	bne.n	800467c <HAL_TIM_PeriodElapsedCallback+0x40>
	                //割り込みフラグクリア，これをしないとこの関数が複数回呼び出される
	        __HAL_TIM_CLEAR_FLAG(&htim2, TIM_IT_UPDATE);
 800464e:	4b38      	ldr	r3, [pc, #224]	; (8004730 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f06f 0201 	mvn.w	r2, #1
 8004656:	611a      	str	r2, [r3, #16]
	        if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) //0 → 65535
 8004658:	4b35      	ldr	r3, [pc, #212]	; (8004730 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	2b10      	cmp	r3, #16
 8004664:	d105      	bne.n	8004672 <HAL_TIM_PeriodElapsedCallback+0x36>
	        {
	            overflowcnt2 --;
 8004666:	4b33      	ldr	r3, [pc, #204]	; (8004734 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3b01      	subs	r3, #1
 800466c:	4a31      	ldr	r2, [pc, #196]	; (8004734 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	e004      	b.n	800467c <HAL_TIM_PeriodElapsedCallback+0x40>
	        }
	        else //65535 → 0
	        {
	            overflowcnt2 ++;
 8004672:	4b30      	ldr	r3, [pc, #192]	; (8004734 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3301      	adds	r3, #1
 8004678:	4a2e      	ldr	r2, [pc, #184]	; (8004734 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800467a:	6013      	str	r3, [r2, #0]
	        }
	    }

    if(htim->Instance == TIM3){
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a2d      	ldr	r2, [pc, #180]	; (8004738 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d116      	bne.n	80046b4 <HAL_TIM_PeriodElapsedCallback+0x78>
                //割り込みフラグクリア，これをしないとこの関数が複数回呼び出される
        __HAL_TIM_CLEAR_FLAG(&htim3, TIM_IT_UPDATE);
 8004686:	4b2d      	ldr	r3, [pc, #180]	; (800473c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f06f 0201 	mvn.w	r2, #1
 800468e:	611a      	str	r2, [r3, #16]
        if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) //0 → 65535
 8004690:	4b2a      	ldr	r3, [pc, #168]	; (800473c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b10      	cmp	r3, #16
 800469c:	d105      	bne.n	80046aa <HAL_TIM_PeriodElapsedCallback+0x6e>
        {
            overflowcnt1 --;
 800469e:	4b28      	ldr	r3, [pc, #160]	; (8004740 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3b01      	subs	r3, #1
 80046a4:	4a26      	ldr	r2, [pc, #152]	; (8004740 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	e004      	b.n	80046b4 <HAL_TIM_PeriodElapsedCallback+0x78>
        }
        else //65535 → 0
        {
            overflowcnt1 ++;
 80046aa:	4b25      	ldr	r3, [pc, #148]	; (8004740 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3301      	adds	r3, #1
 80046b0:	4a23      	ldr	r2, [pc, #140]	; (8004740 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80046b2:	6013      	str	r3, [r2, #0]
        }
    }
    if(htim->Instance == TIM5){
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a22      	ldr	r2, [pc, #136]	; (8004744 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d117      	bne.n	80046ee <HAL_TIM_PeriodElapsedCallback+0xb2>


    	set_pwm1(pid1(now_deg - cmd_deg));
 80046be:	4b22      	ldr	r3, [pc, #136]	; (8004748 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80046c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046c4:	4b21      	ldr	r3, [pc, #132]	; (800474c <HAL_TIM_PeriodElapsedCallback+0x110>)
 80046c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046ca:	461a      	mov	r2, r3
 80046cc:	4623      	mov	r3, r4
 80046ce:	f7fb fda7 	bl	8000220 <__aeabi_dsub>
 80046d2:	4603      	mov	r3, r0
 80046d4:	460c      	mov	r4, r1
 80046d6:	ec44 3b17 	vmov	d7, r3, r4
 80046da:	eeb0 0a47 	vmov.f32	s0, s14
 80046de:	eef0 0a67 	vmov.f32	s1, s15
 80046e2:	f000 fcc1 	bl	8005068 <pid1>
 80046e6:	4603      	mov	r3, r0
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 fc69 	bl	8004fc0 <set_pwm1>




    }
    if(htim->Instance == TIM4){
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a17      	ldr	r2, [pc, #92]	; (8004750 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d117      	bne.n	8004728 <HAL_TIM_PeriodElapsedCallback+0xec>


        	set_pwm2(pid2(now_vel - cmd_vel));
 80046f8:	4b16      	ldr	r3, [pc, #88]	; (8004754 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80046fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046fe:	4b16      	ldr	r3, [pc, #88]	; (8004758 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004700:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004704:	461a      	mov	r2, r3
 8004706:	4623      	mov	r3, r4
 8004708:	f7fb fd8a 	bl	8000220 <__aeabi_dsub>
 800470c:	4603      	mov	r3, r0
 800470e:	460c      	mov	r4, r1
 8004710:	ec44 3b17 	vmov	d7, r3, r4
 8004714:	eeb0 0a47 	vmov.f32	s0, s14
 8004718:	eef0 0a67 	vmov.f32	s1, s15
 800471c:	f000 fd64 	bl	80051e8 <pid2>
 8004720:	4603      	mov	r3, r0
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fc76 	bl	8005014 <set_pwm2>




        }
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	bd90      	pop	{r4, r7, pc}
 8004730:	20000cc0 	.word	0x20000cc0
 8004734:	20000098 	.word	0x20000098
 8004738:	40000400 	.word	0x40000400
 800473c:	20000bb8 	.word	0x20000bb8
 8004740:	20000094 	.word	0x20000094
 8004744:	40000c00 	.word	0x40000c00
 8004748:	20000d58 	.word	0x20000d58
 800474c:	20000a28 	.word	0x20000a28
 8004750:	40000800 	.word	0x40000800
 8004754:	20000c68 	.word	0x20000c68
 8004758:	20000a20 	.word	0x20000a20
 800475c:	00000000 	.word	0x00000000

08004760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004760:	b5b0      	push	{r4, r5, r7, lr}
 8004762:	b09a      	sub	sp, #104	; 0x68
 8004764:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004766:	f7fc fb55 	bl	8000e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800476a:	f000 f915 	bl	8004998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800476e:	f000 fbab 	bl	8004ec8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004772:	f000 fb81 	bl	8004e78 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8004776:	f000 fb55 	bl	8004e24 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800477a:	f000 f981 	bl	8004a80 <MX_TIM1_Init>
  MX_TIM2_Init();
 800477e:	f000 fa0f 	bl	8004ba0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004782:	f000 fa61 	bl	8004c48 <MX_TIM3_Init>
  MX_TIM5_Init();
 8004786:	f000 fb01 	bl	8004d8c <MX_TIM5_Init>
  MX_TIM4_Init();
 800478a:	f000 fab1 	bl	8004cf0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//SR1
 800478e:	2201      	movs	r2, #1
 8004790:	2110      	movs	r1, #16
 8004792:	486d      	ldr	r0, [pc, #436]	; (8004948 <main+0x1e8>)
 8004794:	f7fd fa06 	bl	8001ba4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);//SR2
 8004798:	2201      	movs	r2, #1
 800479a:	2101      	movs	r1, #1
 800479c:	486b      	ldr	r0, [pc, #428]	; (800494c <main+0x1ec>)
 800479e:	f7fd fa01 	bl	8001ba4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);//PWML1
 80047a2:	2201      	movs	r2, #1
 80047a4:	2140      	movs	r1, #64	; 0x40
 80047a6:	486a      	ldr	r0, [pc, #424]	; (8004950 <main+0x1f0>)
 80047a8:	f7fd f9fc 	bl	8001ba4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);//PWML2
 80047ac:	2201      	movs	r2, #1
 80047ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047b2:	4865      	ldr	r0, [pc, #404]	; (8004948 <main+0x1e8>)
 80047b4:	f7fd f9f6 	bl	8001ba4 <HAL_GPIO_WritePin>

  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80047b8:	213c      	movs	r1, #60	; 0x3c
 80047ba:	4866      	ldr	r0, [pc, #408]	; (8004954 <main+0x1f4>)
 80047bc:	f7fe f86c 	bl	8002898 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80047c0:	4864      	ldr	r0, [pc, #400]	; (8004954 <main+0x1f4>)
 80047c2:	f7fd ff4a 	bl	800265a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80047c6:	213c      	movs	r1, #60	; 0x3c
 80047c8:	4863      	ldr	r0, [pc, #396]	; (8004958 <main+0x1f8>)
 80047ca:	f7fe f865 	bl	8002898 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80047ce:	4862      	ldr	r0, [pc, #392]	; (8004958 <main+0x1f8>)
 80047d0:	f7fd ff43 	bl	800265a <HAL_TIM_Base_Start_IT>
  overflowcnt1 = 0;
 80047d4:	4b61      	ldr	r3, [pc, #388]	; (800495c <main+0x1fc>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
  overflowcnt2 = 0;
 80047da:	4b61      	ldr	r3, [pc, #388]	; (8004960 <main+0x200>)
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
  setup();
 80047e0:	f002 fea0 	bl	8007524 <setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);//pwmH1
 80047e4:	4b5f      	ldr	r3, [pc, #380]	; (8004964 <main+0x204>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2200      	movs	r2, #0
 80047ea:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80047ec:	2100      	movs	r1, #0
 80047ee:	485d      	ldr	r0, [pc, #372]	; (8004964 <main+0x204>)
 80047f0:	f7fd ff82 	bl	80026f8 <HAL_TIM_PWM_Start>
  /*__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);//PWML1
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);*/
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);//pwmH2
 80047f4:	4b5b      	ldr	r3, [pc, #364]	; (8004964 <main+0x204>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2200      	movs	r2, #0
 80047fa:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80047fc:	2108      	movs	r1, #8
 80047fe:	4859      	ldr	r0, [pc, #356]	; (8004964 <main+0x204>)
 8004800:	f7fd ff7a 	bl	80026f8 <HAL_TIM_PWM_Start>
  /*__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);//pwmL2
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);*/

  HAL_TIM_Base_Start_IT(&htim5);
 8004804:	4858      	ldr	r0, [pc, #352]	; (8004968 <main+0x208>)
 8004806:	f7fd ff28 	bl	800265a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800480a:	4858      	ldr	r0, [pc, #352]	; (800496c <main+0x20c>)
 800480c:	f7fd ff25 	bl	800265a <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  enc_wheel = -((long)(overflowcnt2) * 0x10000 + (long)TIM2 -> CNT);
 8004810:	4b53      	ldr	r3, [pc, #332]	; (8004960 <main+0x200>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	041b      	lsls	r3, r3, #16
 8004816:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800481a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800481c:	4413      	add	r3, r2
 800481e:	425b      	negs	r3, r3
 8004820:	4618      	mov	r0, r3
 8004822:	f7fb fe4b 	bl	80004bc <__aeabi_i2d>
 8004826:	4603      	mov	r3, r0
 8004828:	460c      	mov	r4, r1
 800482a:	4a51      	ldr	r2, [pc, #324]	; (8004970 <main+0x210>)
 800482c:	e9c2 3400 	strd	r3, r4, [r2]
	  enc_yaw =-( (long)(overflowcnt1) * 0x10000 + (long)TIM3 -> CNT);
 8004830:	4b4a      	ldr	r3, [pc, #296]	; (800495c <main+0x1fc>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	041b      	lsls	r3, r3, #16
 8004836:	4a4f      	ldr	r2, [pc, #316]	; (8004974 <main+0x214>)
 8004838:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800483a:	4413      	add	r3, r2
 800483c:	425b      	negs	r3, r3
 800483e:	4618      	mov	r0, r3
 8004840:	f7fb fe3c 	bl	80004bc <__aeabi_i2d>
 8004844:	4603      	mov	r3, r0
 8004846:	460c      	mov	r4, r1
 8004848:	4a4b      	ldr	r2, [pc, #300]	; (8004978 <main+0x218>)
 800484a:	e9c2 3400 	strd	r3, r4, [r2]


	//速度を計算

	  now_vel = (enc_wheel - pre_enc_wheel) * wheel_r * 2 * 3.1415*4/(enc_per_rot*dt*10);//[m/s]
 800484e:	4b48      	ldr	r3, [pc, #288]	; (8004970 <main+0x210>)
 8004850:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004854:	4b49      	ldr	r3, [pc, #292]	; (800497c <main+0x21c>)
 8004856:	e9d3 3400 	ldrd	r3, r4, [r3]
 800485a:	461a      	mov	r2, r3
 800485c:	4623      	mov	r3, r4
 800485e:	f7fb fcdf 	bl	8000220 <__aeabi_dsub>
 8004862:	4603      	mov	r3, r0
 8004864:	460c      	mov	r4, r1
 8004866:	4618      	mov	r0, r3
 8004868:	4621      	mov	r1, r4
 800486a:	a331      	add	r3, pc, #196	; (adr r3, 8004930 <main+0x1d0>)
 800486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004870:	f7fb fe8e 	bl	8000590 <__aeabi_dmul>
 8004874:	4603      	mov	r3, r0
 8004876:	460c      	mov	r4, r1
 8004878:	4618      	mov	r0, r3
 800487a:	4621      	mov	r1, r4
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	f7fb fcd0 	bl	8000224 <__adddf3>
 8004884:	4603      	mov	r3, r0
 8004886:	460c      	mov	r4, r1
 8004888:	4618      	mov	r0, r3
 800488a:	4621      	mov	r1, r4
 800488c:	a32a      	add	r3, pc, #168	; (adr r3, 8004938 <main+0x1d8>)
 800488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004892:	f7fb fe7d 	bl	8000590 <__aeabi_dmul>
 8004896:	4603      	mov	r3, r0
 8004898:	460c      	mov	r4, r1
 800489a:	4618      	mov	r0, r3
 800489c:	4621      	mov	r1, r4
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	4b37      	ldr	r3, [pc, #220]	; (8004980 <main+0x220>)
 80048a4:	f7fb fe74 	bl	8000590 <__aeabi_dmul>
 80048a8:	4603      	mov	r3, r0
 80048aa:	460c      	mov	r4, r1
 80048ac:	4625      	mov	r5, r4
 80048ae:	461c      	mov	r4, r3
 80048b0:	a123      	add	r1, pc, #140	; (adr r1, 8004940 <main+0x1e0>)
 80048b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	4b32      	ldr	r3, [pc, #200]	; (8004984 <main+0x224>)
 80048bc:	f7fb fe68 	bl	8000590 <__aeabi_dmul>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4610      	mov	r0, r2
 80048c6:	4619      	mov	r1, r3
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	4b2e      	ldr	r3, [pc, #184]	; (8004988 <main+0x228>)
 80048ce:	f7fb fe5f 	bl	8000590 <__aeabi_dmul>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	4620      	mov	r0, r4
 80048d8:	4629      	mov	r1, r5
 80048da:	f7fb ff83 	bl	80007e4 <__aeabi_ddiv>
 80048de:	4603      	mov	r3, r0
 80048e0:	460c      	mov	r4, r1
 80048e2:	4a2a      	ldr	r2, [pc, #168]	; (800498c <main+0x22c>)
 80048e4:	e9c2 3400 	strd	r3, r4, [r2]
	  pre_enc_wheel = enc_wheel;
 80048e8:	4b21      	ldr	r3, [pc, #132]	; (8004970 <main+0x210>)
 80048ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048ee:	4a23      	ldr	r2, [pc, #140]	; (800497c <main+0x21c>)
 80048f0:	e9c2 3400 	strd	r3, r4, [r2]

	  now_deg = (enc_yaw * 360) / enc_per_rot; //[deg]
 80048f4:	4b20      	ldr	r3, [pc, #128]	; (8004978 <main+0x218>)
 80048f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	4b24      	ldr	r3, [pc, #144]	; (8004990 <main+0x230>)
 8004900:	f7fb fe46 	bl	8000590 <__aeabi_dmul>
 8004904:	4603      	mov	r3, r0
 8004906:	460c      	mov	r4, r1
 8004908:	4618      	mov	r0, r3
 800490a:	4621      	mov	r1, r4
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	4b1c      	ldr	r3, [pc, #112]	; (8004984 <main+0x224>)
 8004912:	f7fb ff67 	bl	80007e4 <__aeabi_ddiv>
 8004916:	4603      	mov	r3, r0
 8004918:	460c      	mov	r4, r1
 800491a:	4a1e      	ldr	r2, [pc, #120]	; (8004994 <main+0x234>)
 800491c:	e9c2 3400 	strd	r3, r4, [r2]

	          //UARTで値を送信
	      //sprintf(scnt, "%d\r\n", cnt2);
	      //HAL_UART_Transmit( &huart2, scnt, strlen(scnt) + 1, 0xFFFF);

	  loop();
 8004920:	f002 fe28 	bl	8007574 <loop>
	      	  //set_pwm2(500);
	      	  //set_pwm2(pwm_cmd);
	      	          //ループ時間調整
	      	      HAL_Delay( 1000 );*/

	  HAL_Delay(3);
 8004924:	2003      	movs	r0, #3
 8004926:	f7fc fae7 	bl	8000ef8 <HAL_Delay>
  {
 800492a:	e771      	b.n	8004810 <main+0xb0>
 800492c:	f3af 8000 	nop.w
 8004930:	9999999a 	.word	0x9999999a
 8004934:	3fa99999 	.word	0x3fa99999
 8004938:	c083126f 	.word	0xc083126f
 800493c:	400921ca 	.word	0x400921ca
 8004940:	30553261 	.word	0x30553261
 8004944:	3f33a92a 	.word	0x3f33a92a
 8004948:	40020000 	.word	0x40020000
 800494c:	40020800 	.word	0x40020800
 8004950:	40020400 	.word	0x40020400
 8004954:	20000bb8 	.word	0x20000bb8
 8004958:	20000cc0 	.word	0x20000cc0
 800495c:	20000094 	.word	0x20000094
 8004960:	20000098 	.word	0x20000098
 8004964:	20000c80 	.word	0x20000c80
 8004968:	20000b78 	.word	0x20000b78
 800496c:	20000b28 	.word	0x20000b28
 8004970:	20000b68 	.word	0x20000b68
 8004974:	40000400 	.word	0x40000400
 8004978:	20000d08 	.word	0x20000d08
 800497c:	20000d00 	.word	0x20000d00
 8004980:	40100000 	.word	0x40100000
 8004984:	40b00000 	.word	0x40b00000
 8004988:	40240000 	.word	0x40240000
 800498c:	20000c68 	.word	0x20000c68
 8004990:	40768000 	.word	0x40768000
 8004994:	20000d58 	.word	0x20000d58

08004998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b094      	sub	sp, #80	; 0x50
 800499c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800499e:	f107 031c 	add.w	r3, r7, #28
 80049a2:	2234      	movs	r2, #52	; 0x34
 80049a4:	2100      	movs	r1, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f004 f8af 	bl	8008b0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049ac:	f107 0308 	add.w	r3, r7, #8
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	605a      	str	r2, [r3, #4]
 80049b6:	609a      	str	r2, [r3, #8]
 80049b8:	60da      	str	r2, [r3, #12]
 80049ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80049bc:	2300      	movs	r3, #0
 80049be:	607b      	str	r3, [r7, #4]
 80049c0:	4b2d      	ldr	r3, [pc, #180]	; (8004a78 <SystemClock_Config+0xe0>)
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	4a2c      	ldr	r2, [pc, #176]	; (8004a78 <SystemClock_Config+0xe0>)
 80049c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ca:	6413      	str	r3, [r2, #64]	; 0x40
 80049cc:	4b2a      	ldr	r3, [pc, #168]	; (8004a78 <SystemClock_Config+0xe0>)
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d4:	607b      	str	r3, [r7, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80049d8:	2300      	movs	r3, #0
 80049da:	603b      	str	r3, [r7, #0]
 80049dc:	4b27      	ldr	r3, [pc, #156]	; (8004a7c <SystemClock_Config+0xe4>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a26      	ldr	r2, [pc, #152]	; (8004a7c <SystemClock_Config+0xe4>)
 80049e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	4b24      	ldr	r3, [pc, #144]	; (8004a7c <SystemClock_Config+0xe4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80049f0:	603b      	str	r3, [r7, #0]
 80049f2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80049f4:	2302      	movs	r3, #2
 80049f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80049f8:	2301      	movs	r3, #1
 80049fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80049fc:	2310      	movs	r3, #16
 80049fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a00:	2302      	movs	r3, #2
 8004a02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004a04:	2300      	movs	r3, #0
 8004a06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004a08:	2310      	movs	r3, #16
 8004a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8004a0c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8004a10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a12:	2302      	movs	r3, #2
 8004a14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004a16:	2302      	movs	r3, #2
 8004a18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a1e:	f107 031c 	add.w	r3, r7, #28
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fd fb94 	bl	8002150 <HAL_RCC_OscConfig>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004a2e:	f000 fc8d 	bl	800534c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004a32:	f7fd f8d1 	bl	8001bd8 <HAL_PWREx_EnableOverDrive>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8004a3c:	f000 fc86 	bl	800534c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a40:	230f      	movs	r3, #15
 8004a42:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a44:	2302      	movs	r3, #2
 8004a46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004a4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004a50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a56:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004a58:	f107 0308 	add.w	r3, r7, #8
 8004a5c:	2105      	movs	r1, #5
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fd f90a 	bl	8001c78 <HAL_RCC_ClockConfig>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8004a6a:	f000 fc6f 	bl	800534c <Error_Handler>
  }
}
 8004a6e:	bf00      	nop
 8004a70:	3750      	adds	r7, #80	; 0x50
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	40007000 	.word	0x40007000

08004a80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b092      	sub	sp, #72	; 0x48
 8004a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	605a      	str	r2, [r3, #4]
 8004a9a:	609a      	str	r2, [r3, #8]
 8004a9c:	60da      	str	r2, [r3, #12]
 8004a9e:	611a      	str	r2, [r3, #16]
 8004aa0:	615a      	str	r2, [r3, #20]
 8004aa2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004aa4:	1d3b      	adds	r3, r7, #4
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f004 f82d 	bl	8008b0a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004ab0:	4b39      	ldr	r3, [pc, #228]	; (8004b98 <MX_TIM1_Init+0x118>)
 8004ab2:	4a3a      	ldr	r2, [pc, #232]	; (8004b9c <MX_TIM1_Init+0x11c>)
 8004ab4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 90-1;
 8004ab6:	4b38      	ldr	r3, [pc, #224]	; (8004b98 <MX_TIM1_Init+0x118>)
 8004ab8:	2259      	movs	r2, #89	; 0x59
 8004aba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004abc:	4b36      	ldr	r3, [pc, #216]	; (8004b98 <MX_TIM1_Init+0x118>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8004ac2:	4b35      	ldr	r3, [pc, #212]	; (8004b98 <MX_TIM1_Init+0x118>)
 8004ac4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004ac8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004aca:	4b33      	ldr	r3, [pc, #204]	; (8004b98 <MX_TIM1_Init+0x118>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004ad0:	4b31      	ldr	r3, [pc, #196]	; (8004b98 <MX_TIM1_Init+0x118>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ad6:	4b30      	ldr	r3, [pc, #192]	; (8004b98 <MX_TIM1_Init+0x118>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004adc:	482e      	ldr	r0, [pc, #184]	; (8004b98 <MX_TIM1_Init+0x118>)
 8004ade:	f7fd fde0 	bl	80026a2 <HAL_TIM_PWM_Init>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8004ae8:	f000 fc30 	bl	800534c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004aec:	2300      	movs	r3, #0
 8004aee:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004af0:	2300      	movs	r3, #0
 8004af2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004af4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004af8:	4619      	mov	r1, r3
 8004afa:	4827      	ldr	r0, [pc, #156]	; (8004b98 <MX_TIM1_Init+0x118>)
 8004afc:	f7fe fcc2 	bl	8003484 <HAL_TIMEx_MasterConfigSynchronization>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8004b06:	f000 fc21 	bl	800534c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b0a:	2360      	movs	r3, #96	; 0x60
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b12:	2300      	movs	r3, #0
 8004b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004b16:	2300      	movs	r3, #0
 8004b18:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004b22:	2300      	movs	r3, #0
 8004b24:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	481a      	ldr	r0, [pc, #104]	; (8004b98 <MX_TIM1_Init+0x118>)
 8004b30:	f7fd fff2 	bl	8002b18 <HAL_TIM_PWM_ConfigChannel>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8004b3a:	f000 fc07 	bl	800534c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b42:	2208      	movs	r2, #8
 8004b44:	4619      	mov	r1, r3
 8004b46:	4814      	ldr	r0, [pc, #80]	; (8004b98 <MX_TIM1_Init+0x118>)
 8004b48:	f7fd ffe6 	bl	8002b18 <HAL_TIM_PWM_ConfigChannel>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8004b52:	f000 fbfb 	bl	800534c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004b66:	2300      	movs	r3, #0
 8004b68:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004b6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b6e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004b70:	2300      	movs	r3, #0
 8004b72:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004b74:	1d3b      	adds	r3, r7, #4
 8004b76:	4619      	mov	r1, r3
 8004b78:	4807      	ldr	r0, [pc, #28]	; (8004b98 <MX_TIM1_Init+0x118>)
 8004b7a:	f7fe fcff 	bl	800357c <HAL_TIMEx_ConfigBreakDeadTime>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8004b84:	f000 fbe2 	bl	800534c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004b88:	4803      	ldr	r0, [pc, #12]	; (8004b98 <MX_TIM1_Init+0x118>)
 8004b8a:	f003 fd73 	bl	8008674 <HAL_TIM_MspPostInit>

}
 8004b8e:	bf00      	nop
 8004b90:	3748      	adds	r7, #72	; 0x48
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20000c80 	.word	0x20000c80
 8004b9c:	40010000 	.word	0x40010000

08004ba0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08c      	sub	sp, #48	; 0x30
 8004ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004ba6:	f107 030c 	add.w	r3, r7, #12
 8004baa:	2224      	movs	r2, #36	; 0x24
 8004bac:	2100      	movs	r1, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f003 ffab 	bl	8008b0a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bb4:	1d3b      	adds	r3, r7, #4
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004bbc:	4b21      	ldr	r3, [pc, #132]	; (8004c44 <MX_TIM2_Init+0xa4>)
 8004bbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004bc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004bc4:	4b1f      	ldr	r3, [pc, #124]	; (8004c44 <MX_TIM2_Init+0xa4>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bca:	4b1e      	ldr	r3, [pc, #120]	; (8004c44 <MX_TIM2_Init+0xa4>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004bd0:	4b1c      	ldr	r3, [pc, #112]	; (8004c44 <MX_TIM2_Init+0xa4>)
 8004bd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bd8:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <MX_TIM2_Init+0xa4>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bde:	4b19      	ldr	r3, [pc, #100]	; (8004c44 <MX_TIM2_Init+0xa4>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004be4:	2301      	movs	r3, #1
 8004be6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004be8:	2300      	movs	r3, #0
 8004bea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004bec:	2301      	movs	r3, #1
 8004bee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004c00:	2300      	movs	r3, #0
 8004c02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004c04:	2300      	movs	r3, #0
 8004c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004c08:	f107 030c 	add.w	r3, r7, #12
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	480d      	ldr	r0, [pc, #52]	; (8004c44 <MX_TIM2_Init+0xa4>)
 8004c10:	f7fd fdb0 	bl	8002774 <HAL_TIM_Encoder_Init>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8004c1a:	f000 fb97 	bl	800534c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c22:	2300      	movs	r3, #0
 8004c24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004c26:	1d3b      	adds	r3, r7, #4
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4806      	ldr	r0, [pc, #24]	; (8004c44 <MX_TIM2_Init+0xa4>)
 8004c2c:	f7fe fc2a 	bl	8003484 <HAL_TIMEx_MasterConfigSynchronization>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8004c36:	f000 fb89 	bl	800534c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004c3a:	bf00      	nop
 8004c3c:	3730      	adds	r7, #48	; 0x30
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20000cc0 	.word	0x20000cc0

08004c48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08c      	sub	sp, #48	; 0x30
 8004c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004c4e:	f107 030c 	add.w	r3, r7, #12
 8004c52:	2224      	movs	r2, #36	; 0x24
 8004c54:	2100      	movs	r1, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	f003 ff57 	bl	8008b0a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c5c:	1d3b      	adds	r3, r7, #4
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004c64:	4b20      	ldr	r3, [pc, #128]	; (8004ce8 <MX_TIM3_Init+0xa0>)
 8004c66:	4a21      	ldr	r2, [pc, #132]	; (8004cec <MX_TIM3_Init+0xa4>)
 8004c68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004c6a:	4b1f      	ldr	r3, [pc, #124]	; (8004ce8 <MX_TIM3_Init+0xa0>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c70:	4b1d      	ldr	r3, [pc, #116]	; (8004ce8 <MX_TIM3_Init+0xa0>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004c76:	4b1c      	ldr	r3, [pc, #112]	; (8004ce8 <MX_TIM3_Init+0xa0>)
 8004c78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ce8 <MX_TIM3_Init+0xa0>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c84:	4b18      	ldr	r3, [pc, #96]	; (8004ce8 <MX_TIM3_Init+0xa0>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004c92:	2301      	movs	r3, #1
 8004c94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004c96:	2300      	movs	r3, #0
 8004c98:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004caa:	2300      	movs	r3, #0
 8004cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004cae:	f107 030c 	add.w	r3, r7, #12
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	480c      	ldr	r0, [pc, #48]	; (8004ce8 <MX_TIM3_Init+0xa0>)
 8004cb6:	f7fd fd5d 	bl	8002774 <HAL_TIM_Encoder_Init>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004cc0:	f000 fb44 	bl	800534c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004ccc:	1d3b      	adds	r3, r7, #4
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4805      	ldr	r0, [pc, #20]	; (8004ce8 <MX_TIM3_Init+0xa0>)
 8004cd2:	f7fe fbd7 	bl	8003484 <HAL_TIMEx_MasterConfigSynchronization>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004cdc:	f000 fb36 	bl	800534c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004ce0:	bf00      	nop
 8004ce2:	3730      	adds	r7, #48	; 0x30
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000bb8 	.word	0x20000bb8
 8004cec:	40000400 	.word	0x40000400

08004cf0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cf6:	f107 0308 	add.w	r3, r7, #8
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	605a      	str	r2, [r3, #4]
 8004d00:	609a      	str	r2, [r3, #8]
 8004d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d04:	463b      	mov	r3, r7
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004d0c:	4b1d      	ldr	r3, [pc, #116]	; (8004d84 <MX_TIM4_Init+0x94>)
 8004d0e:	4a1e      	ldr	r2, [pc, #120]	; (8004d88 <MX_TIM4_Init+0x98>)
 8004d10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000-1;
 8004d12:	4b1c      	ldr	r3, [pc, #112]	; (8004d84 <MX_TIM4_Init+0x94>)
 8004d14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004d18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d1a:	4b1a      	ldr	r3, [pc, #104]	; (8004d84 <MX_TIM4_Init+0x94>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 27-1;
 8004d20:	4b18      	ldr	r3, [pc, #96]	; (8004d84 <MX_TIM4_Init+0x94>)
 8004d22:	221a      	movs	r2, #26
 8004d24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d26:	4b17      	ldr	r3, [pc, #92]	; (8004d84 <MX_TIM4_Init+0x94>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d2c:	4b15      	ldr	r3, [pc, #84]	; (8004d84 <MX_TIM4_Init+0x94>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004d32:	4814      	ldr	r0, [pc, #80]	; (8004d84 <MX_TIM4_Init+0x94>)
 8004d34:	f7fd fc66 	bl	8002604 <HAL_TIM_Base_Init>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8004d3e:	f000 fb05 	bl	800534c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004d48:	f107 0308 	add.w	r3, r7, #8
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	480d      	ldr	r0, [pc, #52]	; (8004d84 <MX_TIM4_Init+0x94>)
 8004d50:	f7fd ffa8 	bl	8002ca4 <HAL_TIM_ConfigClockSource>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8004d5a:	f000 faf7 	bl	800534c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d62:	2300      	movs	r3, #0
 8004d64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004d66:	463b      	mov	r3, r7
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4806      	ldr	r0, [pc, #24]	; (8004d84 <MX_TIM4_Init+0x94>)
 8004d6c:	f7fe fb8a 	bl	8003484 <HAL_TIMEx_MasterConfigSynchronization>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8004d76:	f000 fae9 	bl	800534c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004d7a:	bf00      	nop
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20000b28 	.word	0x20000b28
 8004d88:	40000800 	.word	0x40000800

08004d8c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d92:	f107 0308 	add.w	r3, r7, #8
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	605a      	str	r2, [r3, #4]
 8004d9c:	609a      	str	r2, [r3, #8]
 8004d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004da0:	463b      	mov	r3, r7
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004da8:	4b1c      	ldr	r3, [pc, #112]	; (8004e1c <MX_TIM5_Init+0x90>)
 8004daa:	4a1d      	ldr	r2, [pc, #116]	; (8004e20 <MX_TIM5_Init+0x94>)
 8004dac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8004dae:	4b1b      	ldr	r3, [pc, #108]	; (8004e1c <MX_TIM5_Init+0x90>)
 8004db0:	2263      	movs	r2, #99	; 0x63
 8004db2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004db4:	4b19      	ldr	r3, [pc, #100]	; (8004e1c <MX_TIM5_Init+0x90>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 27-1;
 8004dba:	4b18      	ldr	r3, [pc, #96]	; (8004e1c <MX_TIM5_Init+0x90>)
 8004dbc:	221a      	movs	r2, #26
 8004dbe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dc0:	4b16      	ldr	r3, [pc, #88]	; (8004e1c <MX_TIM5_Init+0x90>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dc6:	4b15      	ldr	r3, [pc, #84]	; (8004e1c <MX_TIM5_Init+0x90>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004dcc:	4813      	ldr	r0, [pc, #76]	; (8004e1c <MX_TIM5_Init+0x90>)
 8004dce:	f7fd fc19 	bl	8002604 <HAL_TIM_Base_Init>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8004dd8:	f000 fab8 	bl	800534c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004de0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004de2:	f107 0308 	add.w	r3, r7, #8
 8004de6:	4619      	mov	r1, r3
 8004de8:	480c      	ldr	r0, [pc, #48]	; (8004e1c <MX_TIM5_Init+0x90>)
 8004dea:	f7fd ff5b 	bl	8002ca4 <HAL_TIM_ConfigClockSource>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8004df4:	f000 faaa 	bl	800534c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004e00:	463b      	mov	r3, r7
 8004e02:	4619      	mov	r1, r3
 8004e04:	4805      	ldr	r0, [pc, #20]	; (8004e1c <MX_TIM5_Init+0x90>)
 8004e06:	f7fe fb3d 	bl	8003484 <HAL_TIMEx_MasterConfigSynchronization>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8004e10:	f000 fa9c 	bl	800534c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004e14:	bf00      	nop
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	20000b78 	.word	0x20000b78
 8004e20:	40000c00 	.word	0x40000c00

08004e24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004e28:	4b11      	ldr	r3, [pc, #68]	; (8004e70 <MX_USART2_UART_Init+0x4c>)
 8004e2a:	4a12      	ldr	r2, [pc, #72]	; (8004e74 <MX_USART2_UART_Init+0x50>)
 8004e2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8004e2e:	4b10      	ldr	r3, [pc, #64]	; (8004e70 <MX_USART2_UART_Init+0x4c>)
 8004e30:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8004e34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004e36:	4b0e      	ldr	r3, [pc, #56]	; (8004e70 <MX_USART2_UART_Init+0x4c>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004e3c:	4b0c      	ldr	r3, [pc, #48]	; (8004e70 <MX_USART2_UART_Init+0x4c>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004e42:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <MX_USART2_UART_Init+0x4c>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004e48:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <MX_USART2_UART_Init+0x4c>)
 8004e4a:	220c      	movs	r2, #12
 8004e4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e4e:	4b08      	ldr	r3, [pc, #32]	; (8004e70 <MX_USART2_UART_Init+0x4c>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e54:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <MX_USART2_UART_Init+0x4c>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004e5a:	4805      	ldr	r0, [pc, #20]	; (8004e70 <MX_USART2_UART_Init+0x4c>)
 8004e5c:	f7fe fbf4 	bl	8003648 <HAL_UART_Init>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004e66:	f000 fa71 	bl	800534c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004e6a:	bf00      	nop
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000d10 	.word	0x20000d10
 8004e74:	40004400 	.word	0x40004400

08004e78 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e7e:	2300      	movs	r3, #0
 8004e80:	607b      	str	r3, [r7, #4]
 8004e82:	4b10      	ldr	r3, [pc, #64]	; (8004ec4 <MX_DMA_Init+0x4c>)
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	4a0f      	ldr	r2, [pc, #60]	; (8004ec4 <MX_DMA_Init+0x4c>)
 8004e88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <MX_DMA_Init+0x4c>)
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e96:	607b      	str	r3, [r7, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	2010      	movs	r0, #16
 8004ea0:	f7fc f927 	bl	80010f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004ea4:	2010      	movs	r0, #16
 8004ea6:	f7fc f940 	bl	800112a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2100      	movs	r1, #0
 8004eae:	2011      	movs	r0, #17
 8004eb0:	f7fc f91f 	bl	80010f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004eb4:	2011      	movs	r0, #17
 8004eb6:	f7fc f938 	bl	800112a <HAL_NVIC_EnableIRQ>

}
 8004eba:	bf00      	nop
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40023800 	.word	0x40023800

08004ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ece:	f107 030c 	add.w	r3, r7, #12
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	605a      	str	r2, [r3, #4]
 8004ed8:	609a      	str	r2, [r3, #8]
 8004eda:	60da      	str	r2, [r3, #12]
 8004edc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60bb      	str	r3, [r7, #8]
 8004ee2:	4b33      	ldr	r3, [pc, #204]	; (8004fb0 <MX_GPIO_Init+0xe8>)
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	4a32      	ldr	r2, [pc, #200]	; (8004fb0 <MX_GPIO_Init+0xe8>)
 8004ee8:	f043 0304 	orr.w	r3, r3, #4
 8004eec:	6313      	str	r3, [r2, #48]	; 0x30
 8004eee:	4b30      	ldr	r3, [pc, #192]	; (8004fb0 <MX_GPIO_Init+0xe8>)
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	60bb      	str	r3, [r7, #8]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004efa:	2300      	movs	r3, #0
 8004efc:	607b      	str	r3, [r7, #4]
 8004efe:	4b2c      	ldr	r3, [pc, #176]	; (8004fb0 <MX_GPIO_Init+0xe8>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	4a2b      	ldr	r2, [pc, #172]	; (8004fb0 <MX_GPIO_Init+0xe8>)
 8004f04:	f043 0301 	orr.w	r3, r3, #1
 8004f08:	6313      	str	r3, [r2, #48]	; 0x30
 8004f0a:	4b29      	ldr	r3, [pc, #164]	; (8004fb0 <MX_GPIO_Init+0xe8>)
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	607b      	str	r3, [r7, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f16:	2300      	movs	r3, #0
 8004f18:	603b      	str	r3, [r7, #0]
 8004f1a:	4b25      	ldr	r3, [pc, #148]	; (8004fb0 <MX_GPIO_Init+0xe8>)
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	4a24      	ldr	r2, [pc, #144]	; (8004fb0 <MX_GPIO_Init+0xe8>)
 8004f20:	f043 0302 	orr.w	r3, r3, #2
 8004f24:	6313      	str	r3, [r2, #48]	; 0x30
 8004f26:	4b22      	ldr	r3, [pc, #136]	; (8004fb0 <MX_GPIO_Init+0xe8>)
 8004f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8004f32:	2200      	movs	r2, #0
 8004f34:	2101      	movs	r1, #1
 8004f36:	481f      	ldr	r0, [pc, #124]	; (8004fb4 <MX_GPIO_Init+0xec>)
 8004f38:	f7fc fe34 	bl	8001ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f44f 710c 	mov.w	r1, #560	; 0x230
 8004f42:	481d      	ldr	r0, [pc, #116]	; (8004fb8 <MX_GPIO_Init+0xf0>)
 8004f44:	f7fc fe2e 	bl	8001ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_6, GPIO_PIN_RESET);
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2141      	movs	r1, #65	; 0x41
 8004f4c:	481b      	ldr	r0, [pc, #108]	; (8004fbc <MX_GPIO_Init+0xf4>)
 8004f4e:	f7fc fe29 	bl	8001ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004f52:	2301      	movs	r3, #1
 8004f54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f56:	2301      	movs	r3, #1
 8004f58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f62:	f107 030c 	add.w	r3, r7, #12
 8004f66:	4619      	mov	r1, r3
 8004f68:	4812      	ldr	r0, [pc, #72]	; (8004fb4 <MX_GPIO_Init+0xec>)
 8004f6a:	f7fc fc89 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
 8004f6e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8004f72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f74:	2301      	movs	r3, #1
 8004f76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f80:	f107 030c 	add.w	r3, r7, #12
 8004f84:	4619      	mov	r1, r3
 8004f86:	480c      	ldr	r0, [pc, #48]	; (8004fb8 <MX_GPIO_Init+0xf0>)
 8004f88:	f7fc fc7a 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8004f8c:	2341      	movs	r3, #65	; 0x41
 8004f8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f90:	2301      	movs	r3, #1
 8004f92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f94:	2300      	movs	r3, #0
 8004f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f9c:	f107 030c 	add.w	r3, r7, #12
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4806      	ldr	r0, [pc, #24]	; (8004fbc <MX_GPIO_Init+0xf4>)
 8004fa4:	f7fc fc6c 	bl	8001880 <HAL_GPIO_Init>

}
 8004fa8:	bf00      	nop
 8004faa:	3720      	adds	r7, #32
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	40020800 	.word	0x40020800
 8004fb8:	40020000 	.word	0x40020000
 8004fbc:	40020400 	.word	0x40020400

08004fc0 <set_pwm1>:

/* USER CODE BEGIN 4 */



void set_pwm1(int pwm){
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]


	if(pwm >= 0){
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	db0d      	blt.n	8004fea <set_pwm1+0x2a>


		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);//phase1
 8004fce:	2201      	movs	r2, #1
 8004fd0:	2120      	movs	r1, #32
 8004fd2:	480e      	ldr	r0, [pc, #56]	; (800500c <set_pwm1+0x4c>)
 8004fd4:	f7fc fde6 	bl	8001ba4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, abs(pwm));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004fde:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004fe2:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <set_pwm1+0x50>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	635a      	str	r2, [r3, #52]	; 0x34


	}


}
 8004fe8:	e00c      	b.n	8005004 <set_pwm1+0x44>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);//phase1
 8004fea:	2200      	movs	r2, #0
 8004fec:	2120      	movs	r1, #32
 8004fee:	4807      	ldr	r0, [pc, #28]	; (800500c <set_pwm1+0x4c>)
 8004ff0:	f7fc fdd8 	bl	8001ba4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, abs(pwm));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004ffa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004ffe:	4b04      	ldr	r3, [pc, #16]	; (8005010 <set_pwm1+0x50>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005004:	bf00      	nop
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40020000 	.word	0x40020000
 8005010:	20000c80 	.word	0x20000c80

08005014 <set_pwm2>:

void set_pwm2(int pwm){
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]


	if(pwm >= 0){
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	db0d      	blt.n	800503e <set_pwm2+0x2a>


		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);//phase1
 8005022:	2201      	movs	r2, #1
 8005024:	2101      	movs	r1, #1
 8005026:	480e      	ldr	r0, [pc, #56]	; (8005060 <set_pwm2+0x4c>)
 8005028:	f7fc fdbc 	bl	8001ba4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, abs(pwm));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8005032:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8005036:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <set_pwm2+0x50>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	63da      	str	r2, [r3, #60]	; 0x3c


	}


}
 800503c:	e00c      	b.n	8005058 <set_pwm2+0x44>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);//phase1
 800503e:	2200      	movs	r2, #0
 8005040:	2101      	movs	r1, #1
 8005042:	4807      	ldr	r0, [pc, #28]	; (8005060 <set_pwm2+0x4c>)
 8005044:	f7fc fdae 	bl	8001ba4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, abs(pwm));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800504e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8005052:	4b04      	ldr	r3, [pc, #16]	; (8005064 <set_pwm2+0x50>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005058:	bf00      	nop
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40020400 	.word	0x40020400
 8005064:	20000c80 	.word	0x20000c80

08005068 <pid1>:

int pid1(double error){
 8005068:	b590      	push	{r4, r7, lr}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	ed87 0b00 	vstr	d0, [r7]

	int out;


	P1 = Kp1 * error;
 8005072:	f04f 0000 	mov.w	r0, #0
 8005076:	4952      	ldr	r1, [pc, #328]	; (80051c0 <pid1+0x158>)
 8005078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800507c:	f7fb fa88 	bl	8000590 <__aeabi_dmul>
 8005080:	4603      	mov	r3, r0
 8005082:	460c      	mov	r4, r1
 8005084:	4a4f      	ldr	r2, [pc, #316]	; (80051c4 <pid1+0x15c>)
 8005086:	e9c2 3400 	strd	r3, r4, [r2]
	I1 += Ki1 * error * dt;
 800508a:	f04f 0000 	mov.w	r0, #0
 800508e:	494e      	ldr	r1, [pc, #312]	; (80051c8 <pid1+0x160>)
 8005090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005094:	f7fb fa7c 	bl	8000590 <__aeabi_dmul>
 8005098:	4603      	mov	r3, r0
 800509a:	460c      	mov	r4, r1
 800509c:	4618      	mov	r0, r3
 800509e:	4621      	mov	r1, r4
 80050a0:	a443      	add	r4, pc, #268	; (adr r4, 80051b0 <pid1+0x148>)
 80050a2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80050a6:	461a      	mov	r2, r3
 80050a8:	4623      	mov	r3, r4
 80050aa:	f7fb fa71 	bl	8000590 <__aeabi_dmul>
 80050ae:	4603      	mov	r3, r0
 80050b0:	460c      	mov	r4, r1
 80050b2:	4618      	mov	r0, r3
 80050b4:	4621      	mov	r1, r4
 80050b6:	4b45      	ldr	r3, [pc, #276]	; (80051cc <pid1+0x164>)
 80050b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050bc:	461a      	mov	r2, r3
 80050be:	4623      	mov	r3, r4
 80050c0:	f7fb f8b0 	bl	8000224 <__adddf3>
 80050c4:	4603      	mov	r3, r0
 80050c6:	460c      	mov	r4, r1
 80050c8:	4a40      	ldr	r2, [pc, #256]	; (80051cc <pid1+0x164>)
 80050ca:	e9c2 3400 	strd	r3, r4, [r2]
	D1 = Kd1 * (error - pre_error1) / dt;
 80050ce:	4b40      	ldr	r3, [pc, #256]	; (80051d0 <pid1+0x168>)
 80050d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050d4:	461a      	mov	r2, r3
 80050d6:	4623      	mov	r3, r4
 80050d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050dc:	f7fb f8a0 	bl	8000220 <__aeabi_dsub>
 80050e0:	4603      	mov	r3, r0
 80050e2:	460c      	mov	r4, r1
 80050e4:	4618      	mov	r0, r3
 80050e6:	4621      	mov	r1, r4
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	4c39      	ldr	r4, [pc, #228]	; (80051d4 <pid1+0x16c>)
 80050ee:	461a      	mov	r2, r3
 80050f0:	4623      	mov	r3, r4
 80050f2:	f7fb fa4d 	bl	8000590 <__aeabi_dmul>
 80050f6:	4603      	mov	r3, r0
 80050f8:	460c      	mov	r4, r1
 80050fa:	4618      	mov	r0, r3
 80050fc:	4621      	mov	r1, r4
 80050fe:	a42c      	add	r4, pc, #176	; (adr r4, 80051b0 <pid1+0x148>)
 8005100:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005104:	461a      	mov	r2, r3
 8005106:	4623      	mov	r3, r4
 8005108:	f7fb fb6c 	bl	80007e4 <__aeabi_ddiv>
 800510c:	4603      	mov	r3, r0
 800510e:	460c      	mov	r4, r1
 8005110:	4a31      	ldr	r2, [pc, #196]	; (80051d8 <pid1+0x170>)
 8005112:	e9c2 3400 	strd	r3, r4, [r2]

	out = P1 + I1 + D1;
 8005116:	4b2b      	ldr	r3, [pc, #172]	; (80051c4 <pid1+0x15c>)
 8005118:	e9d3 0100 	ldrd	r0, r1, [r3]
 800511c:	4b2b      	ldr	r3, [pc, #172]	; (80051cc <pid1+0x164>)
 800511e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005122:	461a      	mov	r2, r3
 8005124:	4623      	mov	r3, r4
 8005126:	f7fb f87d 	bl	8000224 <__adddf3>
 800512a:	4603      	mov	r3, r0
 800512c:	460c      	mov	r4, r1
 800512e:	4618      	mov	r0, r3
 8005130:	4621      	mov	r1, r4
 8005132:	4b29      	ldr	r3, [pc, #164]	; (80051d8 <pid1+0x170>)
 8005134:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005138:	461a      	mov	r2, r3
 800513a:	4623      	mov	r3, r4
 800513c:	f7fb f872 	bl	8000224 <__adddf3>
 8005140:	4603      	mov	r3, r0
 8005142:	460c      	mov	r4, r1
 8005144:	4618      	mov	r0, r3
 8005146:	4621      	mov	r1, r4
 8005148:	f7fb fcbc 	bl	8000ac4 <__aeabi_d2iz>
 800514c:	4603      	mov	r3, r0
 800514e:	60fb      	str	r3, [r7, #12]

	pre_error1 = error;
 8005150:	4a1f      	ldr	r2, [pc, #124]	; (80051d0 <pid1+0x168>)
 8005152:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005156:	e9c2 3400 	strd	r3, r4, [r2]

	if(out>MAX_PWM){
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005160:	dd03      	ble.n	800516a <pid1+0x102>

		out = MAX_PWM;
 8005162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	e005      	b.n	8005176 <pid1+0x10e>

	}else if(out<-MAX_PWM){
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8005170:	da01      	bge.n	8005176 <pid1+0x10e>

		out = -MAX_PWM;
 8005172:	4b1a      	ldr	r3, [pc, #104]	; (80051dc <pid1+0x174>)
 8005174:	60fb      	str	r3, [r7, #12]

	}

	if(now_deg > MAX_DEG || now_deg < -MAX_DEG)out = 0;
 8005176:	4b1a      	ldr	r3, [pc, #104]	; (80051e0 <pid1+0x178>)
 8005178:	e9d3 0100 	ldrd	r0, r1, [r3]
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	4b18      	ldr	r3, [pc, #96]	; (80051e4 <pid1+0x17c>)
 8005182:	f7fb fc95 	bl	8000ab0 <__aeabi_dcmpgt>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10a      	bne.n	80051a2 <pid1+0x13a>
 800518c:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <pid1+0x178>)
 800518e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005192:	a309      	add	r3, pc, #36	; (adr r3, 80051b8 <pid1+0x150>)
 8005194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005198:	f7fb fc6c 	bl	8000a74 <__aeabi_dcmplt>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <pid1+0x13e>
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]



	return out;
 80051a6:	68fb      	ldr	r3, [r7, #12]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd90      	pop	{r4, r7, pc}
 80051b0:	30553261 	.word	0x30553261
 80051b4:	3f33a92a 	.word	0x3f33a92a
 80051b8:	00000000 	.word	0x00000000
 80051bc:	c080e000 	.word	0xc080e000
 80051c0:	40250000 	.word	0x40250000
 80051c4:	20000b20 	.word	0x20000b20
 80051c8:	40080000 	.word	0x40080000
 80051cc:	20000bf8 	.word	0x20000bf8
 80051d0:	20000c60 	.word	0x20000c60
 80051d4:	3ff80000 	.word	0x3ff80000
 80051d8:	20000d50 	.word	0x20000d50
 80051dc:	fffffc18 	.word	0xfffffc18
 80051e0:	20000d58 	.word	0x20000d58
 80051e4:	4080e000 	.word	0x4080e000

080051e8 <pid2>:

int pid2(double error){
 80051e8:	b590      	push	{r4, r7, lr}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	ed87 0b00 	vstr	d0, [r7]

	int out;


	P2 = Kp2 * error;
 80051f2:	a154      	add	r1, pc, #336	; (adr r1, 8005344 <pid2+0x15c>)
 80051f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051fc:	f7fb f9c8 	bl	8000590 <__aeabi_dmul>
 8005200:	4603      	mov	r3, r0
 8005202:	460c      	mov	r4, r1
 8005204:	4a48      	ldr	r2, [pc, #288]	; (8005328 <pid2+0x140>)
 8005206:	e9c2 3400 	strd	r3, r4, [r2]
	I2 += Ki2 * error * dt * 10;
 800520a:	f04f 0000 	mov.w	r0, #0
 800520e:	4947      	ldr	r1, [pc, #284]	; (800532c <pid2+0x144>)
 8005210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005214:	f7fb f9bc 	bl	8000590 <__aeabi_dmul>
 8005218:	4603      	mov	r3, r0
 800521a:	460c      	mov	r4, r1
 800521c:	4618      	mov	r0, r3
 800521e:	4621      	mov	r1, r4
 8005220:	a43d      	add	r4, pc, #244	; (adr r4, 8005318 <pid2+0x130>)
 8005222:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005226:	461a      	mov	r2, r3
 8005228:	4623      	mov	r3, r4
 800522a:	f7fb f9b1 	bl	8000590 <__aeabi_dmul>
 800522e:	4603      	mov	r3, r0
 8005230:	460c      	mov	r4, r1
 8005232:	4618      	mov	r0, r3
 8005234:	4621      	mov	r1, r4
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	4b3d      	ldr	r3, [pc, #244]	; (8005330 <pid2+0x148>)
 800523c:	f7fb f9a8 	bl	8000590 <__aeabi_dmul>
 8005240:	4603      	mov	r3, r0
 8005242:	460c      	mov	r4, r1
 8005244:	4618      	mov	r0, r3
 8005246:	4621      	mov	r1, r4
 8005248:	4b3a      	ldr	r3, [pc, #232]	; (8005334 <pid2+0x14c>)
 800524a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800524e:	461a      	mov	r2, r3
 8005250:	4623      	mov	r3, r4
 8005252:	f7fa ffe7 	bl	8000224 <__adddf3>
 8005256:	4603      	mov	r3, r0
 8005258:	460c      	mov	r4, r1
 800525a:	4a36      	ldr	r2, [pc, #216]	; (8005334 <pid2+0x14c>)
 800525c:	e9c2 3400 	strd	r3, r4, [r2]
	D2 = Kd2 * (error - pre_error2) / dt;
 8005260:	4b35      	ldr	r3, [pc, #212]	; (8005338 <pid2+0x150>)
 8005262:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005266:	461a      	mov	r2, r3
 8005268:	4623      	mov	r3, r4
 800526a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800526e:	f7fa ffd7 	bl	8000220 <__aeabi_dsub>
 8005272:	4603      	mov	r3, r0
 8005274:	460c      	mov	r4, r1
 8005276:	4618      	mov	r0, r3
 8005278:	4621      	mov	r1, r4
 800527a:	a429      	add	r4, pc, #164	; (adr r4, 8005320 <pid2+0x138>)
 800527c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005280:	461a      	mov	r2, r3
 8005282:	4623      	mov	r3, r4
 8005284:	f7fb f984 	bl	8000590 <__aeabi_dmul>
 8005288:	4603      	mov	r3, r0
 800528a:	460c      	mov	r4, r1
 800528c:	4618      	mov	r0, r3
 800528e:	4621      	mov	r1, r4
 8005290:	a421      	add	r4, pc, #132	; (adr r4, 8005318 <pid2+0x130>)
 8005292:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005296:	461a      	mov	r2, r3
 8005298:	4623      	mov	r3, r4
 800529a:	f7fb faa3 	bl	80007e4 <__aeabi_ddiv>
 800529e:	4603      	mov	r3, r0
 80052a0:	460c      	mov	r4, r1
 80052a2:	4a26      	ldr	r2, [pc, #152]	; (800533c <pid2+0x154>)
 80052a4:	e9c2 3400 	strd	r3, r4, [r2]

	out = P2 + I2 + D2;
 80052a8:	4b1f      	ldr	r3, [pc, #124]	; (8005328 <pid2+0x140>)
 80052aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052ae:	4b21      	ldr	r3, [pc, #132]	; (8005334 <pid2+0x14c>)
 80052b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052b4:	461a      	mov	r2, r3
 80052b6:	4623      	mov	r3, r4
 80052b8:	f7fa ffb4 	bl	8000224 <__adddf3>
 80052bc:	4603      	mov	r3, r0
 80052be:	460c      	mov	r4, r1
 80052c0:	4618      	mov	r0, r3
 80052c2:	4621      	mov	r1, r4
 80052c4:	4b1d      	ldr	r3, [pc, #116]	; (800533c <pid2+0x154>)
 80052c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052ca:	461a      	mov	r2, r3
 80052cc:	4623      	mov	r3, r4
 80052ce:	f7fa ffa9 	bl	8000224 <__adddf3>
 80052d2:	4603      	mov	r3, r0
 80052d4:	460c      	mov	r4, r1
 80052d6:	4618      	mov	r0, r3
 80052d8:	4621      	mov	r1, r4
 80052da:	f7fb fbf3 	bl	8000ac4 <__aeabi_d2iz>
 80052de:	4603      	mov	r3, r0
 80052e0:	60fb      	str	r3, [r7, #12]

	pre_error2 = error;
 80052e2:	4a15      	ldr	r2, [pc, #84]	; (8005338 <pid2+0x150>)
 80052e4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80052e8:	e9c2 3400 	strd	r3, r4, [r2]

	if(out>MAX_PWM){
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052f2:	dd03      	ble.n	80052fc <pid2+0x114>

			out = MAX_PWM;
 80052f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	e005      	b.n	8005308 <pid2+0x120>

		}else if(out<-MAX_PWM){
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8005302:	da01      	bge.n	8005308 <pid2+0x120>

			out = -MAX_PWM;
 8005304:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <pid2+0x158>)
 8005306:	60fb      	str	r3, [r7, #12]

		}



	return out;
 8005308:	68fb      	ldr	r3, [r7, #12]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	bd90      	pop	{r4, r7, pc}
 8005312:	bf00      	nop
 8005314:	f3af 8000 	nop.w
 8005318:	30553261 	.word	0x30553261
 800531c:	3f33a92a 	.word	0x3f33a92a
 8005320:	66666666 	.word	0x66666666
 8005324:	3fe66666 	.word	0x3fe66666
 8005328:	20000b70 	.word	0x20000b70
 800532c:	40590000 	.word	0x40590000
 8005330:	40240000 	.word	0x40240000
 8005334:	20000ab0 	.word	0x20000ab0
 8005338:	20000b18 	.word	0x20000b18
 800533c:	20000c78 	.word	0x20000c78
 8005340:	fffffc18 	.word	0xfffffc18
 8005344:	00000000 	.word	0x00000000
 8005348:	4062c000 	.word	0x4062c000

0800534c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005350:	bf00      	nop
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4618      	mov	r0, r3
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	4a04      	ldr	r2, [pc, #16]	; (8005398 <_ZN3ros3MsgC1Ev+0x1c>)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	0800916c 	.word	0x0800916c

0800539c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
      data()
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff ffe8 	bl	800537c <_ZN3ros3MsgC1Ev>
 80053ac:	4a06      	ldr	r2, [pc, #24]	; (80053c8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	3304      	adds	r3, #4
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff ffcf 	bl	800535a <_ZN3ros4TimeC1Ev>
    {
    }
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	08009154 	.word	0x08009154

080053cc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6859      	ldr	r1, [r3, #4]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	683a      	ldr	r2, [r7, #0]
 80053e2:	4413      	add	r3, r2
 80053e4:	b2ca      	uxtb	r2, r1
 80053e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	0a19      	lsrs	r1, r3, #8
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3301      	adds	r3, #1
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	4413      	add	r3, r2
 80053f6:	b2ca      	uxtb	r2, r1
 80053f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	0c19      	lsrs	r1, r3, #16
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3302      	adds	r3, #2
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	4413      	add	r3, r2
 8005408:	b2ca      	uxtb	r2, r1
 800540a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	0e19      	lsrs	r1, r3, #24
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3303      	adds	r3, #3
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	4413      	add	r3, r2
 800541a:	b2ca      	uxtb	r2, r1
 800541c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3304      	adds	r3, #4
 8005422:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6899      	ldr	r1, [r3, #8]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	4413      	add	r3, r2
 800542e:	b2ca      	uxtb	r2, r1
 8005430:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	0a19      	lsrs	r1, r3, #8
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3301      	adds	r3, #1
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	4413      	add	r3, r2
 8005440:	b2ca      	uxtb	r2, r1
 8005442:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	0c19      	lsrs	r1, r3, #16
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3302      	adds	r3, #2
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	4413      	add	r3, r2
 8005452:	b2ca      	uxtb	r2, r1
 8005454:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	0e19      	lsrs	r1, r3, #24
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	3303      	adds	r3, #3
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	4413      	add	r3, r2
 8005464:	b2ca      	uxtb	r2, r1
 8005466:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	3304      	adds	r3, #4
 800546c:	60fb      	str	r3, [r7, #12]
      return offset;
 800546e:	68fb      	ldr	r3, [r7, #12]
    }
 8005470:	4618      	mov	r0, r3
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005486:	2300      	movs	r3, #0
 8005488:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	4413      	add	r3, r2
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3301      	adds	r3, #1
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	440b      	add	r3, r1
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	021b      	lsls	r3, r3, #8
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	3302      	adds	r3, #2
 80054b6:	6839      	ldr	r1, [r7, #0]
 80054b8:	440b      	add	r3, r1
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	041b      	lsls	r3, r3, #16
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3303      	adds	r3, #3
 80054cc:	6839      	ldr	r1, [r7, #0]
 80054ce:	440b      	add	r3, r1
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	061b      	lsls	r3, r3, #24
 80054d4:	431a      	orrs	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	3304      	adds	r3, #4
 80054de:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	4413      	add	r3, r2
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689a      	ldr	r2, [r3, #8]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	3301      	adds	r3, #1
 80054f6:	6839      	ldr	r1, [r7, #0]
 80054f8:	440b      	add	r3, r1
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	3302      	adds	r3, #2
 800550c:	6839      	ldr	r1, [r7, #0]
 800550e:	440b      	add	r3, r1
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	041b      	lsls	r3, r3, #16
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3303      	adds	r3, #3
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	440b      	add	r3, r1
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	061b      	lsls	r3, r3, #24
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3304      	adds	r3, #4
 8005534:	60fb      	str	r3, [r7, #12]
     return offset;
 8005536:	68fb      	ldr	r3, [r7, #12]
    }
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	4b03      	ldr	r3, [pc, #12]	; (800555c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	08008d9c 	.word	0x08008d9c

08005560 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	4b03      	ldr	r3, [pc, #12]	; (8005578 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800556a:	4618      	mov	r0, r3
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	08008dac 	.word	0x08008dac

0800557c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff fef8 	bl	800537c <_ZN3ros3MsgC1Ev>
 800558c:	4a0b      	ldr	r2, [pc, #44]	; (80055bc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	809a      	strh	r2, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a09      	ldr	r2, [pc, #36]	; (80055c0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800559c:	609a      	str	r2, [r3, #8]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a07      	ldr	r2, [pc, #28]	; (80055c0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80055a2:	60da      	str	r2, [r3, #12]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a06      	ldr	r2, [pc, #24]	; (80055c0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80055a8:	611a      	str	r2, [r3, #16]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	615a      	str	r2, [r3, #20]
    {
    }
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	0800913c 	.word	0x0800913c
 80055c0:	08008dd0 	.word	0x08008dd0

080055c4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b088      	sub	sp, #32
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80055ce:	2300      	movs	r3, #0
 80055d0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	8899      	ldrh	r1, [r3, #4]
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	4413      	add	r3, r2
 80055dc:	b2ca      	uxtb	r2, r1
 80055de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	889b      	ldrh	r3, [r3, #4]
 80055e4:	0a1b      	lsrs	r3, r3, #8
 80055e6:	b299      	uxth	r1, r3
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	3301      	adds	r3, #1
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	4413      	add	r3, r2
 80055f0:	b2ca      	uxtb	r2, r1
 80055f2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	3302      	adds	r3, #2
 80055f8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fa fe02 	bl	8000208 <strlen>
 8005604:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	4413      	add	r3, r2
 800560c:	69b9      	ldr	r1, [r7, #24]
 800560e:	4618      	mov	r0, r3
 8005610:	f002 f84c 	bl	80076ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	3304      	adds	r3, #4
 8005618:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	18d0      	adds	r0, r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	4619      	mov	r1, r3
 8005628:	f003 fa64 	bl	8008af4 <memcpy>
      offset += length_topic_name;
 800562c:	69fa      	ldr	r2, [r7, #28]
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	4413      	add	r3, r2
 8005632:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	4618      	mov	r0, r3
 800563a:	f7fa fde5 	bl	8000208 <strlen>
 800563e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	4413      	add	r3, r2
 8005646:	6979      	ldr	r1, [r7, #20]
 8005648:	4618      	mov	r0, r3
 800564a:	f002 f82f 	bl	80076ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	3304      	adds	r3, #4
 8005652:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	18d0      	adds	r0, r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4619      	mov	r1, r3
 8005662:	f003 fa47 	bl	8008af4 <memcpy>
      offset += length_message_type;
 8005666:	69fa      	ldr	r2, [r7, #28]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	4413      	add	r3, r2
 800566c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	4618      	mov	r0, r3
 8005674:	f7fa fdc8 	bl	8000208 <strlen>
 8005678:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	4413      	add	r3, r2
 8005680:	6939      	ldr	r1, [r7, #16]
 8005682:	4618      	mov	r0, r3
 8005684:	f002 f812 	bl	80076ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	3304      	adds	r3, #4
 800568c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	18d0      	adds	r0, r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4619      	mov	r1, r3
 800569c:	f003 fa2a 	bl	8008af4 <memcpy>
      offset += length_md5sum;
 80056a0:	69fa      	ldr	r2, [r7, #28]
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	4413      	add	r3, r2
 80056a6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80056ae:	68f9      	ldr	r1, [r7, #12]
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	4413      	add	r3, r2
 80056b6:	b2ca      	uxtb	r2, r1
 80056b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	0a19      	lsrs	r1, r3, #8
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	3301      	adds	r3, #1
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	4413      	add	r3, r2
 80056c6:	b2ca      	uxtb	r2, r1
 80056c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	0c19      	lsrs	r1, r3, #16
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	3302      	adds	r3, #2
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	4413      	add	r3, r2
 80056d6:	b2ca      	uxtb	r2, r1
 80056d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	0e19      	lsrs	r1, r3, #24
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	3303      	adds	r3, #3
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	4413      	add	r3, r2
 80056e6:	b2ca      	uxtb	r2, r1
 80056e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	3304      	adds	r3, #4
 80056ee:	61fb      	str	r3, [r7, #28]
      return offset;
 80056f0:	69fb      	ldr	r3, [r7, #28]
    }
 80056f2:	4618      	mov	r0, r3
 80056f4:	3720      	adds	r7, #32
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b08a      	sub	sp, #40	; 0x28
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005704:	2300      	movs	r3, #0
 8005706:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	4413      	add	r3, r2
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	b29a      	uxth	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	889b      	ldrh	r3, [r3, #4]
 800571a:	b21a      	sxth	r2, r3
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	3301      	adds	r3, #1
 8005720:	6839      	ldr	r1, [r7, #0]
 8005722:	440b      	add	r3, r1
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	021b      	lsls	r3, r3, #8
 8005728:	b21b      	sxth	r3, r3
 800572a:	4313      	orrs	r3, r2
 800572c:	b21b      	sxth	r3, r3
 800572e:	b29a      	uxth	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	3302      	adds	r3, #2
 8005738:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	441a      	add	r2, r3
 8005740:	f107 0314 	add.w	r3, r7, #20
 8005744:	4611      	mov	r1, r2
 8005746:	4618      	mov	r0, r3
 8005748:	f001 ffce 	bl	80076e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	3304      	adds	r3, #4
 8005750:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	4413      	add	r3, r2
 800575c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800575e:	429a      	cmp	r2, r3
 8005760:	d20c      	bcs.n	800577c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	441a      	add	r2, r3
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	3b01      	subs	r3, #1
 800576c:	6839      	ldr	r1, [r7, #0]
 800576e:	440b      	add	r3, r1
 8005770:	7812      	ldrb	r2, [r2, #0]
 8005772:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	3301      	adds	r3, #1
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
 800577a:	e7ec      	b.n	8005756 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	4413      	add	r3, r2
 8005782:	3b01      	subs	r3, #1
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	4413      	add	r3, r2
 8005788:	2200      	movs	r2, #0
 800578a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	3b01      	subs	r3, #1
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	441a      	add	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	4413      	add	r3, r2
 800579e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	441a      	add	r2, r3
 80057a6:	f107 0310 	add.w	r3, r7, #16
 80057aa:	4611      	mov	r1, r2
 80057ac:	4618      	mov	r0, r3
 80057ae:	f001 ff9b 	bl	80076e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	3304      	adds	r3, #4
 80057b6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	623b      	str	r3, [r7, #32]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	4413      	add	r3, r2
 80057c2:	6a3a      	ldr	r2, [r7, #32]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d20c      	bcs.n	80057e2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	441a      	add	r2, r3
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	3b01      	subs	r3, #1
 80057d2:	6839      	ldr	r1, [r7, #0]
 80057d4:	440b      	add	r3, r1
 80057d6:	7812      	ldrb	r2, [r2, #0]
 80057d8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	3301      	adds	r3, #1
 80057de:	623b      	str	r3, [r7, #32]
 80057e0:	e7ec      	b.n	80057bc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4413      	add	r3, r2
 80057e8:	3b01      	subs	r3, #1
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	4413      	add	r3, r2
 80057ee:	2200      	movs	r2, #0
 80057f0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	441a      	add	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	4413      	add	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	441a      	add	r2, r3
 800580c:	f107 030c 	add.w	r3, r7, #12
 8005810:	4611      	mov	r1, r2
 8005812:	4618      	mov	r0, r3
 8005814:	f001 ff68 	bl	80076e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	3304      	adds	r3, #4
 800581c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	69fa      	ldr	r2, [r7, #28]
 800582a:	429a      	cmp	r2, r3
 800582c:	d20c      	bcs.n	8005848 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	441a      	add	r2, r3
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	3b01      	subs	r3, #1
 8005838:	6839      	ldr	r1, [r7, #0]
 800583a:	440b      	add	r3, r1
 800583c:	7812      	ldrb	r2, [r2, #0]
 800583e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	3301      	adds	r3, #1
 8005844:	61fb      	str	r3, [r7, #28]
 8005846:	e7ec      	b.n	8005822 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4413      	add	r3, r2
 800584e:	3b01      	subs	r3, #1
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	4413      	add	r3, r2
 8005854:	2200      	movs	r2, #0
 8005856:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	3b01      	subs	r3, #1
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	441a      	add	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800586c:	2300      	movs	r3, #0
 800586e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	6839      	ldr	r1, [r7, #0]
 8005876:	440a      	add	r2, r1
 8005878:	7812      	ldrb	r2, [r2, #0]
 800587a:	4313      	orrs	r3, r2
 800587c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	3301      	adds	r3, #1
 8005884:	6839      	ldr	r1, [r7, #0]
 8005886:	440b      	add	r3, r1
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	021b      	lsls	r3, r3, #8
 800588c:	4313      	orrs	r3, r2
 800588e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	3302      	adds	r3, #2
 8005896:	6839      	ldr	r1, [r7, #0]
 8005898:	440b      	add	r3, r1
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	041b      	lsls	r3, r3, #16
 800589e:	4313      	orrs	r3, r2
 80058a0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	3303      	adds	r3, #3
 80058a8:	6839      	ldr	r1, [r7, #0]
 80058aa:	440b      	add	r3, r1
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	061b      	lsls	r3, r3, #24
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	3304      	adds	r3, #4
 80058be:	61bb      	str	r3, [r7, #24]
     return offset;
 80058c0:	69bb      	ldr	r3, [r7, #24]
    }
 80058c2:	4618      	mov	r0, r3
 80058c4:	3728      	adds	r7, #40	; 0x28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
	...

080058cc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	4b03      	ldr	r3, [pc, #12]	; (80058e4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80058d6:	4618      	mov	r0, r3
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	08008dd4 	.word	0x08008dd4

080058e8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	4b03      	ldr	r3, [pc, #12]	; (8005900 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80058f2:	4618      	mov	r0, r3
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	08008df0 	.word	0x08008df0

08005904 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff fd34 	bl	800537c <_ZN3ros3MsgC1Ev>
 8005914:	4a06      	ldr	r2, [pc, #24]	; (8005930 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	711a      	strb	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a04      	ldr	r2, [pc, #16]	; (8005934 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8005924:	609a      	str	r2, [r3, #8]
    {
    }
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4618      	mov	r0, r3
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	08009124 	.word	0x08009124
 8005934:	08008dd0 	.word	0x08008dd0

08005938 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005942:	2300      	movs	r3, #0
 8005944:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	4413      	add	r3, r2
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	7912      	ldrb	r2, [r2, #4]
 8005950:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3301      	adds	r3, #1
 8005956:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	4618      	mov	r0, r3
 800595e:	f7fa fc53 	bl	8000208 <strlen>
 8005962:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	4413      	add	r3, r2
 800596a:	68b9      	ldr	r1, [r7, #8]
 800596c:	4618      	mov	r0, r3
 800596e:	f001 fe9d 	bl	80076ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3304      	adds	r3, #4
 8005976:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	18d0      	adds	r0, r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	4619      	mov	r1, r3
 8005986:	f003 f8b5 	bl	8008af4 <memcpy>
      offset += length_msg;
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	4413      	add	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
      return offset;
 8005992:	68fb      	ldr	r3, [r7, #12]
    }
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80059a6:	2300      	movs	r3, #0
 80059a8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	4413      	add	r3, r2
 80059b0:	781a      	ldrb	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	3301      	adds	r3, #1
 80059ba:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	441a      	add	r2, r3
 80059c2:	f107 030c 	add.w	r3, r7, #12
 80059c6:	4611      	mov	r1, r2
 80059c8:	4618      	mov	r0, r3
 80059ca:	f001 fe8d 	bl	80076e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	3304      	adds	r3, #4
 80059d2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4413      	add	r3, r2
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d20c      	bcs.n	80059fe <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	441a      	add	r2, r3
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	3b01      	subs	r3, #1
 80059ee:	6839      	ldr	r1, [r7, #0]
 80059f0:	440b      	add	r3, r1
 80059f2:	7812      	ldrb	r2, [r2, #0]
 80059f4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	3301      	adds	r3, #1
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	e7ec      	b.n	80059d8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	3b01      	subs	r3, #1
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	4413      	add	r3, r2
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	441a      	add	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4413      	add	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]
     return offset;
 8005a22:	693b      	ldr	r3, [r7, #16]
    }
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	4b03      	ldr	r3, [pc, #12]	; (8005a44 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8005a36:	4618      	mov	r0, r3
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	08008e14 	.word	0x08008e14

08005a48 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	4b03      	ldr	r3, [pc, #12]	; (8005a60 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8005a52:	4618      	mov	r0, r3
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	08008e28 	.word	0x08008e28

08005a64 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff fc84 	bl	800537c <_ZN3ros3MsgC1Ev>
 8005a74:	4a0c      	ldr	r2, [pc, #48]	; (8005aa8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	605a      	str	r2, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	60da      	str	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	611a      	str	r2, [r3, #16]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	619a      	str	r2, [r3, #24]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	61da      	str	r2, [r3, #28]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	0800910c 	.word	0x0800910c

08005aac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08a      	sub	sp, #40	; 0x28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6859      	ldr	r1, [r3, #4]
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	b2ca      	uxtb	r2, r1
 8005ac6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	0a19      	lsrs	r1, r3, #8
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	b2ca      	uxtb	r2, r1
 8005ad8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	0c19      	lsrs	r1, r3, #16
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	3302      	adds	r3, #2
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	b2ca      	uxtb	r2, r1
 8005aea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	0e19      	lsrs	r1, r3, #24
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	3303      	adds	r3, #3
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	4413      	add	r3, r2
 8005afa:	b2ca      	uxtb	r2, r1
 8005afc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	3304      	adds	r3, #4
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8005b04:	2300      	movs	r3, #0
 8005b06:	623b      	str	r3, [r7, #32]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	6a3a      	ldr	r2, [r7, #32]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d22b      	bcs.n	8005b6a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8005b20:	6939      	ldr	r1, [r7, #16]
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	4413      	add	r3, r2
 8005b28:	b2ca      	uxtb	r2, r1
 8005b2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	0a19      	lsrs	r1, r3, #8
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	3301      	adds	r3, #1
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	4413      	add	r3, r2
 8005b38:	b2ca      	uxtb	r2, r1
 8005b3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	0c19      	lsrs	r1, r3, #16
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	3302      	adds	r3, #2
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	4413      	add	r3, r2
 8005b48:	b2ca      	uxtb	r2, r1
 8005b4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	0e19      	lsrs	r1, r3, #24
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	3303      	adds	r3, #3
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	4413      	add	r3, r2
 8005b58:	b2ca      	uxtb	r2, r1
 8005b5a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	3304      	adds	r3, #4
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	3301      	adds	r3, #1
 8005b66:	623b      	str	r3, [r7, #32]
 8005b68:	e7ce      	b.n	8005b08 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6919      	ldr	r1, [r3, #16]
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	4413      	add	r3, r2
 8005b74:	b2ca      	uxtb	r2, r1
 8005b76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	0a19      	lsrs	r1, r3, #8
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	3301      	adds	r3, #1
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	4413      	add	r3, r2
 8005b86:	b2ca      	uxtb	r2, r1
 8005b88:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	0c19      	lsrs	r1, r3, #16
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	3302      	adds	r3, #2
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	4413      	add	r3, r2
 8005b98:	b2ca      	uxtb	r2, r1
 8005b9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	0e19      	lsrs	r1, r3, #24
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	3303      	adds	r3, #3
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	4413      	add	r3, r2
 8005baa:	b2ca      	uxtb	r2, r1
 8005bac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d22b      	bcs.n	8005c1a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699a      	ldr	r2, [r3, #24]
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8005bd0:	68f9      	ldr	r1, [r7, #12]
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	b2ca      	uxtb	r2, r1
 8005bda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	0a19      	lsrs	r1, r3, #8
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	3301      	adds	r3, #1
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	4413      	add	r3, r2
 8005be8:	b2ca      	uxtb	r2, r1
 8005bea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	0c19      	lsrs	r1, r3, #16
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	3302      	adds	r3, #2
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	b2ca      	uxtb	r2, r1
 8005bfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	0e19      	lsrs	r1, r3, #24
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	3303      	adds	r3, #3
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	4413      	add	r3, r2
 8005c08:	b2ca      	uxtb	r2, r1
 8005c0a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	3304      	adds	r3, #4
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	3301      	adds	r3, #1
 8005c16:	61fb      	str	r3, [r7, #28]
 8005c18:	e7ce      	b.n	8005bb8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69d9      	ldr	r1, [r3, #28]
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	4413      	add	r3, r2
 8005c24:	b2ca      	uxtb	r2, r1
 8005c26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	0a19      	lsrs	r1, r3, #8
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	3301      	adds	r3, #1
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	4413      	add	r3, r2
 8005c36:	b2ca      	uxtb	r2, r1
 8005c38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	0c19      	lsrs	r1, r3, #16
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	3302      	adds	r3, #2
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	4413      	add	r3, r2
 8005c48:	b2ca      	uxtb	r2, r1
 8005c4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	0e19      	lsrs	r1, r3, #24
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	3303      	adds	r3, #3
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	4413      	add	r3, r2
 8005c5a:	b2ca      	uxtb	r2, r1
 8005c5c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	3304      	adds	r3, #4
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8005c64:	2300      	movs	r3, #0
 8005c66:	61bb      	str	r3, [r7, #24]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d228      	bcs.n	8005cc4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fa fac2 	bl	8000208 <strlen>
 8005c84:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	6979      	ldr	r1, [r7, #20]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f001 fd0c 	bl	80076ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	3304      	adds	r3, #4
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	18d0      	adds	r0, r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	f002 ff20 	bl	8008af4 <memcpy>
      offset += length_stringsi;
 8005cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	4413      	add	r3, r2
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	61bb      	str	r3, [r7, #24]
 8005cc2:	e7d1      	b.n	8005c68 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3728      	adds	r7, #40	; 0x28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b08e      	sub	sp, #56	; 0x38
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8005cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8005ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce8:	3301      	adds	r3, #1
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	4413      	add	r3, r2
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	021b      	lsls	r3, r3, #8
 8005cf2:	6a3a      	ldr	r2, [r7, #32]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8005cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cfa:	3302      	adds	r3, #2
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	4413      	add	r3, r2
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	041b      	lsls	r3, r3, #16
 8005d04:	6a3a      	ldr	r2, [r7, #32]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8005d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0c:	3303      	adds	r3, #3
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	4413      	add	r3, r2
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	061b      	lsls	r3, r3, #24
 8005d16:	6a3a      	ldr	r2, [r7, #32]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8005d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d1e:	3304      	adds	r3, #4
 8005d20:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	6a3a      	ldr	r2, [r7, #32]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d90a      	bls.n	8005d42 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4619      	mov	r1, r3
 8005d36:	4610      	mov	r0, r2
 8005d38:	f002 ff98 	bl	8008c6c <realloc>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a3a      	ldr	r2, [r7, #32]
 8005d46:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8005d48:	2300      	movs	r3, #0
 8005d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d236      	bcs.n	8005dc4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8005d56:	2300      	movs	r3, #0
 8005d58:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d5e:	6839      	ldr	r1, [r7, #0]
 8005d60:	440a      	add	r2, r1
 8005d62:	7812      	ldrb	r2, [r2, #0]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	6839      	ldr	r1, [r7, #0]
 8005d70:	440b      	add	r3, r1
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	021b      	lsls	r3, r3, #8
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7e:	3302      	adds	r3, #2
 8005d80:	6839      	ldr	r1, [r7, #0]
 8005d82:	440b      	add	r3, r1
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	041b      	lsls	r3, r3, #16
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d90:	3303      	adds	r3, #3
 8005d92:	6839      	ldr	r1, [r7, #0]
 8005d94:	440b      	add	r3, r1
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	061b      	lsls	r3, r3, #24
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8005da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da6:	3304      	adds	r3, #4
 8005da8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	3208      	adds	r2, #8
 8005db8:	6812      	ldr	r2, [r2, #0]
 8005dba:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	633b      	str	r3, [r7, #48]	; 0x30
 8005dc2:	e7c3      	b.n	8005d4c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	4413      	add	r3, r2
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8005dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	021b      	lsls	r3, r3, #8
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8005de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de2:	3302      	adds	r3, #2
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	4413      	add	r3, r2
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	041b      	lsls	r3, r3, #16
 8005dec:	69fa      	ldr	r2, [r7, #28]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8005df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df4:	3303      	adds	r3, #3
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	4413      	add	r3, r2
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	061b      	lsls	r3, r3, #24
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8005e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e06:	3304      	adds	r3, #4
 8005e08:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d90a      	bls.n	8005e2a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	699a      	ldr	r2, [r3, #24]
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4610      	mov	r0, r2
 8005e20:	f002 ff24 	bl	8008c6c <realloc>
 8005e24:	4602      	mov	r2, r0
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8005e30:	2300      	movs	r3, #0
 8005e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d236      	bcs.n	8005eac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e46:	6839      	ldr	r1, [r7, #0]
 8005e48:	440a      	add	r2, r1
 8005e4a:	7812      	ldrb	r2, [r2, #0]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e54:	3301      	adds	r3, #1
 8005e56:	6839      	ldr	r1, [r7, #0]
 8005e58:	440b      	add	r3, r1
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	021b      	lsls	r3, r3, #8
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e66:	3302      	adds	r3, #2
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	440b      	add	r3, r1
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	041b      	lsls	r3, r3, #16
 8005e70:	4313      	orrs	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e78:	3303      	adds	r3, #3
 8005e7a:	6839      	ldr	r1, [r7, #0]
 8005e7c:	440b      	add	r3, r1
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	061b      	lsls	r3, r3, #24
 8005e82:	4313      	orrs	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8005e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8e:	3304      	adds	r3, #4
 8005e90:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	699a      	ldr	r2, [r3, #24]
 8005e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	3214      	adds	r2, #20
 8005ea0:	6812      	ldr	r2, [r2, #0]
 8005ea2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8005ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eaa:	e7c3      	b.n	8005e34 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8005eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8005eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb8:	3301      	adds	r3, #1
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	021b      	lsls	r3, r3, #8
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8005ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eca:	3302      	adds	r3, #2
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	4413      	add	r3, r2
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	041b      	lsls	r3, r3, #16
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8005eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005edc:	3303      	adds	r3, #3
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	061b      	lsls	r3, r3, #24
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8005eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eee:	3304      	adds	r3, #4
 8005ef0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d90a      	bls.n	8005f12 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4619      	mov	r1, r3
 8005f06:	4610      	mov	r0, r2
 8005f08:	f002 feb0 	bl	8008c6c <realloc>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8005f18:	2300      	movs	r3, #0
 8005f1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	69db      	ldr	r3, [r3, #28]
 8005f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d23f      	bcs.n	8005fa6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8005f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	441a      	add	r2, r3
 8005f2c:	f107 030c 	add.w	r3, r7, #12
 8005f30:	4611      	mov	r1, r2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f001 fbd8 	bl	80076e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8005f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8005f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
 8005f42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4413      	add	r3, r2
 8005f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d20c      	bcs.n	8005f68 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	441a      	add	r2, r3
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	3b01      	subs	r3, #1
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	440b      	add	r3, r1
 8005f5c:	7812      	ldrb	r2, [r2, #0]
 8005f5e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	3301      	adds	r3, #1
 8005f64:	627b      	str	r3, [r7, #36]	; 0x24
 8005f66:	e7ec      	b.n	8005f42 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8005f68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	4413      	add	r3, r2
 8005f74:	2200      	movs	r2, #0
 8005f76:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8005f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	441a      	add	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8005f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4413      	add	r3, r2
 8005f8a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	3220      	adds	r2, #32
 8005f9a:	6812      	ldr	r2, [r2, #0]
 8005f9c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8005f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fa4:	e7ba      	b.n	8005f1c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3738      	adds	r7, #56	; 0x38
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	4b03      	ldr	r3, [pc, #12]	; (8005fc8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8005fba:	4618      	mov	r0, r3
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	08009000 	.word	0x08009000

08005fcc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	4b03      	ldr	r3, [pc, #12]	; (8005fe4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	08008e4c 	.word	0x08008e4c

08005fe8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	605a      	str	r2, [r3, #4]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	611a      	str	r2, [r3, #16]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68d8      	ldr	r0, [r3, #12]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6891      	ldr	r1, [r2, #8]
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	4798      	blx	r3
 8006034:	4603      	mov	r3, r0
  };
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
  }
 800604a:	4618      	mov	r0, r3
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	425b      	negs	r3, r3
 800606a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800606e:	4618      	mov	r0, r3
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
	...

0800607c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a0a      	ldr	r2, [pc, #40]	; (80060b0 <_ZN13STM32HardwareC1Ev+0x34>)
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4618      	mov	r0, r3
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	20000d10 	.word	0x20000d10

080060b4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f804 	bl	80060ca <_ZN13STM32Hardware10reset_rbufEv>
    }
 80060c2:	bf00      	nop
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b082      	sub	sp, #8
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	3304      	adds	r3, #4
 80060da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060de:	4619      	mov	r1, r3
 80060e0:	f7fd fb6c 	bl	80037bc <HAL_UART_Receive_DMA>
    }
 80060e4:	bf00      	nop
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <_ZN13STM32Hardware4readEv>:

    int read(){
 80060ec:	b590      	push	{r4, r7, lr}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
      int c = -1;
 80060f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060f8:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff ffa8 	bl	8006056 <_ZN13STM32Hardware10getRdmaIndEv>
 8006106:	4603      	mov	r3, r0
 8006108:	429c      	cmp	r4, r3
 800610a:	bf14      	ite	ne
 800610c:	2301      	movne	r3, #1
 800610e:	2300      	moveq	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d012      	beq.n	800613c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800611c:	1c59      	adds	r1, r3, #1
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	4413      	add	r3, r2
 8006128:	791b      	ldrb	r3, [r3, #4]
 800612a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006132:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 800613c:	68fb      	ldr	r3, [r7, #12]
    }
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	bd90      	pop	{r4, r7, pc}
	...

08006148 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b20      	cmp	r3, #32
 800615c:	d108      	bne.n	8006170 <_ZN13STM32Hardware5flushEv+0x28>
 800615e:	4b28      	ldr	r3, [pc, #160]	; (8006200 <_ZN13STM32Hardware5flushEv+0xb8>)
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	f083 0301 	eor.w	r3, r3, #1
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <_ZN13STM32Hardware5flushEv+0x28>
 800616c:	2301      	movs	r3, #1
 800616e:	e000      	b.n	8006172 <_ZN13STM32Hardware5flushEv+0x2a>
 8006170:	2300      	movs	r3, #0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d03f      	beq.n	80061f6 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8006176:	4b22      	ldr	r3, [pc, #136]	; (8006200 <_ZN13STM32Hardware5flushEv+0xb8>)
 8006178:	2201      	movs	r2, #1
 800617a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8006188:	429a      	cmp	r2, r3
 800618a:	d031      	beq.n	80061f0 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8006198:	429a      	cmp	r2, r3
 800619a:	d20a      	bcs.n	80061b2 <_ZN13STM32Hardware5flushEv+0x6a>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	e006      	b.n	80061c0 <_ZN13STM32Hardware5flushEv+0x78>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80061be:	b29b      	uxth	r3, r3
 80061c0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80061cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	4413      	add	r3, r2
 80061d4:	89fa      	ldrh	r2, [r7, #14]
 80061d6:	4619      	mov	r1, r3
 80061d8:	f7fd fa84 	bl	80036e4 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80061e2:	89fb      	ldrh	r3, [r7, #14]
 80061e4:	4413      	add	r3, r2
 80061e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80061f0:	4b03      	ldr	r3, [pc, #12]	; (8006200 <_ZN13STM32Hardware5flushEv+0xb8>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	701a      	strb	r2, [r3, #0]
      }
    }
 80061f6:	bf00      	nop
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	2000009c 	.word	0x2000009c

08006204 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
      int n = length;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800621a:	bfa8      	it	ge
 800621c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8006220:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8006228:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	4293      	cmp	r3, r2
 8006230:	bf28      	it	cs
 8006232:	4613      	movcs	r3, r2
 8006234:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800623c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4413      	add	r3, r2
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	68b9      	ldr	r1, [r7, #8]
 8006248:	4618      	mov	r0, r3
 800624a:	f002 fc53 	bl	8008af4 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	4413      	add	r3, r2
 8006258:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	429a      	cmp	r2, r3
 8006268:	d00b      	beq.n	8006282 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	18d1      	adds	r1, r2, r3
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	461a      	mov	r2, r3
 800627e:	f002 fc39 	bl	8008af4 <memcpy>
      }

      flush();
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f7ff ff60 	bl	8006148 <_ZN13STM32Hardware5flushEv>
    }
 8006288:	bf00      	nop
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	f7fa fe22 	bl	8000ee0 <HAL_GetTick>
 800629c:	4603      	mov	r3, r0
 800629e:	4618      	mov	r0, r3
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7ff f862 	bl	800537c <_ZN3ros3MsgC1Ev>
 80062b8:	4a08      	ldr	r2, [pc, #32]	; (80062dc <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a07      	ldr	r2, [pc, #28]	; (80062e0 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 80062c2:	605a      	str	r2, [r3, #4]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	609a      	str	r2, [r3, #8]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	60da      	str	r2, [r3, #12]
    {
    }
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4618      	mov	r0, r3
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	080090c8 	.word	0x080090c8
 80062e0:	08008dd0 	.word	0x08008dd0

080062e4 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7f9 ff86 	bl	8000208 <strlen>
 80062fc:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	4413      	add	r3, r2
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	4618      	mov	r0, r3
 8006308:	f001 f9d0 	bl	80076ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	3304      	adds	r3, #4
 8006310:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	18d0      	adds	r0, r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	4619      	mov	r1, r3
 8006320:	f002 fbe8 	bl	8008af4 <memcpy>
      offset += length_label;
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	4413      	add	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6899      	ldr	r1, [r3, #8]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	4413      	add	r3, r2
 8006336:	b2ca      	uxtb	r2, r1
 8006338:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	0a19      	lsrs	r1, r3, #8
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	3301      	adds	r3, #1
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	4413      	add	r3, r2
 8006348:	b2ca      	uxtb	r2, r1
 800634a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	0c19      	lsrs	r1, r3, #16
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3302      	adds	r3, #2
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	4413      	add	r3, r2
 800635a:	b2ca      	uxtb	r2, r1
 800635c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	0e19      	lsrs	r1, r3, #24
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3303      	adds	r3, #3
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	4413      	add	r3, r2
 800636c:	b2ca      	uxtb	r2, r1
 800636e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	3304      	adds	r3, #4
 8006374:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68d9      	ldr	r1, [r3, #12]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	4413      	add	r3, r2
 8006380:	b2ca      	uxtb	r2, r1
 8006382:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	0a19      	lsrs	r1, r3, #8
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3301      	adds	r3, #1
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	4413      	add	r3, r2
 8006392:	b2ca      	uxtb	r2, r1
 8006394:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	0c19      	lsrs	r1, r3, #16
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3302      	adds	r3, #2
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	4413      	add	r3, r2
 80063a4:	b2ca      	uxtb	r2, r1
 80063a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	0e19      	lsrs	r1, r3, #24
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3303      	adds	r3, #3
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	4413      	add	r3, r2
 80063b6:	b2ca      	uxtb	r2, r1
 80063b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3304      	adds	r3, #4
 80063be:	60fb      	str	r3, [r7, #12]
      return offset;
 80063c0:	68fb      	ldr	r3, [r7, #12]
    }
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b086      	sub	sp, #24
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80063d4:	2300      	movs	r3, #0
 80063d6:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	441a      	add	r2, r3
 80063de:	f107 030c 	add.w	r3, r7, #12
 80063e2:	4611      	mov	r1, r2
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 f97f 	bl	80076e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	3304      	adds	r3, #4
 80063ee:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4413      	add	r3, r2
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d20c      	bcs.n	800641a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	441a      	add	r2, r3
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	3b01      	subs	r3, #1
 800640a:	6839      	ldr	r1, [r7, #0]
 800640c:	440b      	add	r3, r1
 800640e:	7812      	ldrb	r2, [r2, #0]
 8006410:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	3301      	adds	r3, #1
 8006416:	617b      	str	r3, [r7, #20]
 8006418:	e7ec      	b.n	80063f4 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_label-1]=0;
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4413      	add	r3, r2
 8006420:	3b01      	subs	r3, #1
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	4413      	add	r3, r2
 8006426:	2200      	movs	r2, #0
 8006428:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	3b01      	subs	r3, #1
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	441a      	add	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	4413      	add	r3, r2
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	3301      	adds	r3, #1
 8006454:	6839      	ldr	r1, [r7, #0]
 8006456:	440b      	add	r3, r1
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	021b      	lsls	r3, r3, #8
 800645c:	431a      	orrs	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689a      	ldr	r2, [r3, #8]
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	3302      	adds	r3, #2
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	440b      	add	r3, r1
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	041b      	lsls	r3, r3, #16
 8006472:	431a      	orrs	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	3303      	adds	r3, #3
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	440b      	add	r3, r1
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	061b      	lsls	r3, r3, #24
 8006488:	431a      	orrs	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	3304      	adds	r3, #4
 8006492:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	4413      	add	r3, r2
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	3301      	adds	r3, #1
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	440b      	add	r3, r1
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	021b      	lsls	r3, r3, #8
 80064b2:	431a      	orrs	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	3302      	adds	r3, #2
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	440b      	add	r3, r1
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	041b      	lsls	r3, r3, #16
 80064c8:	431a      	orrs	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68da      	ldr	r2, [r3, #12]
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	3303      	adds	r3, #3
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	440b      	add	r3, r1
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	061b      	lsls	r3, r3, #24
 80064de:	431a      	orrs	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	3304      	adds	r3, #4
 80064e8:	613b      	str	r3, [r7, #16]
     return offset;
 80064ea:	693b      	ldr	r3, [r7, #16]
    }
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	4b03      	ldr	r3, [pc, #12]	; (800650c <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 80064fe:	4618      	mov	r0, r3
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	08008e70 	.word	0x08008e70

08006510 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	4b03      	ldr	r3, [pc, #12]	; (8006528 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 800651a:	4618      	mov	r0, r3
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	08008e90 	.word	0x08008e90

0800652c <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
      dim_length(0), dim(NULL),
      data_offset(0)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4618      	mov	r0, r3
 8006538:	f7fe ff20 	bl	800537c <_ZN3ros3MsgC1Ev>
 800653c:	4a0a      	ldr	r2, [pc, #40]	; (8006568 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	605a      	str	r2, [r3, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3308      	adds	r3, #8
 800654c:	4618      	mov	r0, r3
 800654e:	f7ff feab 	bl	80062a8 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	619a      	str	r2, [r3, #24]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	61da      	str	r2, [r3, #28]
    {
    }
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4618      	mov	r0, r3
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	080090b0 	.word	0x080090b0

0800656c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006576:	2300      	movs	r3, #0
 8006578:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6859      	ldr	r1, [r3, #4]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	4413      	add	r3, r2
 8006584:	b2ca      	uxtb	r2, r1
 8006586:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	0a19      	lsrs	r1, r3, #8
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3301      	adds	r3, #1
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	4413      	add	r3, r2
 8006596:	b2ca      	uxtb	r2, r1
 8006598:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	0c19      	lsrs	r1, r3, #16
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	3302      	adds	r3, #2
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	4413      	add	r3, r2
 80065a8:	b2ca      	uxtb	r2, r1
 80065aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	0e19      	lsrs	r1, r3, #24
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3303      	adds	r3, #3
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	4413      	add	r3, r2
 80065ba:	b2ca      	uxtb	r2, r1
 80065bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3304      	adds	r3, #4
 80065c2:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 80065c4:	2300      	movs	r3, #0
 80065c6:	60bb      	str	r3, [r7, #8]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d218      	bcs.n	8006604 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x98>
      offset += this->dim[i].serialize(outbuffer + offset);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699a      	ldr	r2, [r3, #24]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	011b      	lsls	r3, r3, #4
 80065da:	18d0      	adds	r0, r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	699a      	ldr	r2, [r3, #24]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	4413      	add	r3, r2
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	440a      	add	r2, r1
 80065f0:	4611      	mov	r1, r2
 80065f2:	4798      	blx	r3
 80065f4:	4602      	mov	r2, r0
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	4413      	add	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	3301      	adds	r3, #1
 8006600:	60bb      	str	r3, [r7, #8]
 8006602:	e7e1      	b.n	80065c8 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	69d9      	ldr	r1, [r3, #28]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	4413      	add	r3, r2
 800660e:	b2ca      	uxtb	r2, r1
 8006610:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	0a19      	lsrs	r1, r3, #8
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3301      	adds	r3, #1
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	4413      	add	r3, r2
 8006620:	b2ca      	uxtb	r2, r1
 8006622:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	0c19      	lsrs	r1, r3, #16
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3302      	adds	r3, #2
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	4413      	add	r3, r2
 8006632:	b2ca      	uxtb	r2, r1
 8006634:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	0e19      	lsrs	r1, r3, #24
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	3303      	adds	r3, #3
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	4413      	add	r3, r2
 8006644:	b2ca      	uxtb	r2, r1
 8006646:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	3304      	adds	r3, #4
 800664c:	60fb      	str	r3, [r7, #12]
      return offset;
 800664e:	68fb      	ldr	r3, [r7, #12]
    }
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	4413      	add	r3, r2
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	3301      	adds	r3, #1
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	4413      	add	r3, r2
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	021b      	lsls	r3, r3, #8
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	3302      	adds	r3, #2
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	4413      	add	r3, r2
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	041b      	lsls	r3, r3, #16
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	4313      	orrs	r3, r2
 8006692:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	3303      	adds	r3, #3
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	4413      	add	r3, r2
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	061b      	lsls	r3, r3, #24
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	3304      	adds	r3, #4
 80066aa:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d90a      	bls.n	80066cc <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	699a      	ldr	r2, [r3, #24]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	011b      	lsls	r3, r3, #4
 80066be:	4619      	mov	r1, r3
 80066c0:	4610      	mov	r0, r2
 80066c2:	f002 fad3 	bl	8008c6c <realloc>
 80066c6:	4602      	mov	r2, r0
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 80066d2:	2300      	movs	r3, #0
 80066d4:	613b      	str	r3, [r7, #16]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d21b      	bcs.n	8006718 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xc0>
      offset += this->st_dim.deserialize(inbuffer + offset);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f103 0008 	add.w	r0, r3, #8
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	4413      	add	r3, r2
 80066ec:	4619      	mov	r1, r3
 80066ee:	f7ff fe6c 	bl	80063ca <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 80066f2:	4602      	mov	r2, r0
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	4413      	add	r3, r2
 80066f8:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	699a      	ldr	r2, [r3, #24]
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	011b      	lsls	r3, r3, #4
 8006702:	18d0      	adds	r0, r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3308      	adds	r3, #8
 8006708:	2210      	movs	r2, #16
 800670a:	4619      	mov	r1, r3
 800670c:	f002 f9f2 	bl	8008af4 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	3301      	adds	r3, #1
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	e7de      	b.n	80066d6 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x7e>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	4413      	add	r3, r2
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	461a      	mov	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	69da      	ldr	r2, [r3, #28]
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	3301      	adds	r3, #1
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	440b      	add	r3, r1
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	021b      	lsls	r3, r3, #8
 8006736:	431a      	orrs	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	69da      	ldr	r2, [r3, #28]
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	3302      	adds	r3, #2
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	440b      	add	r3, r1
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	041b      	lsls	r3, r3, #16
 800674c:	431a      	orrs	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	69da      	ldr	r2, [r3, #28]
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	3303      	adds	r3, #3
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	440b      	add	r3, r1
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	061b      	lsls	r3, r3, #24
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	3304      	adds	r3, #4
 800676c:	617b      	str	r3, [r7, #20]
     return offset;
 800676e:	697b      	ldr	r3, [r7, #20]
    }
 8006770:	4618      	mov	r0, r3
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	4b03      	ldr	r3, [pc, #12]	; (8006790 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8006782:	4618      	mov	r0, r3
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	08008eb4 	.word	0x08008eb4

08006794 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	4b03      	ldr	r3, [pc, #12]	; (80067ac <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 800679e:	4618      	mov	r0, r3
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	08008ed0 	.word	0x08008ed0

080067b0 <_ZN8std_msgs17Float64MultiArrayC1Ev>:
      uint32_t data_length;
      typedef double _data_type;
      _data_type st_data;
      _data_type * data;

    Float64MultiArray():
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), data(NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe fdde 	bl	800537c <_ZN3ros3MsgC1Ev>
 80067c0:	4a09      	ldr	r2, [pc, #36]	; (80067e8 <_ZN8std_msgs17Float64MultiArrayC1Ev+0x38>)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	3304      	adds	r3, #4
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff feae 	bl	800652c <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	625a      	str	r2, [r3, #36]	; 0x24
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	631a      	str	r2, [r3, #48]	; 0x30
    {
    }
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	08009098 	.word	0x08009098

080067ec <_ZNK8std_msgs17Float64MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80067ec:	b590      	push	{r4, r7, lr}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80067f6:	2300      	movs	r3, #0
 80067f8:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	1d18      	adds	r0, r3, #4
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	4413      	add	r3, r2
 8006804:	4619      	mov	r1, r3
 8006806:	f7ff feb1 	bl	800656c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 800680a:	4602      	mov	r2, r0
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	4413      	add	r3, r2
 8006810:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	4413      	add	r3, r2
 800681c:	b2ca      	uxtb	r2, r1
 800681e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	0a19      	lsrs	r1, r3, #8
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	3301      	adds	r3, #1
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	4413      	add	r3, r2
 800682e:	b2ca      	uxtb	r2, r1
 8006830:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	0c19      	lsrs	r1, r3, #16
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	3302      	adds	r3, #2
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	4413      	add	r3, r2
 8006840:	b2ca      	uxtb	r2, r1
 8006842:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	0e19      	lsrs	r1, r3, #24
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	3303      	adds	r3, #3
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	4413      	add	r3, r2
 8006852:	b2ca      	uxtb	r2, r1
 8006854:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	3304      	adds	r3, #4
 800685a:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 800685c:	2300      	movs	r3, #0
 800685e:	613b      	str	r3, [r7, #16]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	429a      	cmp	r2, r3
 8006868:	d27e      	bcs.n	8006968 <_ZNK8std_msgs17Float64MultiArray9serializeEPh+0x17c>
      union {
        double real;
        uint64_t base;
      } u_datai;
      u_datai.real = this->data[i];
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	00db      	lsls	r3, r3, #3
 8006872:	4413      	add	r3, r2
 8006874:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006878:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 800687c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	440a      	add	r2, r1
 8006886:	b2db      	uxtb	r3, r3
 8006888:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 800688a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800688e:	f04f 0300 	mov.w	r3, #0
 8006892:	f04f 0400 	mov.w	r4, #0
 8006896:	0a0b      	lsrs	r3, r1, #8
 8006898:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800689c:	0a14      	lsrs	r4, r2, #8
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	3201      	adds	r2, #1
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	440a      	add	r2, r1
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 80068aa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80068ae:	f04f 0300 	mov.w	r3, #0
 80068b2:	f04f 0400 	mov.w	r4, #0
 80068b6:	0c0b      	lsrs	r3, r1, #16
 80068b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068bc:	0c14      	lsrs	r4, r2, #16
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	3202      	adds	r2, #2
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	440a      	add	r2, r1
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 80068ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80068ce:	f04f 0300 	mov.w	r3, #0
 80068d2:	f04f 0400 	mov.w	r4, #0
 80068d6:	0e0b      	lsrs	r3, r1, #24
 80068d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80068dc:	0e14      	lsrs	r4, r2, #24
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	3203      	adds	r2, #3
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	440a      	add	r2, r1
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_datai.base >> (8 * 4)) & 0xFF;
 80068ea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80068ee:	f04f 0300 	mov.w	r3, #0
 80068f2:	f04f 0400 	mov.w	r4, #0
 80068f6:	0013      	movs	r3, r2
 80068f8:	2400      	movs	r4, #0
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	3204      	adds	r2, #4
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	440a      	add	r2, r1
 8006902:	b2db      	uxtb	r3, r3
 8006904:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_datai.base >> (8 * 5)) & 0xFF;
 8006906:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800690a:	f04f 0300 	mov.w	r3, #0
 800690e:	f04f 0400 	mov.w	r4, #0
 8006912:	0a13      	lsrs	r3, r2, #8
 8006914:	2400      	movs	r4, #0
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	3205      	adds	r2, #5
 800691a:	6839      	ldr	r1, [r7, #0]
 800691c:	440a      	add	r2, r1
 800691e:	b2db      	uxtb	r3, r3
 8006920:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_datai.base >> (8 * 6)) & 0xFF;
 8006922:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006926:	f04f 0300 	mov.w	r3, #0
 800692a:	f04f 0400 	mov.w	r4, #0
 800692e:	0c13      	lsrs	r3, r2, #16
 8006930:	2400      	movs	r4, #0
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	3206      	adds	r2, #6
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	440a      	add	r2, r1
 800693a:	b2db      	uxtb	r3, r3
 800693c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_datai.base >> (8 * 7)) & 0xFF;
 800693e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	f04f 0400 	mov.w	r4, #0
 800694a:	0e13      	lsrs	r3, r2, #24
 800694c:	2400      	movs	r4, #0
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	3207      	adds	r2, #7
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	440a      	add	r2, r1
 8006956:	b2db      	uxtb	r3, r3
 8006958:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->data[i]);
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	3308      	adds	r3, #8
 800695e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	3301      	adds	r3, #1
 8006964:	613b      	str	r3, [r7, #16]
 8006966:	e77b      	b.n	8006860 <_ZNK8std_msgs17Float64MultiArray9serializeEPh+0x74>
      }
      return offset;
 8006968:	697b      	ldr	r3, [r7, #20]
    }
 800696a:	4618      	mov	r0, r3
 800696c:	371c      	adds	r7, #28
 800696e:	46bd      	mov	sp, r7
 8006970:	bd90      	pop	{r4, r7, pc}

08006972 <_ZN8std_msgs17Float64MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8006972:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800697e:	2300      	movs	r3, #0
 8006980:	61fb      	str	r3, [r7, #28]
      offset += this->layout.deserialize(inbuffer + offset);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	1d18      	adds	r0, r3, #4
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	4413      	add	r3, r2
 800698c:	4619      	mov	r1, r3
 800698e:	f7ff fe63 	bl	8006658 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8006992:	4602      	mov	r2, r0
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	4413      	add	r3, r2
 8006998:	61fb      	str	r3, [r7, #28]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	4413      	add	r3, r2
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	617b      	str	r3, [r7, #20]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	3301      	adds	r3, #1
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	4413      	add	r3, r2
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	021b      	lsls	r3, r3, #8
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	617b      	str	r3, [r7, #20]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	3302      	adds	r3, #2
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	4413      	add	r3, r2
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	041b      	lsls	r3, r3, #16
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	3303      	adds	r3, #3
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	4413      	add	r3, r2
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	061b      	lsls	r3, r3, #24
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]
      offset += sizeof(this->data_length);
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	3304      	adds	r3, #4
 80069de:	61fb      	str	r3, [r7, #28]
      if(data_lengthT > data_length)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d90a      	bls.n	8006a00 <_ZN8std_msgs17Float64MultiArray11deserializeEPh+0x8e>
        this->data = (double*)realloc(this->data, data_lengthT * sizeof(double));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	00db      	lsls	r3, r3, #3
 80069f2:	4619      	mov	r1, r3
 80069f4:	4610      	mov	r0, r2
 80069f6:	f002 f939 	bl	8008c6c <realloc>
 80069fa:	4602      	mov	r2, r0
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	631a      	str	r2, [r3, #48]	; 0x30
      data_length = data_lengthT;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8006a06:	2300      	movs	r3, #0
 8006a08:	61bb      	str	r3, [r7, #24]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	f080 80d6 	bcs.w	8006bc2 <_ZN8std_msgs17Float64MultiArray11deserializeEPh+0x250>
      union {
        double real;
        uint64_t base;
      } u_st_data;
      u_st_data.base = 0;
 8006a16:	f04f 0300 	mov.w	r3, #0
 8006a1a:	f04f 0400 	mov.w	r4, #0
 8006a1e:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006a22:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	6838      	ldr	r0, [r7, #0]
 8006a2a:	4403      	add	r3, r0
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	fa5f f883 	uxtb.w	r8, r3
 8006a32:	f04f 0900 	mov.w	r9, #0
 8006a36:	ea48 0301 	orr.w	r3, r8, r1
 8006a3a:	ea49 0402 	orr.w	r4, r9, r2
 8006a3e:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006a42:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	b2d9      	uxtb	r1, r3
 8006a52:	f04f 0200 	mov.w	r2, #0
 8006a56:	f04f 0b00 	mov.w	fp, #0
 8006a5a:	f04f 0c00 	mov.w	ip, #0
 8006a5e:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8006a62:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8006a66:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8006a6a:	ea4b 0308 	orr.w	r3, fp, r8
 8006a6e:	ea4c 0409 	orr.w	r4, ip, r9
 8006a72:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006a76:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	3302      	adds	r3, #2
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	4413      	add	r3, r2
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	b2d9      	uxtb	r1, r3
 8006a86:	f04f 0200 	mov.w	r2, #0
 8006a8a:	f04f 0b00 	mov.w	fp, #0
 8006a8e:	f04f 0c00 	mov.w	ip, #0
 8006a92:	ea4f 4c02 	mov.w	ip, r2, lsl #16
 8006a96:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 8006a9a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8006a9e:	ea4b 0308 	orr.w	r3, fp, r8
 8006aa2:	ea4c 0409 	orr.w	r4, ip, r9
 8006aa6:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006aaa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	3303      	adds	r3, #3
 8006ab2:	6838      	ldr	r0, [r7, #0]
 8006ab4:	4403      	add	r3, r0
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	f04f 0400 	mov.w	r4, #0
 8006abe:	0a1e      	lsrs	r6, r3, #8
 8006ac0:	061d      	lsls	r5, r3, #24
 8006ac2:	ea41 0305 	orr.w	r3, r1, r5
 8006ac6:	ea42 0406 	orr.w	r4, r2, r6
 8006aca:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006ace:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	6838      	ldr	r0, [r7, #0]
 8006ad8:	4403      	add	r3, r0
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	fa5f f883 	uxtb.w	r8, r3
 8006ae0:	f04f 0900 	mov.w	r9, #0
 8006ae4:	f04f 0b00 	mov.w	fp, #0
 8006ae8:	f04f 0c00 	mov.w	ip, #0
 8006aec:	46c4      	mov	ip, r8
 8006aee:	f04f 0b00 	mov.w	fp, #0
 8006af2:	ea4b 0301 	orr.w	r3, fp, r1
 8006af6:	ea4c 0402 	orr.w	r4, ip, r2
 8006afa:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006afe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	3305      	adds	r3, #5
 8006b06:	6838      	ldr	r0, [r7, #0]
 8006b08:	4403      	add	r3, r0
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	fa5f f883 	uxtb.w	r8, r3
 8006b10:	f04f 0900 	mov.w	r9, #0
 8006b14:	f04f 0b00 	mov.w	fp, #0
 8006b18:	f04f 0c00 	mov.w	ip, #0
 8006b1c:	ea4f 2c08 	mov.w	ip, r8, lsl #8
 8006b20:	f04f 0b00 	mov.w	fp, #0
 8006b24:	ea4b 0301 	orr.w	r3, fp, r1
 8006b28:	ea4c 0402 	orr.w	r4, ip, r2
 8006b2c:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006b30:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	3306      	adds	r3, #6
 8006b38:	6838      	ldr	r0, [r7, #0]
 8006b3a:	4403      	add	r3, r0
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	fa5f f883 	uxtb.w	r8, r3
 8006b42:	f04f 0900 	mov.w	r9, #0
 8006b46:	f04f 0b00 	mov.w	fp, #0
 8006b4a:	f04f 0c00 	mov.w	ip, #0
 8006b4e:	ea4f 4c08 	mov.w	ip, r8, lsl #16
 8006b52:	f04f 0b00 	mov.w	fp, #0
 8006b56:	ea4b 0301 	orr.w	r3, fp, r1
 8006b5a:	ea4c 0402 	orr.w	r4, ip, r2
 8006b5e:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_st_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006b62:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	3307      	adds	r3, #7
 8006b6a:	6838      	ldr	r0, [r7, #0]
 8006b6c:	4403      	add	r3, r0
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	fa5f f883 	uxtb.w	r8, r3
 8006b74:	f04f 0900 	mov.w	r9, #0
 8006b78:	f04f 0b00 	mov.w	fp, #0
 8006b7c:	f04f 0c00 	mov.w	ip, #0
 8006b80:	ea4f 6c08 	mov.w	ip, r8, lsl #24
 8006b84:	f04f 0b00 	mov.w	fp, #0
 8006b88:	ea4b 0301 	orr.w	r3, fp, r1
 8006b8c:	ea4c 0402 	orr.w	r4, ip, r2
 8006b90:	e9c7 3402 	strd	r3, r4, [r7, #8]
      this->st_data = u_st_data.real;
 8006b94:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
      offset += sizeof(this->st_data);
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	3308      	adds	r3, #8
 8006ba2:	61fb      	str	r3, [r7, #28]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(double));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	18d0      	adds	r0, r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	3328      	adds	r3, #40	; 0x28
 8006bb2:	2208      	movs	r2, #8
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	f001 ff9d 	bl	8008af4 <memcpy>
      for( uint32_t i = 0; i < data_length; i++){
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	61bb      	str	r3, [r7, #24]
 8006bc0:	e723      	b.n	8006a0a <_ZN8std_msgs17Float64MultiArray11deserializeEPh+0x98>
      }
     return offset;
 8006bc2:	69fb      	ldr	r3, [r7, #28]
    }
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3720      	adds	r7, #32
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
	...

08006bd0 <_ZN8std_msgs17Float64MultiArray7getTypeEv>:

    const char * getType(){ return "std_msgs/Float64MultiArray"; };
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	4b03      	ldr	r3, [pc, #12]	; (8006be8 <_ZN8std_msgs17Float64MultiArray7getTypeEv+0x18>)
 8006bda:	4618      	mov	r0, r3
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	08008ef4 	.word	0x08008ef4

08006bec <_ZN8std_msgs17Float64MultiArray6getMD5Ev>:
    const char * getMD5(){ return "4b7d974086d4060e7db4613a7e6c3ba4"; };
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	4b03      	ldr	r3, [pc, #12]	; (8006c04 <_ZN8std_msgs17Float64MultiArray6getMD5Ev+0x18>)
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	08008f10 	.word	0x08008f10

08006c08 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 8006c08:	b590      	push	{r4, r7, lr}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
      data(0)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fe fbb2 	bl	800537c <_ZN3ros3MsgC1Ev>
 8006c18:	4a07      	ldr	r2, [pc, #28]	; (8006c38 <_ZN8std_msgs5Int64C1Ev+0x30>)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	f04f 0300 	mov.w	r3, #0
 8006c24:	f04f 0400 	mov.w	r4, #0
 8006c28:	e9c2 3402 	strd	r3, r4, [r2, #8]
    {
    }
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd90      	pop	{r4, r7, pc}
 8006c36:	bf00      	nop
 8006c38:	08009080 	.word	0x08009080

08006c3c <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8006c3c:	b490      	push	{r4, r7}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8006c50:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8006c54:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	440a      	add	r2, r1
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8006c62:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006c66:	f04f 0300 	mov.w	r3, #0
 8006c6a:	f04f 0400 	mov.w	r4, #0
 8006c6e:	0a0b      	lsrs	r3, r1, #8
 8006c70:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006c74:	0a14      	lsrs	r4, r2, #8
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	3201      	adds	r2, #1
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	440a      	add	r2, r1
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8006c82:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006c86:	f04f 0300 	mov.w	r3, #0
 8006c8a:	f04f 0400 	mov.w	r4, #0
 8006c8e:	0c0b      	lsrs	r3, r1, #16
 8006c90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c94:	0c14      	lsrs	r4, r2, #16
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	3202      	adds	r2, #2
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8006ca2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ca6:	f04f 0300 	mov.w	r3, #0
 8006caa:	f04f 0400 	mov.w	r4, #0
 8006cae:	0e0b      	lsrs	r3, r1, #24
 8006cb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006cb4:	0e14      	lsrs	r4, r2, #24
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	3203      	adds	r2, #3
 8006cba:	6839      	ldr	r1, [r7, #0]
 8006cbc:	440a      	add	r2, r1
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 8006cc2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006cc6:	f04f 0300 	mov.w	r3, #0
 8006cca:	f04f 0400 	mov.w	r4, #0
 8006cce:	0013      	movs	r3, r2
 8006cd0:	2400      	movs	r4, #0
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	3204      	adds	r2, #4
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	440a      	add	r2, r1
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 8006cde:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ce2:	f04f 0300 	mov.w	r3, #0
 8006ce6:	f04f 0400 	mov.w	r4, #0
 8006cea:	0a13      	lsrs	r3, r2, #8
 8006cec:	2400      	movs	r4, #0
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	3205      	adds	r2, #5
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	440a      	add	r2, r1
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 8006cfa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006cfe:	f04f 0300 	mov.w	r3, #0
 8006d02:	f04f 0400 	mov.w	r4, #0
 8006d06:	0c13      	lsrs	r3, r2, #16
 8006d08:	2400      	movs	r4, #0
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	3206      	adds	r2, #6
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	440a      	add	r2, r1
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 8006d16:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d1a:	f04f 0300 	mov.w	r3, #0
 8006d1e:	f04f 0400 	mov.w	r4, #0
 8006d22:	0e13      	lsrs	r3, r2, #24
 8006d24:	2400      	movs	r4, #0
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	3207      	adds	r2, #7
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	440a      	add	r2, r1
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->data);
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	3308      	adds	r3, #8
 8006d36:	617b      	str	r3, [r7, #20]
      return offset;
 8006d38:	697b      	ldr	r3, [r7, #20]
    }
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bc90      	pop	{r4, r7}
 8006d42:	4770      	bx	lr

08006d44 <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8006d44:	e92d 0bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp}
 8006d48:	b087      	sub	sp, #28
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006d50:	2300      	movs	r3, #0
 8006d52:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8006d54:	f04f 0300 	mov.w	r3, #0
 8006d58:	f04f 0400 	mov.w	r4, #0
 8006d5c:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8006d60:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	6838      	ldr	r0, [r7, #0]
 8006d68:	4403      	add	r3, r0
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	fa5f f883 	uxtb.w	r8, r3
 8006d70:	f04f 0900 	mov.w	r9, #0
 8006d74:	ea48 0301 	orr.w	r3, r8, r1
 8006d78:	ea49 0402 	orr.w	r4, r9, r2
 8006d7c:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006d80:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	3301      	adds	r3, #1
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	b2d9      	uxtb	r1, r3
 8006d90:	f04f 0200 	mov.w	r2, #0
 8006d94:	f04f 0b00 	mov.w	fp, #0
 8006d98:	f04f 0c00 	mov.w	ip, #0
 8006d9c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8006da0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8006da4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8006da8:	ea4b 0308 	orr.w	r3, fp, r8
 8006dac:	ea4c 0409 	orr.w	r4, ip, r9
 8006db0:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006db4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	3302      	adds	r3, #2
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	b2d9      	uxtb	r1, r3
 8006dc4:	f04f 0200 	mov.w	r2, #0
 8006dc8:	f04f 0b00 	mov.w	fp, #0
 8006dcc:	f04f 0c00 	mov.w	ip, #0
 8006dd0:	ea4f 4c02 	mov.w	ip, r2, lsl #16
 8006dd4:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 8006dd8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8006ddc:	ea4b 0308 	orr.w	r3, fp, r8
 8006de0:	ea4c 0409 	orr.w	r4, ip, r9
 8006de4:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8006de8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	3303      	adds	r3, #3
 8006df0:	6838      	ldr	r0, [r7, #0]
 8006df2:	4403      	add	r3, r0
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	f04f 0400 	mov.w	r4, #0
 8006dfc:	0a1e      	lsrs	r6, r3, #8
 8006dfe:	061d      	lsls	r5, r3, #24
 8006e00:	ea41 0305 	orr.w	r3, r1, r5
 8006e04:	ea42 0406 	orr.w	r4, r2, r6
 8006e08:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8006e0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	3304      	adds	r3, #4
 8006e14:	6838      	ldr	r0, [r7, #0]
 8006e16:	4403      	add	r3, r0
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	b2dd      	uxtb	r5, r3
 8006e1c:	f04f 0600 	mov.w	r6, #0
 8006e20:	f04f 0800 	mov.w	r8, #0
 8006e24:	f04f 0900 	mov.w	r9, #0
 8006e28:	46a9      	mov	r9, r5
 8006e2a:	f04f 0800 	mov.w	r8, #0
 8006e2e:	ea48 0301 	orr.w	r3, r8, r1
 8006e32:	ea49 0402 	orr.w	r4, r9, r2
 8006e36:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8006e3a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	3305      	adds	r3, #5
 8006e42:	6838      	ldr	r0, [r7, #0]
 8006e44:	4403      	add	r3, r0
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	b2dd      	uxtb	r5, r3
 8006e4a:	f04f 0600 	mov.w	r6, #0
 8006e4e:	f04f 0800 	mov.w	r8, #0
 8006e52:	f04f 0900 	mov.w	r9, #0
 8006e56:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8006e5a:	f04f 0800 	mov.w	r8, #0
 8006e5e:	ea48 0301 	orr.w	r3, r8, r1
 8006e62:	ea49 0402 	orr.w	r4, r9, r2
 8006e66:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8006e6a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	3306      	adds	r3, #6
 8006e72:	6838      	ldr	r0, [r7, #0]
 8006e74:	4403      	add	r3, r0
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	b2dd      	uxtb	r5, r3
 8006e7a:	f04f 0600 	mov.w	r6, #0
 8006e7e:	f04f 0800 	mov.w	r8, #0
 8006e82:	f04f 0900 	mov.w	r9, #0
 8006e86:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8006e8a:	f04f 0800 	mov.w	r8, #0
 8006e8e:	ea48 0301 	orr.w	r3, r8, r1
 8006e92:	ea49 0402 	orr.w	r4, r9, r2
 8006e96:	e9c7 3402 	strd	r3, r4, [r7, #8]
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8006e9a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	3307      	adds	r3, #7
 8006ea2:	6838      	ldr	r0, [r7, #0]
 8006ea4:	4403      	add	r3, r0
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	b2dd      	uxtb	r5, r3
 8006eaa:	f04f 0600 	mov.w	r6, #0
 8006eae:	f04f 0800 	mov.w	r8, #0
 8006eb2:	f04f 0900 	mov.w	r9, #0
 8006eb6:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8006eba:	f04f 0800 	mov.w	r8, #0
 8006ebe:	ea48 0301 	orr.w	r3, r8, r1
 8006ec2:	ea49 0402 	orr.w	r4, r9, r2
 8006ec6:	e9c7 3402 	strd	r3, r4, [r7, #8]
      this->data = u_data.real;
 8006eca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->data);
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	617b      	str	r3, [r7, #20]
     return offset;
 8006eda:	697b      	ldr	r3, [r7, #20]
    }
 8006edc:	4618      	mov	r0, r3
 8006ede:	371c      	adds	r7, #28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	e8bd 0bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp}
 8006ee6:	4770      	bx	lr

08006ee8 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	4b03      	ldr	r3, [pc, #12]	; (8006f00 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	08008f34 	.word	0x08008f34

08006f04 <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	4b03      	ldr	r3, [pc, #12]	; (8006f1c <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 8006f0e:	4618      	mov	r0, r3
 8006f10:	370c      	adds	r7, #12
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	08008f44 	.word	0x08008f44

08006f20 <_ZN4chjk8unit_cmdC1Ev>:
      typedef double _vel_type;
      _vel_type vel;
      typedef double _deg_type;
      _deg_type deg;

    unit_cmd():
 8006f20:	b590      	push	{r4, r7, lr}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
      vel(0),
      deg(0)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fe fa26 	bl	800537c <_ZN3ros3MsgC1Ev>
 8006f30:	4a0a      	ldr	r2, [pc, #40]	; (8006f5c <_ZN4chjk8unit_cmdC1Ev+0x3c>)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	f04f 0300 	mov.w	r3, #0
 8006f3c:	f04f 0400 	mov.w	r4, #0
 8006f40:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	f04f 0300 	mov.w	r3, #0
 8006f4a:	f04f 0400 	mov.w	r4, #0
 8006f4e:	e9c2 3404 	strd	r3, r4, [r2, #16]
    {
    }
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4618      	mov	r0, r3
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd90      	pop	{r4, r7, pc}
 8006f5c:	08009068 	.word	0x08009068

08006f60 <_ZNK4chjk8unit_cmd9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8006f60:	b490      	push	{r4, r7}
 8006f62:	b088      	sub	sp, #32
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	61fb      	str	r3, [r7, #28]
      union {
        double real;
        uint64_t base;
      } u_vel;
      u_vel.real = this->vel;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8006f74:	e9c7 3404 	strd	r3, r4, [r7, #16]
      *(outbuffer + offset + 0) = (u_vel.base >> (8 * 0)) & 0xFF;
 8006f78:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006f7c:	69fa      	ldr	r2, [r7, #28]
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	440a      	add	r2, r1
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_vel.base >> (8 * 1)) & 0xFF;
 8006f86:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006f8a:	f04f 0300 	mov.w	r3, #0
 8006f8e:	f04f 0400 	mov.w	r4, #0
 8006f92:	0a0b      	lsrs	r3, r1, #8
 8006f94:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006f98:	0a14      	lsrs	r4, r2, #8
 8006f9a:	69fa      	ldr	r2, [r7, #28]
 8006f9c:	3201      	adds	r2, #1
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	440a      	add	r2, r1
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_vel.base >> (8 * 2)) & 0xFF;
 8006fa6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006faa:	f04f 0300 	mov.w	r3, #0
 8006fae:	f04f 0400 	mov.w	r4, #0
 8006fb2:	0c0b      	lsrs	r3, r1, #16
 8006fb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fb8:	0c14      	lsrs	r4, r2, #16
 8006fba:	69fa      	ldr	r2, [r7, #28]
 8006fbc:	3202      	adds	r2, #2
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	440a      	add	r2, r1
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_vel.base >> (8 * 3)) & 0xFF;
 8006fc6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006fca:	f04f 0300 	mov.w	r3, #0
 8006fce:	f04f 0400 	mov.w	r4, #0
 8006fd2:	0e0b      	lsrs	r3, r1, #24
 8006fd4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006fd8:	0e14      	lsrs	r4, r2, #24
 8006fda:	69fa      	ldr	r2, [r7, #28]
 8006fdc:	3203      	adds	r2, #3
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	440a      	add	r2, r1
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_vel.base >> (8 * 4)) & 0xFF;
 8006fe6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006fea:	f04f 0300 	mov.w	r3, #0
 8006fee:	f04f 0400 	mov.w	r4, #0
 8006ff2:	0013      	movs	r3, r2
 8006ff4:	2400      	movs	r4, #0
 8006ff6:	69fa      	ldr	r2, [r7, #28]
 8006ff8:	3204      	adds	r2, #4
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	440a      	add	r2, r1
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_vel.base >> (8 * 5)) & 0xFF;
 8007002:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007006:	f04f 0300 	mov.w	r3, #0
 800700a:	f04f 0400 	mov.w	r4, #0
 800700e:	0a13      	lsrs	r3, r2, #8
 8007010:	2400      	movs	r4, #0
 8007012:	69fa      	ldr	r2, [r7, #28]
 8007014:	3205      	adds	r2, #5
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	440a      	add	r2, r1
 800701a:	b2db      	uxtb	r3, r3
 800701c:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_vel.base >> (8 * 6)) & 0xFF;
 800701e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007022:	f04f 0300 	mov.w	r3, #0
 8007026:	f04f 0400 	mov.w	r4, #0
 800702a:	0c13      	lsrs	r3, r2, #16
 800702c:	2400      	movs	r4, #0
 800702e:	69fa      	ldr	r2, [r7, #28]
 8007030:	3206      	adds	r2, #6
 8007032:	6839      	ldr	r1, [r7, #0]
 8007034:	440a      	add	r2, r1
 8007036:	b2db      	uxtb	r3, r3
 8007038:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_vel.base >> (8 * 7)) & 0xFF;
 800703a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800703e:	f04f 0300 	mov.w	r3, #0
 8007042:	f04f 0400 	mov.w	r4, #0
 8007046:	0e13      	lsrs	r3, r2, #24
 8007048:	2400      	movs	r4, #0
 800704a:	69fa      	ldr	r2, [r7, #28]
 800704c:	3207      	adds	r2, #7
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	440a      	add	r2, r1
 8007052:	b2db      	uxtb	r3, r3
 8007054:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->vel);
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	3308      	adds	r3, #8
 800705a:	61fb      	str	r3, [r7, #28]
      union {
        double real;
        uint64_t base;
      } u_deg;
      u_deg.real = this->deg;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8007062:	e9c7 3402 	strd	r3, r4, [r7, #8]
      *(outbuffer + offset + 0) = (u_deg.base >> (8 * 0)) & 0xFF;
 8007066:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800706a:	69fa      	ldr	r2, [r7, #28]
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	440a      	add	r2, r1
 8007070:	b2db      	uxtb	r3, r3
 8007072:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 1) = (u_deg.base >> (8 * 1)) & 0xFF;
 8007074:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007078:	f04f 0300 	mov.w	r3, #0
 800707c:	f04f 0400 	mov.w	r4, #0
 8007080:	0a0b      	lsrs	r3, r1, #8
 8007082:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007086:	0a14      	lsrs	r4, r2, #8
 8007088:	69fa      	ldr	r2, [r7, #28]
 800708a:	3201      	adds	r2, #1
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	440a      	add	r2, r1
 8007090:	b2db      	uxtb	r3, r3
 8007092:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 2) = (u_deg.base >> (8 * 2)) & 0xFF;
 8007094:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007098:	f04f 0300 	mov.w	r3, #0
 800709c:	f04f 0400 	mov.w	r4, #0
 80070a0:	0c0b      	lsrs	r3, r1, #16
 80070a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070a6:	0c14      	lsrs	r4, r2, #16
 80070a8:	69fa      	ldr	r2, [r7, #28]
 80070aa:	3202      	adds	r2, #2
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	440a      	add	r2, r1
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 3) = (u_deg.base >> (8 * 3)) & 0xFF;
 80070b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80070b8:	f04f 0300 	mov.w	r3, #0
 80070bc:	f04f 0400 	mov.w	r4, #0
 80070c0:	0e0b      	lsrs	r3, r1, #24
 80070c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80070c6:	0e14      	lsrs	r4, r2, #24
 80070c8:	69fa      	ldr	r2, [r7, #28]
 80070ca:	3203      	adds	r2, #3
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	440a      	add	r2, r1
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 4) = (u_deg.base >> (8 * 4)) & 0xFF;
 80070d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80070d8:	f04f 0300 	mov.w	r3, #0
 80070dc:	f04f 0400 	mov.w	r4, #0
 80070e0:	0013      	movs	r3, r2
 80070e2:	2400      	movs	r4, #0
 80070e4:	69fa      	ldr	r2, [r7, #28]
 80070e6:	3204      	adds	r2, #4
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	440a      	add	r2, r1
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 5) = (u_deg.base >> (8 * 5)) & 0xFF;
 80070f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80070f4:	f04f 0300 	mov.w	r3, #0
 80070f8:	f04f 0400 	mov.w	r4, #0
 80070fc:	0a13      	lsrs	r3, r2, #8
 80070fe:	2400      	movs	r4, #0
 8007100:	69fa      	ldr	r2, [r7, #28]
 8007102:	3205      	adds	r2, #5
 8007104:	6839      	ldr	r1, [r7, #0]
 8007106:	440a      	add	r2, r1
 8007108:	b2db      	uxtb	r3, r3
 800710a:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 6) = (u_deg.base >> (8 * 6)) & 0xFF;
 800710c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007110:	f04f 0300 	mov.w	r3, #0
 8007114:	f04f 0400 	mov.w	r4, #0
 8007118:	0c13      	lsrs	r3, r2, #16
 800711a:	2400      	movs	r4, #0
 800711c:	69fa      	ldr	r2, [r7, #28]
 800711e:	3206      	adds	r2, #6
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	440a      	add	r2, r1
 8007124:	b2db      	uxtb	r3, r3
 8007126:	7013      	strb	r3, [r2, #0]
      *(outbuffer + offset + 7) = (u_deg.base >> (8 * 7)) & 0xFF;
 8007128:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800712c:	f04f 0300 	mov.w	r3, #0
 8007130:	f04f 0400 	mov.w	r4, #0
 8007134:	0e13      	lsrs	r3, r2, #24
 8007136:	2400      	movs	r4, #0
 8007138:	69fa      	ldr	r2, [r7, #28]
 800713a:	3207      	adds	r2, #7
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	440a      	add	r2, r1
 8007140:	b2db      	uxtb	r3, r3
 8007142:	7013      	strb	r3, [r2, #0]
      offset += sizeof(this->deg);
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	3308      	adds	r3, #8
 8007148:	61fb      	str	r3, [r7, #28]
      return offset;
 800714a:	69fb      	ldr	r3, [r7, #28]
    }
 800714c:	4618      	mov	r0, r3
 800714e:	3720      	adds	r7, #32
 8007150:	46bd      	mov	sp, r7
 8007152:	bc90      	pop	{r4, r7}
 8007154:	4770      	bx	lr

08007156 <_ZN4chjk8unit_cmd11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8007156:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800715a:	b08a      	sub	sp, #40	; 0x28
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
    {
      int offset = 0;
 8007162:	2300      	movs	r3, #0
 8007164:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_vel;
      u_vel.base = 0;
 8007166:	f04f 0300 	mov.w	r3, #0
 800716a:	f04f 0400 	mov.w	r4, #0
 800716e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_vel.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8007172:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	68b8      	ldr	r0, [r7, #8]
 800717a:	4403      	add	r3, r0
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	fa5f fa83 	uxtb.w	sl, r3
 8007182:	f04f 0b00 	mov.w	fp, #0
 8007186:	ea4a 0301 	orr.w	r3, sl, r1
 800718a:	ea4b 0402 	orr.w	r4, fp, r2
 800718e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_vel.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8007192:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	3301      	adds	r3, #1
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	4413      	add	r3, r2
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	b2d9      	uxtb	r1, r3
 80071a2:	f04f 0200 	mov.w	r2, #0
 80071a6:	f04f 0300 	mov.w	r3, #0
 80071aa:	f04f 0400 	mov.w	r4, #0
 80071ae:	e9c7 3400 	strd	r3, r4, [r7]
 80071b2:	0213      	lsls	r3, r2, #8
 80071b4:	607b      	str	r3, [r7, #4]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80071bc:	607b      	str	r3, [r7, #4]
 80071be:	020b      	lsls	r3, r1, #8
 80071c0:	603b      	str	r3, [r7, #0]
 80071c2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80071c6:	ea43 030a 	orr.w	r3, r3, sl
 80071ca:	ea44 040b 	orr.w	r4, r4, fp
 80071ce:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_vel.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80071d2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	3302      	adds	r3, #2
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	4413      	add	r3, r2
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	b2d9      	uxtb	r1, r3
 80071e2:	f04f 0200 	mov.w	r2, #0
 80071e6:	f04f 0300 	mov.w	r3, #0
 80071ea:	f04f 0400 	mov.w	r4, #0
 80071ee:	e9c7 3400 	strd	r3, r4, [r7]
 80071f2:	0413      	lsls	r3, r2, #16
 80071f4:	607b      	str	r3, [r7, #4]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80071fc:	607b      	str	r3, [r7, #4]
 80071fe:	040b      	lsls	r3, r1, #16
 8007200:	603b      	str	r3, [r7, #0]
 8007202:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007206:	ea43 030a 	orr.w	r3, r3, sl
 800720a:	ea44 040b 	orr.w	r4, r4, fp
 800720e:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_vel.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8007212:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	3303      	adds	r3, #3
 800721a:	68b8      	ldr	r0, [r7, #8]
 800721c:	4403      	add	r3, r0
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	b2db      	uxtb	r3, r3
 8007222:	f04f 0400 	mov.w	r4, #0
 8007226:	ea4f 2913 	mov.w	r9, r3, lsr #8
 800722a:	ea4f 6803 	mov.w	r8, r3, lsl #24
 800722e:	ea41 0308 	orr.w	r3, r1, r8
 8007232:	ea42 0409 	orr.w	r4, r2, r9
 8007236:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_vel.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800723a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	3304      	adds	r3, #4
 8007242:	68b8      	ldr	r0, [r7, #8]
 8007244:	4403      	add	r3, r0
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	fa5f f883 	uxtb.w	r8, r3
 800724c:	f04f 0900 	mov.w	r9, #0
 8007250:	f04f 0a00 	mov.w	sl, #0
 8007254:	f04f 0b00 	mov.w	fp, #0
 8007258:	46c3      	mov	fp, r8
 800725a:	f04f 0a00 	mov.w	sl, #0
 800725e:	ea4a 0301 	orr.w	r3, sl, r1
 8007262:	ea4b 0402 	orr.w	r4, fp, r2
 8007266:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_vel.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800726a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	3305      	adds	r3, #5
 8007272:	68b8      	ldr	r0, [r7, #8]
 8007274:	4403      	add	r3, r0
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	fa5f f883 	uxtb.w	r8, r3
 800727c:	f04f 0900 	mov.w	r9, #0
 8007280:	f04f 0a00 	mov.w	sl, #0
 8007284:	f04f 0b00 	mov.w	fp, #0
 8007288:	ea4f 2b08 	mov.w	fp, r8, lsl #8
 800728c:	f04f 0a00 	mov.w	sl, #0
 8007290:	ea4a 0301 	orr.w	r3, sl, r1
 8007294:	ea4b 0402 	orr.w	r4, fp, r2
 8007298:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_vel.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800729c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	3306      	adds	r3, #6
 80072a4:	68b8      	ldr	r0, [r7, #8]
 80072a6:	4403      	add	r3, r0
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	fa5f f883 	uxtb.w	r8, r3
 80072ae:	f04f 0900 	mov.w	r9, #0
 80072b2:	f04f 0a00 	mov.w	sl, #0
 80072b6:	f04f 0b00 	mov.w	fp, #0
 80072ba:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 80072be:	f04f 0a00 	mov.w	sl, #0
 80072c2:	ea4a 0301 	orr.w	r3, sl, r1
 80072c6:	ea4b 0402 	orr.w	r4, fp, r2
 80072ca:	e9c7 3406 	strd	r3, r4, [r7, #24]
      u_vel.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80072ce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80072d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d4:	3307      	adds	r3, #7
 80072d6:	68b8      	ldr	r0, [r7, #8]
 80072d8:	4403      	add	r3, r0
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	fa5f f883 	uxtb.w	r8, r3
 80072e0:	f04f 0900 	mov.w	r9, #0
 80072e4:	f04f 0a00 	mov.w	sl, #0
 80072e8:	f04f 0b00 	mov.w	fp, #0
 80072ec:	ea4f 6b08 	mov.w	fp, r8, lsl #24
 80072f0:	f04f 0a00 	mov.w	sl, #0
 80072f4:	ea4a 0301 	orr.w	r3, sl, r1
 80072f8:	ea4b 0402 	orr.w	r4, fp, r2
 80072fc:	e9c7 3406 	strd	r3, r4, [r7, #24]
      this->vel = u_vel.real;
 8007300:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	e9c2 3402 	strd	r3, r4, [r2, #8]
      offset += sizeof(this->vel);
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	3308      	adds	r3, #8
 800730e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_deg;
      u_deg.base = 0;
 8007310:	f04f 0300 	mov.w	r3, #0
 8007314:	f04f 0400 	mov.w	r4, #0
 8007318:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_deg.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800731c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	68b8      	ldr	r0, [r7, #8]
 8007324:	4403      	add	r3, r0
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	fa5f f883 	uxtb.w	r8, r3
 800732c:	f04f 0900 	mov.w	r9, #0
 8007330:	ea48 0301 	orr.w	r3, r8, r1
 8007334:	ea49 0402 	orr.w	r4, r9, r2
 8007338:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_deg.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800733c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	3301      	adds	r3, #1
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	4413      	add	r3, r2
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	b2d9      	uxtb	r1, r3
 800734c:	f04f 0200 	mov.w	r2, #0
 8007350:	f04f 0a00 	mov.w	sl, #0
 8007354:	f04f 0b00 	mov.w	fp, #0
 8007358:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 800735c:	ea4b 6b11 	orr.w	fp, fp, r1, lsr #24
 8007360:	ea4f 2a01 	mov.w	sl, r1, lsl #8
 8007364:	ea4a 0308 	orr.w	r3, sl, r8
 8007368:	ea4b 0409 	orr.w	r4, fp, r9
 800736c:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_deg.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8007370:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	3302      	adds	r3, #2
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	4413      	add	r3, r2
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	b2d9      	uxtb	r1, r3
 8007380:	f04f 0200 	mov.w	r2, #0
 8007384:	f04f 0a00 	mov.w	sl, #0
 8007388:	f04f 0b00 	mov.w	fp, #0
 800738c:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8007390:	ea4b 4b11 	orr.w	fp, fp, r1, lsr #16
 8007394:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8007398:	ea4a 0308 	orr.w	r3, sl, r8
 800739c:	ea4b 0409 	orr.w	r4, fp, r9
 80073a0:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_deg.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80073a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	3303      	adds	r3, #3
 80073ac:	68b8      	ldr	r0, [r7, #8]
 80073ae:	4403      	add	r3, r0
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	f04f 0400 	mov.w	r4, #0
 80073b8:	0a1e      	lsrs	r6, r3, #8
 80073ba:	061d      	lsls	r5, r3, #24
 80073bc:	ea41 0305 	orr.w	r3, r1, r5
 80073c0:	ea42 0406 	orr.w	r4, r2, r6
 80073c4:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_deg.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80073c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	3304      	adds	r3, #4
 80073d0:	68b8      	ldr	r0, [r7, #8]
 80073d2:	4403      	add	r3, r0
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	b2dd      	uxtb	r5, r3
 80073d8:	f04f 0600 	mov.w	r6, #0
 80073dc:	f04f 0800 	mov.w	r8, #0
 80073e0:	f04f 0900 	mov.w	r9, #0
 80073e4:	46a9      	mov	r9, r5
 80073e6:	f04f 0800 	mov.w	r8, #0
 80073ea:	ea48 0301 	orr.w	r3, r8, r1
 80073ee:	ea49 0402 	orr.w	r4, r9, r2
 80073f2:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_deg.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80073f6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	3305      	adds	r3, #5
 80073fe:	68b8      	ldr	r0, [r7, #8]
 8007400:	4403      	add	r3, r0
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	b2dd      	uxtb	r5, r3
 8007406:	f04f 0600 	mov.w	r6, #0
 800740a:	f04f 0800 	mov.w	r8, #0
 800740e:	f04f 0900 	mov.w	r9, #0
 8007412:	ea4f 2905 	mov.w	r9, r5, lsl #8
 8007416:	f04f 0800 	mov.w	r8, #0
 800741a:	ea48 0301 	orr.w	r3, r8, r1
 800741e:	ea49 0402 	orr.w	r4, r9, r2
 8007422:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_deg.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8007426:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	3306      	adds	r3, #6
 800742e:	68b8      	ldr	r0, [r7, #8]
 8007430:	4403      	add	r3, r0
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	b2dd      	uxtb	r5, r3
 8007436:	f04f 0600 	mov.w	r6, #0
 800743a:	f04f 0800 	mov.w	r8, #0
 800743e:	f04f 0900 	mov.w	r9, #0
 8007442:	ea4f 4905 	mov.w	r9, r5, lsl #16
 8007446:	f04f 0800 	mov.w	r8, #0
 800744a:	ea48 0301 	orr.w	r3, r8, r1
 800744e:	ea49 0402 	orr.w	r4, r9, r2
 8007452:	e9c7 3404 	strd	r3, r4, [r7, #16]
      u_deg.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8007456:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	3307      	adds	r3, #7
 800745e:	68b8      	ldr	r0, [r7, #8]
 8007460:	4403      	add	r3, r0
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	b2dd      	uxtb	r5, r3
 8007466:	f04f 0600 	mov.w	r6, #0
 800746a:	f04f 0800 	mov.w	r8, #0
 800746e:	f04f 0900 	mov.w	r9, #0
 8007472:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8007476:	f04f 0800 	mov.w	r8, #0
 800747a:	ea48 0301 	orr.w	r3, r8, r1
 800747e:	ea49 0402 	orr.w	r4, r9, r2
 8007482:	e9c7 3404 	strd	r3, r4, [r7, #16]
      this->deg = u_deg.real;
 8007486:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	e9c2 3404 	strd	r3, r4, [r2, #16]
      offset += sizeof(this->deg);
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	3308      	adds	r3, #8
 8007494:	627b      	str	r3, [r7, #36]	; 0x24
     return offset;
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8007498:	4618      	mov	r0, r3
 800749a:	3728      	adds	r7, #40	; 0x28
 800749c:	46bd      	mov	sp, r7
 800749e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80074a2:	4770      	bx	lr

080074a4 <_ZN4chjk8unit_cmd7getTypeEv>:

    const char * getType(){ return "chjk/unit_cmd"; };
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	4b03      	ldr	r3, [pc, #12]	; (80074bc <_ZN4chjk8unit_cmd7getTypeEv+0x18>)
 80074ae:	4618      	mov	r0, r3
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	08008f68 	.word	0x08008f68

080074c0 <_ZN4chjk8unit_cmd6getMD5Ev>:
    const char * getMD5(){ return "68a821851e17ec6fee5da92fea03d8fc"; };
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	4b03      	ldr	r3, [pc, #12]	; (80074d8 <_ZN4chjk8unit_cmd6getMD5Ev+0x18>)
 80074ca:	4618      	mov	r0, r3
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	08008f78 	.word	0x08008f78

080074dc <HAL_UART_TxCpltCallback>:
ros::Subscriber<std_msgs::Int64> sub("pwm", &callback);
ros::Subscriber<chjk::unit_cmd> sub_cmd("left_rear", &get_cmd);

ros::Publisher enc_pub("enc_left_rear", &enc);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80074e4:	4805      	ldr	r0, [pc, #20]	; (80074fc <HAL_UART_TxCpltCallback+0x20>)
 80074e6:	f000 fa0d 	bl	8007904 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80074ea:	4603      	mov	r3, r0
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fe fe2b 	bl	8006148 <_ZN13STM32Hardware5flushEv>
}
 80074f2:	bf00      	nop
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	200000a0 	.word	0x200000a0

08007500 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8007508:	4805      	ldr	r0, [pc, #20]	; (8007520 <HAL_UART_RxCpltCallback+0x20>)
 800750a:	f000 f9fb 	bl	8007904 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800750e:	4603      	mov	r3, r0
 8007510:	4618      	mov	r0, r3
 8007512:	f7fe fdda 	bl	80060ca <_ZN13STM32Hardware10reset_rbufEv>
}
 8007516:	bf00      	nop
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	200000a0 	.word	0x200000a0

08007524 <setup>:


void setup(void)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	af00      	add	r7, sp, #0
  enc.data_length = 2;
 8007528:	4b0d      	ldr	r3, [pc, #52]	; (8007560 <setup+0x3c>)
 800752a:	2202      	movs	r2, #2
 800752c:	625a      	str	r2, [r3, #36]	; 0x24
  enc.data = (double*)malloc(sizeof(double)*2);
 800752e:	2010      	movs	r0, #16
 8007530:	f001 fad8 	bl	8008ae4 <malloc>
 8007534:	4603      	mov	r3, r0
 8007536:	461a      	mov	r2, r3
 8007538:	4b09      	ldr	r3, [pc, #36]	; (8007560 <setup+0x3c>)
 800753a:	631a      	str	r2, [r3, #48]	; 0x30
  nh.initNode();
 800753c:	4809      	ldr	r0, [pc, #36]	; (8007564 <setup+0x40>)
 800753e:	f000 f9ed 	bl	800791c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.subscribe(sub);
 8007542:	4909      	ldr	r1, [pc, #36]	; (8007568 <setup+0x44>)
 8007544:	4807      	ldr	r0, [pc, #28]	; (8007564 <setup+0x40>)
 8007546:	f000 fa06 	bl	8007956 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>
  nh.subscribe(sub_cmd);
 800754a:	4908      	ldr	r1, [pc, #32]	; (800756c <setup+0x48>)
 800754c:	4805      	ldr	r0, [pc, #20]	; (8007564 <setup+0x40>)
 800754e:	f000 fa2d 	bl	80079ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN4chjk8unit_cmdEvEEEEbRT_>
  nh.advertise(enc_pub);
 8007552:	4907      	ldr	r1, [pc, #28]	; (8007570 <setup+0x4c>)
 8007554:	4803      	ldr	r0, [pc, #12]	; (8007564 <setup+0x40>)
 8007556:	f000 fa54 	bl	8007a02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>


}
 800755a:	bf00      	nop
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	200009e0 	.word	0x200009e0
 8007564:	200000a0 	.word	0x200000a0
 8007568:	20000a30 	.word	0x20000a30
 800756c:	20000a58 	.word	0x20000a58
 8007570:	20000a88 	.word	0x20000a88

08007574 <loop>:

void loop(void)
{
 8007574:	b598      	push	{r3, r4, r7, lr}
 8007576:	af00      	add	r7, sp, #0
  nh.spinOnce();
 8007578:	480d      	ldr	r0, [pc, #52]	; (80075b0 <loop+0x3c>)
 800757a:	f000 fa72 	bl	8007a62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
  enc.data[0] = now_deg;
 800757e:	4b0d      	ldr	r3, [pc, #52]	; (80075b4 <loop+0x40>)
 8007580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007582:	4b0d      	ldr	r3, [pc, #52]	; (80075b8 <loop+0x44>)
 8007584:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007588:	e9c2 3400 	strd	r3, r4, [r2]
  enc.data[1] = now_vel;
 800758c:	4b09      	ldr	r3, [pc, #36]	; (80075b4 <loop+0x40>)
 800758e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007590:	f103 0208 	add.w	r2, r3, #8
 8007594:	4b09      	ldr	r3, [pc, #36]	; (80075bc <loop+0x48>)
 8007596:	e9d3 3400 	ldrd	r3, r4, [r3]
 800759a:	e9c2 3400 	strd	r3, r4, [r2]
  enc_pub.publish(&enc);
 800759e:	4905      	ldr	r1, [pc, #20]	; (80075b4 <loop+0x40>)
 80075a0:	4807      	ldr	r0, [pc, #28]	; (80075c0 <loop+0x4c>)
 80075a2:	f7fe fd38 	bl	8006016 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  HAL_Delay(10);
 80075a6:	200a      	movs	r0, #10
 80075a8:	f7f9 fca6 	bl	8000ef8 <HAL_Delay>
}
 80075ac:	bf00      	nop
 80075ae:	bd98      	pop	{r3, r4, r7, pc}
 80075b0:	200000a0 	.word	0x200000a0
 80075b4:	200009e0 	.word	0x200009e0
 80075b8:	20000d58 	.word	0x20000d58
 80075bc:	20000c68 	.word	0x20000c68
 80075c0:	20000a88 	.word	0x20000a88

080075c4 <_Z8callbackRKN8std_msgs5Int64E>:

void callback(const std_msgs::Int64& msg){
 80075c4:	b490      	push	{r4, r7}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
    pwm_cmd = msg.data;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80075d2:	461a      	mov	r2, r3
 80075d4:	4b03      	ldr	r3, [pc, #12]	; (80075e4 <_Z8callbackRKN8std_msgs5Int64E+0x20>)
 80075d6:	601a      	str	r2, [r3, #0]

}
 80075d8:	bf00      	nop
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bc90      	pop	{r4, r7}
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	20000a18 	.word	0x20000a18

080075e8 <_Z7get_cmdRKN4chjk8unit_cmdE>:

void get_cmd(const chjk::unit_cmd& cmd){
 80075e8:	b490      	push	{r4, r7}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
    cmd_deg = cmd.deg;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80075f6:	4a23      	ldr	r2, [pc, #140]	; (8007684 <_Z7get_cmdRKN4chjk8unit_cmdE+0x9c>)
 80075f8:	e9c2 3400 	strd	r3, r4, [r2]
    cmd_vel = cmd.vel;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007602:	4a21      	ldr	r2, [pc, #132]	; (8007688 <_Z7get_cmdRKN4chjk8unit_cmdE+0xa0>)
 8007604:	e9c2 3400 	strd	r3, r4, [r2]
    P1=0;
 8007608:	4a20      	ldr	r2, [pc, #128]	; (800768c <_Z7get_cmdRKN4chjk8unit_cmdE+0xa4>)
 800760a:	f04f 0300 	mov.w	r3, #0
 800760e:	f04f 0400 	mov.w	r4, #0
 8007612:	e9c2 3400 	strd	r3, r4, [r2]
    I1=0;
 8007616:	4a1e      	ldr	r2, [pc, #120]	; (8007690 <_Z7get_cmdRKN4chjk8unit_cmdE+0xa8>)
 8007618:	f04f 0300 	mov.w	r3, #0
 800761c:	f04f 0400 	mov.w	r4, #0
 8007620:	e9c2 3400 	strd	r3, r4, [r2]
    D1=0;
 8007624:	4a1b      	ldr	r2, [pc, #108]	; (8007694 <_Z7get_cmdRKN4chjk8unit_cmdE+0xac>)
 8007626:	f04f 0300 	mov.w	r3, #0
 800762a:	f04f 0400 	mov.w	r4, #0
 800762e:	e9c2 3400 	strd	r3, r4, [r2]
    pre_error1=0;
 8007632:	4a19      	ldr	r2, [pc, #100]	; (8007698 <_Z7get_cmdRKN4chjk8unit_cmdE+0xb0>)
 8007634:	f04f 0300 	mov.w	r3, #0
 8007638:	f04f 0400 	mov.w	r4, #0
 800763c:	e9c2 3400 	strd	r3, r4, [r2]

    P2=0;
 8007640:	4a16      	ldr	r2, [pc, #88]	; (800769c <_Z7get_cmdRKN4chjk8unit_cmdE+0xb4>)
 8007642:	f04f 0300 	mov.w	r3, #0
 8007646:	f04f 0400 	mov.w	r4, #0
 800764a:	e9c2 3400 	strd	r3, r4, [r2]
    I2=0;
 800764e:	4a14      	ldr	r2, [pc, #80]	; (80076a0 <_Z7get_cmdRKN4chjk8unit_cmdE+0xb8>)
 8007650:	f04f 0300 	mov.w	r3, #0
 8007654:	f04f 0400 	mov.w	r4, #0
 8007658:	e9c2 3400 	strd	r3, r4, [r2]
    D2=0;
 800765c:	4a11      	ldr	r2, [pc, #68]	; (80076a4 <_Z7get_cmdRKN4chjk8unit_cmdE+0xbc>)
 800765e:	f04f 0300 	mov.w	r3, #0
 8007662:	f04f 0400 	mov.w	r4, #0
 8007666:	e9c2 3400 	strd	r3, r4, [r2]
    pre_error2=0;
 800766a:	4a0f      	ldr	r2, [pc, #60]	; (80076a8 <_Z7get_cmdRKN4chjk8unit_cmdE+0xc0>)
 800766c:	f04f 0300 	mov.w	r3, #0
 8007670:	f04f 0400 	mov.w	r4, #0
 8007674:	e9c2 3400 	strd	r3, r4, [r2]
}
 8007678:	bf00      	nop
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bc90      	pop	{r4, r7}
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	20000a28 	.word	0x20000a28
 8007688:	20000a20 	.word	0x20000a20
 800768c:	20000b20 	.word	0x20000b20
 8007690:	20000bf8 	.word	0x20000bf8
 8007694:	20000d50 	.word	0x20000d50
 8007698:	20000c60 	.word	0x20000c60
 800769c:	20000b70 	.word	0x20000b70
 80076a0:	20000ab0 	.word	0x20000ab0
 80076a4:	20000c78 	.word	0x20000c78
 80076a8:	20000b18 	.word	0x20000b18

080076ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80076b6:	2300      	movs	r3, #0
 80076b8:	60fb      	str	r3, [r7, #12]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2b03      	cmp	r3, #3
 80076be:	d80d      	bhi.n	80076dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	fa22 f103 	lsr.w	r1, r2, r3
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4413      	add	r3, r2
 80076d0:	b2ca      	uxtb	r2, r1
 80076d2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3301      	adds	r3, #1
 80076d8:	60fb      	str	r3, [r7, #12]
 80076da:	e7ee      	b.n	80076ba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80076dc:	bf00      	nop
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80076f8:	2300      	movs	r3, #0
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b03      	cmp	r3, #3
 8007700:	d811      	bhi.n	8007726 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	440a      	add	r2, r1
 800770c:	7812      	ldrb	r2, [r2, #0]
 800770e:	4611      	mov	r1, r2
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	00d2      	lsls	r2, r2, #3
 8007714:	fa01 f202 	lsl.w	r2, r1, r2
 8007718:	431a      	orrs	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3301      	adds	r3, #1
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	e7ea      	b.n	80076fc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8007726:	bf00      	nop
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
	...

08007734 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	4a04      	ldr	r2, [pc, #16]	; (8007750 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	601a      	str	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4618      	mov	r0, r3
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	080090f8 	.word	0x080090f8

08007754 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4618      	mov	r0, r3
 8007760:	f7ff ffe8 	bl	8007734 <_ZN3ros15NodeHandleBase_C1Ev>
 8007764:	4a3a      	ldr	r2, [pc, #232]	; (8007850 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	3304      	adds	r3, #4
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe fc84 	bl	800607c <_ZN13STM32HardwareC1Ev>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8007782:	4618      	mov	r0, r3
 8007784:	f7fe f96e 	bl	8005a64 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8007788:	2300      	movs	r3, #0
 800778a:	617b      	str	r3, [r7, #20]
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	2b18      	cmp	r3, #24
 8007790:	d80b      	bhi.n	80077aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	2200      	movs	r2, #0
 80077a0:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	3301      	adds	r3, #1
 80077a6:	617b      	str	r3, [r7, #20]
 80077a8:	e7f0      	b.n	800778c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80077aa:	2300      	movs	r3, #0
 80077ac:	613b      	str	r3, [r7, #16]
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	2b18      	cmp	r3, #24
 80077b2:	d80a      	bhi.n	80077ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80077bc:	2100      	movs	r1, #0
 80077be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	3301      	adds	r3, #1
 80077c6:	613b      	str	r3, [r7, #16]
 80077c8:	e7f1      	b.n	80077ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077d4:	d20a      	bcs.n	80077ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	4413      	add	r3, r2
 80077dc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80077e0:	2200      	movs	r2, #0
 80077e2:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	3301      	adds	r3, #1
 80077e8:	60fb      	str	r3, [r7, #12]
 80077ea:	e7f0      	b.n	80077ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80077ec:	2300      	movs	r3, #0
 80077ee:	60bb      	str	r3, [r7, #8]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077f6:	d20a      	bcs.n	800780e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	4413      	add	r3, r2
 80077fe:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8007802:	2200      	movs	r2, #0
 8007804:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	3301      	adds	r3, #1
 800780a:	60bb      	str	r3, [r7, #8]
 800780c:	e7f0      	b.n	80077f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4618      	mov	r0, r3
 800784a:	3718      	adds	r7, #24
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	08009054 	.word	0x08009054

08007854 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	4a04      	ldr	r2, [pc, #16]	; (8007870 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4618      	mov	r0, r3
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	080090e0 	.word	0x080090e0

08007874 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	4618      	mov	r0, r3
 8007886:	f7ff ffe5 	bl	8007854 <_ZN3ros11Subscriber_C1Ev>
 800788a:	4a0b      	ldr	r2, [pc, #44]	; (80078b8 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei+0x44>)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3310      	adds	r3, #16
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff f9b7 	bl	8006c08 <_ZN8std_msgs5Int64C1Ev>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	621a      	str	r2, [r3, #32]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	625a      	str	r2, [r3, #36]	; 0x24
  {
    topic_ = topic_name;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	609a      	str	r2, [r3, #8]
  };
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	0800903c 	.word	0x0800903c

080078bc <_ZN3ros10SubscriberIN4chjk8unit_cmdEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7ff ffc1 	bl	8007854 <_ZN3ros11Subscriber_C1Ev>
 80078d2:	4a0b      	ldr	r2, [pc, #44]	; (8007900 <_ZN3ros10SubscriberIN4chjk8unit_cmdEvEC1EPKcPFvRKS2_Ei+0x44>)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	3310      	adds	r3, #16
 80078dc:	4618      	mov	r0, r3
 80078de:	f7ff fb1f 	bl	8006f20 <_ZN4chjk8unit_cmdC1Ev>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	629a      	str	r2, [r3, #40]	; 0x28
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	62da      	str	r2, [r3, #44]	; 0x2c
    topic_ = topic_name;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	609a      	str	r2, [r3, #8]
  };
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	08009024 	.word	0x08009024

08007904 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3304      	adds	r3, #4
  }
 8007910:	4618      	mov	r0, r3
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3304      	adds	r3, #4
 8007928:	4618      	mov	r0, r3
 800792a:	f7fe fbc3 	bl	80060b4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 800794e:	bf00      	nop
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8007956:	b480      	push	{r7}
 8007958:	b085      	sub	sp, #20
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8007960:	2300      	movs	r3, #0
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b18      	cmp	r3, #24
 8007968:	dc19      	bgt.n	800799e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d10d      	bne.n	8007996 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	605a      	str	r2, [r3, #4]
        return true;
 8007992:	2301      	movs	r3, #1
 8007994:	e004      	b.n	80079a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	3301      	adds	r3, #1
 800799a:	60fb      	str	r3, [r7, #12]
 800799c:	e7e2      	b.n	8007964 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0xe>
      }
    }
    return false;
 800799e:	2300      	movs	r3, #0
  }
 80079a0:	4618      	mov	r0, r3
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN4chjk8unit_cmdEvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80079b6:	2300      	movs	r3, #0
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b18      	cmp	r3, #24
 80079be:	dc19      	bgt.n	80079f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN4chjk8unit_cmdEvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80079c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10d      	bne.n	80079ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN4chjk8unit_cmdEvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80079da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	605a      	str	r2, [r3, #4]
        return true;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e004      	b.n	80079f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN4chjk8unit_cmdEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3301      	adds	r3, #1
 80079f0:	60fb      	str	r3, [r7, #12]
 80079f2:	e7e2      	b.n	80079ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN4chjk8unit_cmdEvEEEEbRT_+0xe>
    return false;
 80079f4:	2300      	movs	r3, #0
  }
 80079f6:	4618      	mov	r0, r3
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8007a02:	b480      	push	{r7}
 8007a04:	b085      	sub	sp, #20
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2b18      	cmp	r3, #24
 8007a14:	dc1e      	bgt.n	8007a54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d111      	bne.n	8007a4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	683a      	ldr	r2, [r7, #0]
 8007a36:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	60da      	str	r2, [r3, #12]
        return true;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e004      	b.n	8007a56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	e7dd      	b.n	8007a10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8007a54:	2300      	movs	r3, #0
  }
 8007a56:	4618      	mov	r0, r3
 8007a58:	3714      	adds	r7, #20
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b084      	sub	sp, #16
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fe fc0e 	bl	8006290 <_ZN13STM32Hardware4timeEv>
 8007a74:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d903      	bls.n	8007a90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d009      	beq.n	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d903      	bls.n	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d014      	beq.n	8007ae2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3304      	adds	r3, #4
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fe fbe7 	bl	8006290 <_ZN13STM32Hardware4timeEv>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	1ad2      	subs	r2, r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	bf8c      	ite	hi
 8007ad2:	2301      	movhi	r3, #1
 8007ad4:	2300      	movls	r3, #0
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8007adc:	f06f 0301 	mvn.w	r3, #1
 8007ae0:	e197      	b.n	8007e12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      int data = hardware_.read();
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fe fb00 	bl	80060ec <_ZN13STM32Hardware4readEv>
 8007aec:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f2c0 8177 	blt.w	8007de4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x382>
      checksum_ += data;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	441a      	add	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007b0c:	2b07      	cmp	r3, #7
 8007b0e:	d11e      	bne.n	8007b4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8007b16:	1c59      	adds	r1, r3, #1
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	b2d1      	uxtb	r1, r2
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	4413      	add	r3, r2
 8007b26:	460a      	mov	r2, r1
 8007b28:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8007b32:	1e5a      	subs	r2, r3, #1
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1b4      	bne.n	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2208      	movs	r2, #8
 8007b48:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8007b4c:	e7af      	b.n	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d128      	bne.n	8007baa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2bff      	cmp	r3, #255	; 0xff
 8007b5c:	d10d      	bne.n	8007b7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007b64:	1c5a      	adds	r2, r3, #1
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f103 0214 	add.w	r2, r3, #20
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8007b78:	e799      	b.n	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fe fb86 	bl	8006290 <_ZN13STM32Hardware4timeEv>
 8007b84:	4602      	mov	r2, r0
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	bf8c      	ite	hi
 8007b92:	2301      	movhi	r3, #1
 8007b94:	2300      	movls	r3, #0
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d088      	beq.n	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8007ba4:	f06f 0301 	mvn.w	r3, #1
 8007ba8:	e133      	b.n	8007e12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
      else if (mode_ == MODE_PROTOCOL_VER)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d11b      	bne.n	8007bec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18a>
        if (data == PROTOCOL_VER)
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2bfe      	cmp	r3, #254	; 0xfe
 8007bb8:	d107      	bne.n	8007bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007bc0:	1c5a      	adds	r2, r3, #1
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8007bc8:	e771      	b.n	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8007bd8:	f083 0301 	eor.w	r3, r3, #1
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f43f af65 	beq.w	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f918 	bl	8007e1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8007bea:	e760      	b.n	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d113      	bne.n	8007c1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1bc>
        bytes_ = data;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007c0c:	1c5a      	adds	r2, r3, #1
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8007c1c:	e747      	b.n	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007c24:	2b03      	cmp	r3, #3
 8007c26:	d110      	bne.n	8007c4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e8>
        bytes_ += data << 8;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	021b      	lsls	r3, r3, #8
 8007c32:	441a      	add	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007c40:	1c5a      	adds	r2, r3, #1
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8007c48:	e731      	b.n	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007c50:	2b04      	cmp	r3, #4
 8007c52:	d116      	bne.n	8007c82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x220>
        if ((checksum_ % 256) == 255)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8007c5a:	425a      	negs	r2, r3
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	b2d2      	uxtb	r2, r2
 8007c60:	bf58      	it	pl
 8007c62:	4253      	negpl	r3, r2
 8007c64:	2bff      	cmp	r3, #255	; 0xff
 8007c66:	d107      	bne.n	8007c78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x216>
          mode_++;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8007c76:	e71a      	b.n	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8007c80:	e715      	b.n	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007c88:	2b05      	cmp	r3, #5
 8007c8a:	d10f      	bne.n	8007cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
        topic_ = data;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007c9a:	1c5a      	adds	r2, r3, #1
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8007caa:	e700      	b.n	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007cb2:	2b06      	cmp	r3, #6
 8007cb4:	d117      	bne.n	8007ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x284>
        topic_ += data << 8;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	021b      	lsls	r3, r3, #8
 8007cc0:	441a      	add	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2207      	movs	r2, #7
 8007ccc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f47f aee9 	bne.w	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2208      	movs	r2, #8
 8007ce0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8007ce4:	e6e3      	b.n	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8007cec:	2b08      	cmp	r3, #8
 8007cee:	f47f aede 	bne.w	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8007d00:	425a      	negs	r2, r3
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	b2d2      	uxtb	r2, r2
 8007d06:	bf58      	it	pl
 8007d08:	4253      	negpl	r3, r2
 8007d0a:	2bff      	cmp	r3, #255	; 0xff
 8007d0c:	f47f aecf 	bne.w	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d110      	bne.n	8007d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2da>
            requestSyncTime();
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f87d 	bl	8007e1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f898 	bl	8007e56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8007d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d3a:	e06a      	b.n	8007e12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b0>
          else if (topic_ == TopicInfo::ID_TIME)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007d42:	2b0a      	cmp	r3, #10
 8007d44:	d107      	bne.n	8007d56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f4>
            syncTime(message_in);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f960 	bl	8008014 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8007d54:	e6ab      	b.n	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007d5c:	2b06      	cmp	r3, #6
 8007d5e:	d10e      	bne.n	8007d7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x31c>
            req_param_resp.deserialize(message_in);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4610      	mov	r0, r2
 8007d70:	f7fd ffad 	bl	8005cce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8007d7c:	e697      	b.n	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007d84:	2b0b      	cmp	r3, #11
 8007d86:	d104      	bne.n	8007d92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x330>
            configured_ = false;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8007d90:	e68d      	b.n	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007d98:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f43f ae81 	beq.w	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007db2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007dbc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8007dc6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8007dde:	4611      	mov	r1, r2
 8007de0:	4798      	blx	r3
    while (true)
 8007de2:	e664      	b.n	8007aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8007de4:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00f      	beq.n	8007e10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d906      	bls.n	8007e10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ae>
      requestSyncTime();
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f809 	bl	8007e1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8007e10:	2300      	movs	r3, #0
  }
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b086      	sub	sp, #24
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8007e22:	f107 030c 	add.w	r3, r7, #12
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fd fab8 	bl	800539c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f107 020c 	add.w	r2, r7, #12
 8007e36:	210a      	movs	r1, #10
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	4798      	blx	r3
    rt_time = hardware_.time();
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3304      	adds	r3, #4
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fe fa25 	bl	8006290 <_ZN13STM32Hardware4timeEv>
 8007e46:	4602      	mov	r2, r0
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8007e4e:	bf00      	nop
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8007e56:	b590      	push	{r4, r7, lr}
 8007e58:	b08b      	sub	sp, #44	; 0x2c
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8007e5e:	f107 030c 	add.w	r3, r7, #12
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fd fb8a 	bl	800557c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8007e68:	2300      	movs	r3, #0
 8007e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	2b18      	cmp	r3, #24
 8007e70:	dc63      	bgt.n	8007f3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	4413      	add	r3, r2
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d056      	beq.n	8007f32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	6859      	ldr	r1, [r3, #4]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3308      	adds	r3, #8
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4608      	mov	r0, r1
 8007ed2:	4798      	blx	r3
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	6859      	ldr	r1, [r3, #4]
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	330c      	adds	r3, #12
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4608      	mov	r0, r1
 8007f00:	4798      	blx	r3
 8007f02:	4603      	mov	r3, r0
 8007f04:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8007f06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f0a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681c      	ldr	r4, [r3, #0]
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f16:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fe f88c 	bl	800603e <_ZN3ros9Publisher15getEndpointTypeEv>
 8007f26:	4601      	mov	r1, r0
 8007f28:	f107 030c 	add.w	r3, r7, #12
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8007f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f34:	3301      	adds	r3, #1
 8007f36:	627b      	str	r3, [r7, #36]	; 0x24
 8007f38:	e798      	b.n	8007e6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	2b18      	cmp	r3, #24
 8007f42:	dc5f      	bgt.n	8008004 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f48:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d053      	beq.n	8007ffc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f58:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f6a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f7a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007f7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f86:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3308      	adds	r3, #8
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4608      	mov	r0, r1
 8007f96:	4798      	blx	r3
 8007f98:	4603      	mov	r3, r0
 8007f9a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fa0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007fa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fac:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	330c      	adds	r3, #12
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4608      	mov	r0, r1
 8007fbc:	4798      	blx	r3
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8007fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fc6:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681c      	ldr	r4, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fd2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007fd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fde:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3304      	adds	r3, #4
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4608      	mov	r0, r1
 8007fee:	4798      	blx	r3
 8007ff0:	4601      	mov	r1, r0
 8007ff2:	f107 030c 	add.w	r3, r7, #12
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	3301      	adds	r3, #1
 8008000:	627b      	str	r3, [r7, #36]	; 0x24
 8008002:	e79c      	b.n	8007f3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 800800c:	bf00      	nop
 800800e:	372c      	adds	r7, #44	; 0x2c
 8008010:	46bd      	mov	sp, r7
 8008012:	bd90      	pop	{r4, r7, pc}

08008014 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800801e:	f107 0308 	add.w	r3, r7, #8
 8008022:	4618      	mov	r0, r3
 8008024:	f7fd f9ba 	bl	800539c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	3304      	adds	r3, #4
 800802c:	4618      	mov	r0, r3
 800802e:	f7fe f92f 	bl	8006290 <_ZN13STM32Hardware4timeEv>
 8008032:	4602      	mov	r2, r0
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800803e:	f107 0308 	add.w	r3, r7, #8
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	4618      	mov	r0, r3
 8008046:	f7fd fa19 	bl	800547c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	4915      	ldr	r1, [pc, #84]	; (80080a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8008050:	fba1 1303 	umull	r1, r3, r1, r3
 8008054:	099b      	lsrs	r3, r3, #6
 8008056:	4413      	add	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800805a:	6939      	ldr	r1, [r7, #16]
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	4b11      	ldr	r3, [pc, #68]	; (80080a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8008060:	fba3 0302 	umull	r0, r3, r3, r2
 8008064:	099b      	lsrs	r3, r3, #6
 8008066:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800806a:	fb00 f303 	mul.w	r3, r0, r3
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	4a0d      	ldr	r2, [pc, #52]	; (80080a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8008072:	fb02 f303 	mul.w	r3, r2, r3
 8008076:	440b      	add	r3, r1
 8008078:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800807a:	f107 0308 	add.w	r3, r7, #8
 800807e:	3304      	adds	r3, #4
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f8a4 	bl	80081d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	3304      	adds	r3, #4
 800808c:	4618      	mov	r0, r3
 800808e:	f7fe f8ff 	bl	8006290 <_ZN13STM32Hardware4timeEv>
 8008092:	4602      	mov	r2, r0
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800809a:	bf00      	nop
 800809c:	3718      	adds	r7, #24
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	10624dd3 	.word	0x10624dd3
 80080a8:	000f4240 	.word	0x000f4240

080080ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2b63      	cmp	r3, #99	; 0x63
 80080bc:	dd09      	ble.n	80080d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80080c4:	f083 0301 	eor.w	r3, r3, #1
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d001      	beq.n	80080d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80080ce:	2300      	movs	r3, #0
 80080d0:	e077      	b.n	80081c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80080de:	3207      	adds	r2, #7
 80080e0:	4611      	mov	r1, r2
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	4798      	blx	r3
 80080e6:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	22ff      	movs	r2, #255	; 0xff
 80080ec:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	22fe      	movs	r2, #254	; 0xfe
 80080f4:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	b29b      	uxth	r3, r3
 8008106:	121b      	asrs	r3, r3, #8
 8008108:	b2da      	uxtb	r2, r3
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 800811c:	4413      	add	r3, r2
 800811e:	b2db      	uxtb	r3, r3
 8008120:	43db      	mvns	r3, r3
 8008122:	b2da      	uxtb	r2, r3
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	b2da      	uxtb	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	b21b      	sxth	r3, r3
 8008138:	121b      	asrs	r3, r3, #8
 800813a:	b2da      	uxtb	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8008146:	2305      	movs	r3, #5
 8008148:	61bb      	str	r3, [r7, #24]
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	3307      	adds	r3, #7
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	429a      	cmp	r2, r3
 8008152:	da0d      	bge.n	8008170 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	4413      	add	r3, r2
 800815a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	461a      	mov	r2, r3
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	4413      	add	r3, r2
 8008166:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	3301      	adds	r3, #1
 800816c:	61bb      	str	r3, [r7, #24]
 800816e:	e7ec      	b.n	800814a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	3307      	adds	r3, #7
 8008174:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	425a      	negs	r2, r3
 800817a:	b2db      	uxtb	r3, r3
 800817c:	b2d2      	uxtb	r2, r2
 800817e:	bf58      	it	pl
 8008180:	4253      	negpl	r3, r2
 8008182:	b2da      	uxtb	r2, r3
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	1c59      	adds	r1, r3, #1
 8008188:	6179      	str	r1, [r7, #20]
 800818a:	43d2      	mvns	r2, r2
 800818c:	b2d1      	uxtb	r1, r2
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	4413      	add	r3, r2
 8008192:	460a      	mov	r2, r1
 8008194:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800819e:	dc0a      	bgt.n	80081b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	1d18      	adds	r0, r3, #4
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	4619      	mov	r1, r3
 80081ae:	f7fe f829 	bl	8006204 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	e005      	b.n	80081c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80081b6:	4905      	ldr	r1, [pc, #20]	; (80081cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f000 f849 	bl	8008250 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80081be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 80081c2:	4618      	mov	r0, r3
 80081c4:	3720      	adds	r7, #32
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	08008f9c 	.word	0x08008f9c

080081d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	3304      	adds	r3, #4
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fe f856 	bl	8006290 <_ZN13STM32Hardware4timeEv>
 80081e4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	4915      	ldr	r1, [pc, #84]	; (8008244 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80081ee:	fba1 1303 	umull	r1, r3, r1, r3
 80081f2:	099b      	lsrs	r3, r3, #6
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	1e5a      	subs	r2, r3, #1
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	6859      	ldr	r1, [r3, #4]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	4b0f      	ldr	r3, [pc, #60]	; (8008244 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8008206:	fba3 0302 	umull	r0, r3, r3, r2
 800820a:	099b      	lsrs	r3, r3, #6
 800820c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008210:	fb00 f303 	mul.w	r3, r0, r3
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	4a0c      	ldr	r2, [pc, #48]	; (8008248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8008218:	fb02 f303 	mul.w	r3, r2, r3
 800821c:	1aca      	subs	r2, r1, r3
 800821e:	4b0b      	ldr	r3, [pc, #44]	; (800824c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8008220:	4413      	add	r3, r2
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8008234:	4619      	mov	r1, r3
 8008236:	4610      	mov	r0, r2
 8008238:	f7fc f9d4 	bl	80045e4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800823c:	bf00      	nop
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	10624dd3 	.word	0x10624dd3
 8008248:	000f4240 	.word	0x000f4240
 800824c:	3b9aca00 	.word	0x3b9aca00

08008250 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	2103      	movs	r1, #3
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f804 	bl	800826c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8008264:	bf00      	nop
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800826c:	b580      	push	{r7, lr}
 800826e:	b088      	sub	sp, #32
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	460b      	mov	r3, r1
 8008276:	607a      	str	r2, [r7, #4]
 8008278:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800827a:	f107 0314 	add.w	r3, r7, #20
 800827e:	4618      	mov	r0, r3
 8008280:	f7fd fb40 	bl	8005904 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8008284:	7afb      	ldrb	r3, [r7, #11]
 8008286:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f107 0214 	add.w	r2, r7, #20
 8008296:	2107      	movs	r1, #7
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	4798      	blx	r3
  }
 800829c:	bf00      	nop
 800829e:	3720      	adds	r7, #32
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <_Z41__static_initialization_and_destruction_0ii>:
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d11c      	bne.n	80082ee <_Z41__static_initialization_and_destruction_0ii+0x4a>
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d117      	bne.n	80082ee <_Z41__static_initialization_and_destruction_0ii+0x4a>
ros::NodeHandle nh;
 80082be:	480e      	ldr	r0, [pc, #56]	; (80082f8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80082c0:	f7ff fa48 	bl	8007754 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Float64MultiArray enc;
 80082c4:	480d      	ldr	r0, [pc, #52]	; (80082fc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80082c6:	f7fe fa73 	bl	80067b0 <_ZN8std_msgs17Float64MultiArrayC1Ev>
ros::Subscriber<std_msgs::Int64> sub("pwm", &callback);
 80082ca:	2301      	movs	r3, #1
 80082cc:	4a0c      	ldr	r2, [pc, #48]	; (8008300 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80082ce:	490d      	ldr	r1, [pc, #52]	; (8008304 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80082d0:	480d      	ldr	r0, [pc, #52]	; (8008308 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80082d2:	f7ff facf 	bl	8007874 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<chjk::unit_cmd> sub_cmd("left_rear", &get_cmd);
 80082d6:	2301      	movs	r3, #1
 80082d8:	4a0c      	ldr	r2, [pc, #48]	; (800830c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80082da:	490d      	ldr	r1, [pc, #52]	; (8008310 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80082dc:	480d      	ldr	r0, [pc, #52]	; (8008314 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80082de:	f7ff faed 	bl	80078bc <_ZN3ros10SubscriberIN4chjk8unit_cmdEvEC1EPKcPFvRKS2_Ei>
ros::Publisher enc_pub("enc_left_rear", &enc);
 80082e2:	2300      	movs	r3, #0
 80082e4:	4a05      	ldr	r2, [pc, #20]	; (80082fc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80082e6:	490c      	ldr	r1, [pc, #48]	; (8008318 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80082e8:	480c      	ldr	r0, [pc, #48]	; (800831c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80082ea:	f7fd fe7d 	bl	8005fe8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80082ee:	bf00      	nop
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	200000a0 	.word	0x200000a0
 80082fc:	200009e0 	.word	0x200009e0
 8008300:	080075c5 	.word	0x080075c5
 8008304:	08008fd8 	.word	0x08008fd8
 8008308:	20000a30 	.word	0x20000a30
 800830c:	080075e9 	.word	0x080075e9
 8008310:	08008fdc 	.word	0x08008fdc
 8008314:	20000a58 	.word	0x20000a58
 8008318:	08008fe8 	.word	0x08008fe8
 800831c:	20000a88 	.word	0x20000a88

08008320 <_ZN3ros10SubscriberIN4chjk8unit_cmdEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3310      	adds	r3, #16
 800832e:	6839      	ldr	r1, [r7, #0]
 8008330:	4618      	mov	r0, r3
 8008332:	f7fe ff10 	bl	8007156 <_ZN4chjk8unit_cmd11deserializeEPh>
    this->cb_(msg);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	3210      	adds	r2, #16
 800833e:	4610      	mov	r0, r2
 8008340:	4798      	blx	r3
  }
 8008342:	bf00      	nop
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <_ZN3ros10SubscriberIN4chjk8unit_cmdEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800834a:	b480      	push	{r7}
 800834c:	b083      	sub	sp, #12
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  }
 8008356:	4618      	mov	r0, r3
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <_ZN3ros10SubscriberIN4chjk8unit_cmdEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8008362:	b580      	push	{r7, lr}
 8008364:	b082      	sub	sp, #8
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	3310      	adds	r3, #16
 800836e:	4618      	mov	r0, r3
 8008370:	f7ff f898 	bl	80074a4 <_ZN4chjk8unit_cmd7getTypeEv>
 8008374:	4603      	mov	r3, r0
  }
 8008376:	4618      	mov	r0, r3
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <_ZN3ros10SubscriberIN4chjk8unit_cmdEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800837e:	b580      	push	{r7, lr}
 8008380:	b082      	sub	sp, #8
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	3310      	adds	r3, #16
 800838a:	4618      	mov	r0, r3
 800838c:	f7ff f898 	bl	80074c0 <_ZN4chjk8unit_cmd6getMD5Ev>
 8008390:	4603      	mov	r3, r0
  }
 8008392:	4618      	mov	r0, r3
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <_ZN3ros10SubscriberIN8std_msgs5Int64EvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 800839a:	b580      	push	{r7, lr}
 800839c:	b082      	sub	sp, #8
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	3310      	adds	r3, #16
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe fcca 	bl	8006d44 <_ZN8std_msgs5Int6411deserializeEPh>
    this->cb_(msg);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a1b      	ldr	r3, [r3, #32]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	3210      	adds	r2, #16
 80083b8:	4610      	mov	r0, r2
 80083ba:	4798      	blx	r3
  }
 80083bc:	bf00      	nop
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
    return endpoint_;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
 80083d0:	4618      	mov	r0, r3
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <_ZN3ros10SubscriberIN8std_msgs5Int64EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	3310      	adds	r3, #16
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fe fd7d 	bl	8006ee8 <_ZN8std_msgs5Int647getTypeEv>
 80083ee:	4603      	mov	r3, r0
  }
 80083f0:	4618      	mov	r0, r3
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	3310      	adds	r3, #16
 8008404:	4618      	mov	r0, r3
 8008406:	f7fe fd7d 	bl	8006f04 <_ZN8std_msgs5Int646getMD5Ev>
 800840a:	4603      	mov	r3, r0
  }
 800840c:	4618      	mov	r0, r3
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
    return configured_;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8008422:	4618      	mov	r0, r3
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <_GLOBAL__sub_I_nh>:
 800842e:	b580      	push	{r7, lr}
 8008430:	af00      	add	r7, sp, #0
 8008432:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008436:	2001      	movs	r0, #1
 8008438:	f7ff ff34 	bl	80082a4 <_Z41__static_initialization_and_destruction_0ii>
 800843c:	bd80      	pop	{r7, pc}
	...

08008440 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008446:	2300      	movs	r3, #0
 8008448:	607b      	str	r3, [r7, #4]
 800844a:	4b10      	ldr	r3, [pc, #64]	; (800848c <HAL_MspInit+0x4c>)
 800844c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800844e:	4a0f      	ldr	r2, [pc, #60]	; (800848c <HAL_MspInit+0x4c>)
 8008450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008454:	6453      	str	r3, [r2, #68]	; 0x44
 8008456:	4b0d      	ldr	r3, [pc, #52]	; (800848c <HAL_MspInit+0x4c>)
 8008458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800845a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800845e:	607b      	str	r3, [r7, #4]
 8008460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008462:	2300      	movs	r3, #0
 8008464:	603b      	str	r3, [r7, #0]
 8008466:	4b09      	ldr	r3, [pc, #36]	; (800848c <HAL_MspInit+0x4c>)
 8008468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846a:	4a08      	ldr	r2, [pc, #32]	; (800848c <HAL_MspInit+0x4c>)
 800846c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008470:	6413      	str	r3, [r2, #64]	; 0x40
 8008472:	4b06      	ldr	r3, [pc, #24]	; (800848c <HAL_MspInit+0x4c>)
 8008474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800847a:	603b      	str	r3, [r7, #0]
 800847c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800847e:	bf00      	nop
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	40023800 	.word	0x40023800

08008490 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a0b      	ldr	r2, [pc, #44]	; (80084cc <HAL_TIM_PWM_MspInit+0x3c>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d10d      	bne.n	80084be <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80084a2:	2300      	movs	r3, #0
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	4b0a      	ldr	r3, [pc, #40]	; (80084d0 <HAL_TIM_PWM_MspInit+0x40>)
 80084a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084aa:	4a09      	ldr	r2, [pc, #36]	; (80084d0 <HAL_TIM_PWM_MspInit+0x40>)
 80084ac:	f043 0301 	orr.w	r3, r3, #1
 80084b0:	6453      	str	r3, [r2, #68]	; 0x44
 80084b2:	4b07      	ldr	r3, [pc, #28]	; (80084d0 <HAL_TIM_PWM_MspInit+0x40>)
 80084b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b6:	f003 0301 	and.w	r3, r3, #1
 80084ba:	60fb      	str	r3, [r7, #12]
 80084bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80084be:	bf00      	nop
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	40010000 	.word	0x40010000
 80084d0:	40023800 	.word	0x40023800

080084d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08c      	sub	sp, #48	; 0x30
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084dc:	f107 031c 	add.w	r3, r7, #28
 80084e0:	2200      	movs	r2, #0
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	605a      	str	r2, [r3, #4]
 80084e6:	609a      	str	r2, [r3, #8]
 80084e8:	60da      	str	r2, [r3, #12]
 80084ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084f4:	d134      	bne.n	8008560 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80084f6:	2300      	movs	r3, #0
 80084f8:	61bb      	str	r3, [r7, #24]
 80084fa:	4b38      	ldr	r3, [pc, #224]	; (80085dc <HAL_TIM_Encoder_MspInit+0x108>)
 80084fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fe:	4a37      	ldr	r2, [pc, #220]	; (80085dc <HAL_TIM_Encoder_MspInit+0x108>)
 8008500:	f043 0301 	orr.w	r3, r3, #1
 8008504:	6413      	str	r3, [r2, #64]	; 0x40
 8008506:	4b35      	ldr	r3, [pc, #212]	; (80085dc <HAL_TIM_Encoder_MspInit+0x108>)
 8008508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	61bb      	str	r3, [r7, #24]
 8008510:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008512:	2300      	movs	r3, #0
 8008514:	617b      	str	r3, [r7, #20]
 8008516:	4b31      	ldr	r3, [pc, #196]	; (80085dc <HAL_TIM_Encoder_MspInit+0x108>)
 8008518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851a:	4a30      	ldr	r2, [pc, #192]	; (80085dc <HAL_TIM_Encoder_MspInit+0x108>)
 800851c:	f043 0301 	orr.w	r3, r3, #1
 8008520:	6313      	str	r3, [r2, #48]	; 0x30
 8008522:	4b2e      	ldr	r3, [pc, #184]	; (80085dc <HAL_TIM_Encoder_MspInit+0x108>)
 8008524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	617b      	str	r3, [r7, #20]
 800852c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800852e:	2303      	movs	r3, #3
 8008530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008532:	2302      	movs	r3, #2
 8008534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008536:	2300      	movs	r3, #0
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800853a:	2300      	movs	r3, #0
 800853c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800853e:	2301      	movs	r3, #1
 8008540:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008542:	f107 031c 	add.w	r3, r7, #28
 8008546:	4619      	mov	r1, r3
 8008548:	4825      	ldr	r0, [pc, #148]	; (80085e0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800854a:	f7f9 f999 	bl	8001880 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800854e:	2200      	movs	r2, #0
 8008550:	2100      	movs	r1, #0
 8008552:	201c      	movs	r0, #28
 8008554:	f7f8 fdcd 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008558:	201c      	movs	r0, #28
 800855a:	f7f8 fde6 	bl	800112a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800855e:	e038      	b.n	80085d2 <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM3)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a1f      	ldr	r2, [pc, #124]	; (80085e4 <HAL_TIM_Encoder_MspInit+0x110>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d133      	bne.n	80085d2 <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800856a:	2300      	movs	r3, #0
 800856c:	613b      	str	r3, [r7, #16]
 800856e:	4b1b      	ldr	r3, [pc, #108]	; (80085dc <HAL_TIM_Encoder_MspInit+0x108>)
 8008570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008572:	4a1a      	ldr	r2, [pc, #104]	; (80085dc <HAL_TIM_Encoder_MspInit+0x108>)
 8008574:	f043 0302 	orr.w	r3, r3, #2
 8008578:	6413      	str	r3, [r2, #64]	; 0x40
 800857a:	4b18      	ldr	r3, [pc, #96]	; (80085dc <HAL_TIM_Encoder_MspInit+0x108>)
 800857c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857e:	f003 0302 	and.w	r3, r3, #2
 8008582:	613b      	str	r3, [r7, #16]
 8008584:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008586:	2300      	movs	r3, #0
 8008588:	60fb      	str	r3, [r7, #12]
 800858a:	4b14      	ldr	r3, [pc, #80]	; (80085dc <HAL_TIM_Encoder_MspInit+0x108>)
 800858c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858e:	4a13      	ldr	r2, [pc, #76]	; (80085dc <HAL_TIM_Encoder_MspInit+0x108>)
 8008590:	f043 0301 	orr.w	r3, r3, #1
 8008594:	6313      	str	r3, [r2, #48]	; 0x30
 8008596:	4b11      	ldr	r3, [pc, #68]	; (80085dc <HAL_TIM_Encoder_MspInit+0x108>)
 8008598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	60fb      	str	r3, [r7, #12]
 80085a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80085a2:	23c0      	movs	r3, #192	; 0xc0
 80085a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085a6:	2302      	movs	r3, #2
 80085a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085aa:	2300      	movs	r3, #0
 80085ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085ae:	2300      	movs	r3, #0
 80085b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80085b2:	2302      	movs	r3, #2
 80085b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085b6:	f107 031c 	add.w	r3, r7, #28
 80085ba:	4619      	mov	r1, r3
 80085bc:	4808      	ldr	r0, [pc, #32]	; (80085e0 <HAL_TIM_Encoder_MspInit+0x10c>)
 80085be:	f7f9 f95f 	bl	8001880 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80085c2:	2200      	movs	r2, #0
 80085c4:	2100      	movs	r1, #0
 80085c6:	201d      	movs	r0, #29
 80085c8:	f7f8 fd93 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80085cc:	201d      	movs	r0, #29
 80085ce:	f7f8 fdac 	bl	800112a <HAL_NVIC_EnableIRQ>
}
 80085d2:	bf00      	nop
 80085d4:	3730      	adds	r7, #48	; 0x30
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	40023800 	.word	0x40023800
 80085e0:	40020000 	.word	0x40020000
 80085e4:	40000400 	.word	0x40000400

080085e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a1c      	ldr	r2, [pc, #112]	; (8008668 <HAL_TIM_Base_MspInit+0x80>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d116      	bne.n	8008628 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80085fa:	2300      	movs	r3, #0
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	4b1b      	ldr	r3, [pc, #108]	; (800866c <HAL_TIM_Base_MspInit+0x84>)
 8008600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008602:	4a1a      	ldr	r2, [pc, #104]	; (800866c <HAL_TIM_Base_MspInit+0x84>)
 8008604:	f043 0304 	orr.w	r3, r3, #4
 8008608:	6413      	str	r3, [r2, #64]	; 0x40
 800860a:	4b18      	ldr	r3, [pc, #96]	; (800866c <HAL_TIM_Base_MspInit+0x84>)
 800860c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860e:	f003 0304 	and.w	r3, r3, #4
 8008612:	60fb      	str	r3, [r7, #12]
 8008614:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8008616:	2200      	movs	r2, #0
 8008618:	2100      	movs	r1, #0
 800861a:	201e      	movs	r0, #30
 800861c:	f7f8 fd69 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8008620:	201e      	movs	r0, #30
 8008622:	f7f8 fd82 	bl	800112a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8008626:	e01a      	b.n	800865e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM5)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a10      	ldr	r2, [pc, #64]	; (8008670 <HAL_TIM_Base_MspInit+0x88>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d115      	bne.n	800865e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008632:	2300      	movs	r3, #0
 8008634:	60bb      	str	r3, [r7, #8]
 8008636:	4b0d      	ldr	r3, [pc, #52]	; (800866c <HAL_TIM_Base_MspInit+0x84>)
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	4a0c      	ldr	r2, [pc, #48]	; (800866c <HAL_TIM_Base_MspInit+0x84>)
 800863c:	f043 0308 	orr.w	r3, r3, #8
 8008640:	6413      	str	r3, [r2, #64]	; 0x40
 8008642:	4b0a      	ldr	r3, [pc, #40]	; (800866c <HAL_TIM_Base_MspInit+0x84>)
 8008644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008646:	f003 0308 	and.w	r3, r3, #8
 800864a:	60bb      	str	r3, [r7, #8]
 800864c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800864e:	2200      	movs	r2, #0
 8008650:	2100      	movs	r1, #0
 8008652:	2032      	movs	r0, #50	; 0x32
 8008654:	f7f8 fd4d 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8008658:	2032      	movs	r0, #50	; 0x32
 800865a:	f7f8 fd66 	bl	800112a <HAL_NVIC_EnableIRQ>
}
 800865e:	bf00      	nop
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	40000800 	.word	0x40000800
 800866c:	40023800 	.word	0x40023800
 8008670:	40000c00 	.word	0x40000c00

08008674 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b088      	sub	sp, #32
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800867c:	f107 030c 	add.w	r3, r7, #12
 8008680:	2200      	movs	r2, #0
 8008682:	601a      	str	r2, [r3, #0]
 8008684:	605a      	str	r2, [r3, #4]
 8008686:	609a      	str	r2, [r3, #8]
 8008688:	60da      	str	r2, [r3, #12]
 800868a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a12      	ldr	r2, [pc, #72]	; (80086dc <HAL_TIM_MspPostInit+0x68>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d11e      	bne.n	80086d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008696:	2300      	movs	r3, #0
 8008698:	60bb      	str	r3, [r7, #8]
 800869a:	4b11      	ldr	r3, [pc, #68]	; (80086e0 <HAL_TIM_MspPostInit+0x6c>)
 800869c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869e:	4a10      	ldr	r2, [pc, #64]	; (80086e0 <HAL_TIM_MspPostInit+0x6c>)
 80086a0:	f043 0301 	orr.w	r3, r3, #1
 80086a4:	6313      	str	r3, [r2, #48]	; 0x30
 80086a6:	4b0e      	ldr	r3, [pc, #56]	; (80086e0 <HAL_TIM_MspPostInit+0x6c>)
 80086a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	60bb      	str	r3, [r7, #8]
 80086b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80086b2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80086b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086b8:	2302      	movs	r3, #2
 80086ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086bc:	2300      	movs	r3, #0
 80086be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086c0:	2300      	movs	r3, #0
 80086c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80086c4:	2301      	movs	r3, #1
 80086c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086c8:	f107 030c 	add.w	r3, r7, #12
 80086cc:	4619      	mov	r1, r3
 80086ce:	4805      	ldr	r0, [pc, #20]	; (80086e4 <HAL_TIM_MspPostInit+0x70>)
 80086d0:	f7f9 f8d6 	bl	8001880 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80086d4:	bf00      	nop
 80086d6:	3720      	adds	r7, #32
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	40010000 	.word	0x40010000
 80086e0:	40023800 	.word	0x40023800
 80086e4:	40020000 	.word	0x40020000

080086e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b08a      	sub	sp, #40	; 0x28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086f0:	f107 0314 	add.w	r3, r7, #20
 80086f4:	2200      	movs	r2, #0
 80086f6:	601a      	str	r2, [r3, #0]
 80086f8:	605a      	str	r2, [r3, #4]
 80086fa:	609a      	str	r2, [r3, #8]
 80086fc:	60da      	str	r2, [r3, #12]
 80086fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a4d      	ldr	r2, [pc, #308]	; (800883c <HAL_UART_MspInit+0x154>)
 8008706:	4293      	cmp	r3, r2
 8008708:	f040 8093 	bne.w	8008832 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800870c:	2300      	movs	r3, #0
 800870e:	613b      	str	r3, [r7, #16]
 8008710:	4b4b      	ldr	r3, [pc, #300]	; (8008840 <HAL_UART_MspInit+0x158>)
 8008712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008714:	4a4a      	ldr	r2, [pc, #296]	; (8008840 <HAL_UART_MspInit+0x158>)
 8008716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800871a:	6413      	str	r3, [r2, #64]	; 0x40
 800871c:	4b48      	ldr	r3, [pc, #288]	; (8008840 <HAL_UART_MspInit+0x158>)
 800871e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008724:	613b      	str	r3, [r7, #16]
 8008726:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008728:	2300      	movs	r3, #0
 800872a:	60fb      	str	r3, [r7, #12]
 800872c:	4b44      	ldr	r3, [pc, #272]	; (8008840 <HAL_UART_MspInit+0x158>)
 800872e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008730:	4a43      	ldr	r2, [pc, #268]	; (8008840 <HAL_UART_MspInit+0x158>)
 8008732:	f043 0301 	orr.w	r3, r3, #1
 8008736:	6313      	str	r3, [r2, #48]	; 0x30
 8008738:	4b41      	ldr	r3, [pc, #260]	; (8008840 <HAL_UART_MspInit+0x158>)
 800873a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	60fb      	str	r3, [r7, #12]
 8008742:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008744:	230c      	movs	r3, #12
 8008746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008748:	2302      	movs	r3, #2
 800874a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800874c:	2301      	movs	r3, #1
 800874e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008750:	2303      	movs	r3, #3
 8008752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008754:	2307      	movs	r3, #7
 8008756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008758:	f107 0314 	add.w	r3, r7, #20
 800875c:	4619      	mov	r1, r3
 800875e:	4839      	ldr	r0, [pc, #228]	; (8008844 <HAL_UART_MspInit+0x15c>)
 8008760:	f7f9 f88e 	bl	8001880 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8008764:	4b38      	ldr	r3, [pc, #224]	; (8008848 <HAL_UART_MspInit+0x160>)
 8008766:	4a39      	ldr	r2, [pc, #228]	; (800884c <HAL_UART_MspInit+0x164>)
 8008768:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800876a:	4b37      	ldr	r3, [pc, #220]	; (8008848 <HAL_UART_MspInit+0x160>)
 800876c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008770:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008772:	4b35      	ldr	r3, [pc, #212]	; (8008848 <HAL_UART_MspInit+0x160>)
 8008774:	2200      	movs	r2, #0
 8008776:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008778:	4b33      	ldr	r3, [pc, #204]	; (8008848 <HAL_UART_MspInit+0x160>)
 800877a:	2200      	movs	r2, #0
 800877c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800877e:	4b32      	ldr	r3, [pc, #200]	; (8008848 <HAL_UART_MspInit+0x160>)
 8008780:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008784:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008786:	4b30      	ldr	r3, [pc, #192]	; (8008848 <HAL_UART_MspInit+0x160>)
 8008788:	2200      	movs	r2, #0
 800878a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800878c:	4b2e      	ldr	r3, [pc, #184]	; (8008848 <HAL_UART_MspInit+0x160>)
 800878e:	2200      	movs	r2, #0
 8008790:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8008792:	4b2d      	ldr	r3, [pc, #180]	; (8008848 <HAL_UART_MspInit+0x160>)
 8008794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008798:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800879a:	4b2b      	ldr	r3, [pc, #172]	; (8008848 <HAL_UART_MspInit+0x160>)
 800879c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80087a0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80087a2:	4b29      	ldr	r3, [pc, #164]	; (8008848 <HAL_UART_MspInit+0x160>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80087a8:	4827      	ldr	r0, [pc, #156]	; (8008848 <HAL_UART_MspInit+0x160>)
 80087aa:	f7f8 fcd9 	bl	8001160 <HAL_DMA_Init>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80087b4:	f7fc fdca 	bl	800534c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a23      	ldr	r2, [pc, #140]	; (8008848 <HAL_UART_MspInit+0x160>)
 80087bc:	635a      	str	r2, [r3, #52]	; 0x34
 80087be:	4a22      	ldr	r2, [pc, #136]	; (8008848 <HAL_UART_MspInit+0x160>)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80087c4:	4b22      	ldr	r3, [pc, #136]	; (8008850 <HAL_UART_MspInit+0x168>)
 80087c6:	4a23      	ldr	r2, [pc, #140]	; (8008854 <HAL_UART_MspInit+0x16c>)
 80087c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80087ca:	4b21      	ldr	r3, [pc, #132]	; (8008850 <HAL_UART_MspInit+0x168>)
 80087cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80087d0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80087d2:	4b1f      	ldr	r3, [pc, #124]	; (8008850 <HAL_UART_MspInit+0x168>)
 80087d4:	2240      	movs	r2, #64	; 0x40
 80087d6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80087d8:	4b1d      	ldr	r3, [pc, #116]	; (8008850 <HAL_UART_MspInit+0x168>)
 80087da:	2200      	movs	r2, #0
 80087dc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80087de:	4b1c      	ldr	r3, [pc, #112]	; (8008850 <HAL_UART_MspInit+0x168>)
 80087e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80087e4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80087e6:	4b1a      	ldr	r3, [pc, #104]	; (8008850 <HAL_UART_MspInit+0x168>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80087ec:	4b18      	ldr	r3, [pc, #96]	; (8008850 <HAL_UART_MspInit+0x168>)
 80087ee:	2200      	movs	r2, #0
 80087f0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80087f2:	4b17      	ldr	r3, [pc, #92]	; (8008850 <HAL_UART_MspInit+0x168>)
 80087f4:	2200      	movs	r2, #0
 80087f6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80087f8:	4b15      	ldr	r3, [pc, #84]	; (8008850 <HAL_UART_MspInit+0x168>)
 80087fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80087fe:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008800:	4b13      	ldr	r3, [pc, #76]	; (8008850 <HAL_UART_MspInit+0x168>)
 8008802:	2200      	movs	r2, #0
 8008804:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8008806:	4812      	ldr	r0, [pc, #72]	; (8008850 <HAL_UART_MspInit+0x168>)
 8008808:	f7f8 fcaa 	bl	8001160 <HAL_DMA_Init>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8008812:	f7fc fd9b 	bl	800534c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a0d      	ldr	r2, [pc, #52]	; (8008850 <HAL_UART_MspInit+0x168>)
 800881a:	631a      	str	r2, [r3, #48]	; 0x30
 800881c:	4a0c      	ldr	r2, [pc, #48]	; (8008850 <HAL_UART_MspInit+0x168>)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008822:	2200      	movs	r2, #0
 8008824:	2100      	movs	r1, #0
 8008826:	2026      	movs	r0, #38	; 0x26
 8008828:	f7f8 fc63 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800882c:	2026      	movs	r0, #38	; 0x26
 800882e:	f7f8 fc7c 	bl	800112a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008832:	bf00      	nop
 8008834:	3728      	adds	r7, #40	; 0x28
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	40004400 	.word	0x40004400
 8008840:	40023800 	.word	0x40023800
 8008844:	40020000 	.word	0x40020000
 8008848:	20000ab8 	.word	0x20000ab8
 800884c:	40026088 	.word	0x40026088
 8008850:	20000c00 	.word	0x20000c00
 8008854:	400260a0 	.word	0x400260a0

08008858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008858:	b480      	push	{r7}
 800885a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800885c:	bf00      	nop
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr

08008866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008866:	b480      	push	{r7}
 8008868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800886a:	e7fe      	b.n	800886a <HardFault_Handler+0x4>

0800886c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800886c:	b480      	push	{r7}
 800886e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008870:	e7fe      	b.n	8008870 <MemManage_Handler+0x4>

08008872 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008872:	b480      	push	{r7}
 8008874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008876:	e7fe      	b.n	8008876 <BusFault_Handler+0x4>

08008878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008878:	b480      	push	{r7}
 800887a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800887c:	e7fe      	b.n	800887c <UsageFault_Handler+0x4>

0800887e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800887e:	b480      	push	{r7}
 8008880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008882:	bf00      	nop
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800888c:	b480      	push	{r7}
 800888e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008890:	bf00      	nop
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800889a:	b480      	push	{r7}
 800889c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800889e:	bf00      	nop
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80088ac:	f7f8 fb04 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80088b0:	bf00      	nop
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80088b8:	4802      	ldr	r0, [pc, #8]	; (80088c4 <DMA1_Stream5_IRQHandler+0x10>)
 80088ba:	f7f8 fd79 	bl	80013b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80088be:	bf00      	nop
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20000ab8 	.word	0x20000ab8

080088c8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80088cc:	4802      	ldr	r0, [pc, #8]	; (80088d8 <DMA1_Stream6_IRQHandler+0x10>)
 80088ce:	f7f8 fd6f 	bl	80013b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80088d2:	bf00      	nop
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	20000c00 	.word	0x20000c00

080088dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80088e0:	4802      	ldr	r0, [pc, #8]	; (80088ec <TIM2_IRQHandler+0x10>)
 80088e2:	f7fa f810 	bl	8002906 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80088e6:	bf00      	nop
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	20000cc0 	.word	0x20000cc0

080088f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80088f4:	4802      	ldr	r0, [pc, #8]	; (8008900 <TIM3_IRQHandler+0x10>)
 80088f6:	f7fa f806 	bl	8002906 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80088fa:	bf00      	nop
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	20000bb8 	.word	0x20000bb8

08008904 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8008908:	4802      	ldr	r0, [pc, #8]	; (8008914 <TIM4_IRQHandler+0x10>)
 800890a:	f7f9 fffc 	bl	8002906 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800890e:	bf00      	nop
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	20000b28 	.word	0x20000b28

08008918 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800891c:	4802      	ldr	r0, [pc, #8]	; (8008928 <USART2_IRQHandler+0x10>)
 800891e:	f7fa ffcd 	bl	80038bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008922:	bf00      	nop
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20000d10 	.word	0x20000d10

0800892c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */


  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8008930:	4802      	ldr	r0, [pc, #8]	; (800893c <TIM5_IRQHandler+0x10>)
 8008932:	f7f9 ffe8 	bl	8002906 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8008936:	bf00      	nop
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	20000b78 	.word	0x20000b78

08008940 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008940:	b480      	push	{r7}
 8008942:	af00      	add	r7, sp, #0
	return 1;
 8008944:	2301      	movs	r3, #1
}
 8008946:	4618      	mov	r0, r3
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <_kill>:

int _kill(int pid, int sig)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800895a:	f000 f899 	bl	8008a90 <__errno>
 800895e:	4602      	mov	r2, r0
 8008960:	2316      	movs	r3, #22
 8008962:	6013      	str	r3, [r2, #0]
	return -1;
 8008964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008968:	4618      	mov	r0, r3
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <_exit>:

void _exit (int status)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008978:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7ff ffe7 	bl	8008950 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008982:	e7fe      	b.n	8008982 <_exit+0x12>

08008984 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800898c:	4b11      	ldr	r3, [pc, #68]	; (80089d4 <_sbrk+0x50>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d102      	bne.n	800899a <_sbrk+0x16>
		heap_end = &end;
 8008994:	4b0f      	ldr	r3, [pc, #60]	; (80089d4 <_sbrk+0x50>)
 8008996:	4a10      	ldr	r2, [pc, #64]	; (80089d8 <_sbrk+0x54>)
 8008998:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800899a:	4b0e      	ldr	r3, [pc, #56]	; (80089d4 <_sbrk+0x50>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80089a0:	4b0c      	ldr	r3, [pc, #48]	; (80089d4 <_sbrk+0x50>)
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4413      	add	r3, r2
 80089a8:	466a      	mov	r2, sp
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d907      	bls.n	80089be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80089ae:	f000 f86f 	bl	8008a90 <__errno>
 80089b2:	4602      	mov	r2, r0
 80089b4:	230c      	movs	r3, #12
 80089b6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80089b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089bc:	e006      	b.n	80089cc <_sbrk+0x48>
	}

	heap_end += incr;
 80089be:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <_sbrk+0x50>)
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4413      	add	r3, r2
 80089c6:	4a03      	ldr	r2, [pc, #12]	; (80089d4 <_sbrk+0x50>)
 80089c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80089ca:	68fb      	ldr	r3, [r7, #12]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	20000a9c 	.word	0x20000a9c
 80089d8:	20000d68 	.word	0x20000d68

080089dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80089dc:	b480      	push	{r7}
 80089de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80089e0:	4b08      	ldr	r3, [pc, #32]	; (8008a04 <SystemInit+0x28>)
 80089e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089e6:	4a07      	ldr	r2, [pc, #28]	; (8008a04 <SystemInit+0x28>)
 80089e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80089f0:	4b04      	ldr	r3, [pc, #16]	; (8008a04 <SystemInit+0x28>)
 80089f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80089f6:	609a      	str	r2, [r3, #8]
#endif
}
 80089f8:	bf00      	nop
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	e000ed00 	.word	0xe000ed00

08008a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008a40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008a0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008a0e:	e003      	b.n	8008a18 <LoopCopyDataInit>

08008a10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008a10:	4b0c      	ldr	r3, [pc, #48]	; (8008a44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008a12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008a14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008a16:	3104      	adds	r1, #4

08008a18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008a18:	480b      	ldr	r0, [pc, #44]	; (8008a48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008a1a:	4b0c      	ldr	r3, [pc, #48]	; (8008a4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008a1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008a1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008a20:	d3f6      	bcc.n	8008a10 <CopyDataInit>
  ldr  r2, =_sbss
 8008a22:	4a0b      	ldr	r2, [pc, #44]	; (8008a50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008a24:	e002      	b.n	8008a2c <LoopFillZerobss>

08008a26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008a26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008a28:	f842 3b04 	str.w	r3, [r2], #4

08008a2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008a2c:	4b09      	ldr	r3, [pc, #36]	; (8008a54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008a2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008a30:	d3f9      	bcc.n	8008a26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008a32:	f7ff ffd3 	bl	80089dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008a36:	f000 f831 	bl	8008a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008a3a:	f7fb fe91 	bl	8004760 <main>
  bx  lr    
 8008a3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008a40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008a44:	080091a8 	.word	0x080091a8
  ldr  r0, =_sdata
 8008a48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008a4c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8008a50:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8008a54:	20000d64 	.word	0x20000d64

08008a58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008a58:	e7fe      	b.n	8008a58 <ADC_IRQHandler>

08008a5a <__cxa_pure_virtual>:
 8008a5a:	b508      	push	{r3, lr}
 8008a5c:	f000 f80c 	bl	8008a78 <_ZSt9terminatev>

08008a60 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008a60:	b508      	push	{r3, lr}
 8008a62:	4780      	blx	r0
 8008a64:	f000 f80d 	bl	8008a82 <abort>

08008a68 <_ZSt13get_terminatev>:
 8008a68:	4b02      	ldr	r3, [pc, #8]	; (8008a74 <_ZSt13get_terminatev+0xc>)
 8008a6a:	6818      	ldr	r0, [r3, #0]
 8008a6c:	f3bf 8f5b 	dmb	ish
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	2000000c 	.word	0x2000000c

08008a78 <_ZSt9terminatev>:
 8008a78:	b508      	push	{r3, lr}
 8008a7a:	f7ff fff5 	bl	8008a68 <_ZSt13get_terminatev>
 8008a7e:	f7ff ffef 	bl	8008a60 <_ZN10__cxxabiv111__terminateEPFvvE>

08008a82 <abort>:
 8008a82:	b508      	push	{r3, lr}
 8008a84:	2006      	movs	r0, #6
 8008a86:	f000 f931 	bl	8008cec <raise>
 8008a8a:	2001      	movs	r0, #1
 8008a8c:	f7ff ff70 	bl	8008970 <_exit>

08008a90 <__errno>:
 8008a90:	4b01      	ldr	r3, [pc, #4]	; (8008a98 <__errno+0x8>)
 8008a92:	6818      	ldr	r0, [r3, #0]
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	20000010 	.word	0x20000010

08008a9c <__libc_init_array>:
 8008a9c:	b570      	push	{r4, r5, r6, lr}
 8008a9e:	4e0d      	ldr	r6, [pc, #52]	; (8008ad4 <__libc_init_array+0x38>)
 8008aa0:	4c0d      	ldr	r4, [pc, #52]	; (8008ad8 <__libc_init_array+0x3c>)
 8008aa2:	1ba4      	subs	r4, r4, r6
 8008aa4:	10a4      	asrs	r4, r4, #2
 8008aa6:	2500      	movs	r5, #0
 8008aa8:	42a5      	cmp	r5, r4
 8008aaa:	d109      	bne.n	8008ac0 <__libc_init_array+0x24>
 8008aac:	4e0b      	ldr	r6, [pc, #44]	; (8008adc <__libc_init_array+0x40>)
 8008aae:	4c0c      	ldr	r4, [pc, #48]	; (8008ae0 <__libc_init_array+0x44>)
 8008ab0:	f000 f968 	bl	8008d84 <_init>
 8008ab4:	1ba4      	subs	r4, r4, r6
 8008ab6:	10a4      	asrs	r4, r4, #2
 8008ab8:	2500      	movs	r5, #0
 8008aba:	42a5      	cmp	r5, r4
 8008abc:	d105      	bne.n	8008aca <__libc_init_array+0x2e>
 8008abe:	bd70      	pop	{r4, r5, r6, pc}
 8008ac0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ac4:	4798      	blx	r3
 8008ac6:	3501      	adds	r5, #1
 8008ac8:	e7ee      	b.n	8008aa8 <__libc_init_array+0xc>
 8008aca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ace:	4798      	blx	r3
 8008ad0:	3501      	adds	r5, #1
 8008ad2:	e7f2      	b.n	8008aba <__libc_init_array+0x1e>
 8008ad4:	0800919c 	.word	0x0800919c
 8008ad8:	0800919c 	.word	0x0800919c
 8008adc:	0800919c 	.word	0x0800919c
 8008ae0:	080091a4 	.word	0x080091a4

08008ae4 <malloc>:
 8008ae4:	4b02      	ldr	r3, [pc, #8]	; (8008af0 <malloc+0xc>)
 8008ae6:	4601      	mov	r1, r0
 8008ae8:	6818      	ldr	r0, [r3, #0]
 8008aea:	f000 b865 	b.w	8008bb8 <_malloc_r>
 8008aee:	bf00      	nop
 8008af0:	20000010 	.word	0x20000010

08008af4 <memcpy>:
 8008af4:	b510      	push	{r4, lr}
 8008af6:	1e43      	subs	r3, r0, #1
 8008af8:	440a      	add	r2, r1
 8008afa:	4291      	cmp	r1, r2
 8008afc:	d100      	bne.n	8008b00 <memcpy+0xc>
 8008afe:	bd10      	pop	{r4, pc}
 8008b00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b08:	e7f7      	b.n	8008afa <memcpy+0x6>

08008b0a <memset>:
 8008b0a:	4402      	add	r2, r0
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d100      	bne.n	8008b14 <memset+0xa>
 8008b12:	4770      	bx	lr
 8008b14:	f803 1b01 	strb.w	r1, [r3], #1
 8008b18:	e7f9      	b.n	8008b0e <memset+0x4>
	...

08008b1c <_free_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	4605      	mov	r5, r0
 8008b20:	2900      	cmp	r1, #0
 8008b22:	d045      	beq.n	8008bb0 <_free_r+0x94>
 8008b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b28:	1f0c      	subs	r4, r1, #4
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	bfb8      	it	lt
 8008b2e:	18e4      	addlt	r4, r4, r3
 8008b30:	f000 f8f8 	bl	8008d24 <__malloc_lock>
 8008b34:	4a1f      	ldr	r2, [pc, #124]	; (8008bb4 <_free_r+0x98>)
 8008b36:	6813      	ldr	r3, [r2, #0]
 8008b38:	4610      	mov	r0, r2
 8008b3a:	b933      	cbnz	r3, 8008b4a <_free_r+0x2e>
 8008b3c:	6063      	str	r3, [r4, #4]
 8008b3e:	6014      	str	r4, [r2, #0]
 8008b40:	4628      	mov	r0, r5
 8008b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b46:	f000 b8ee 	b.w	8008d26 <__malloc_unlock>
 8008b4a:	42a3      	cmp	r3, r4
 8008b4c:	d90c      	bls.n	8008b68 <_free_r+0x4c>
 8008b4e:	6821      	ldr	r1, [r4, #0]
 8008b50:	1862      	adds	r2, r4, r1
 8008b52:	4293      	cmp	r3, r2
 8008b54:	bf04      	itt	eq
 8008b56:	681a      	ldreq	r2, [r3, #0]
 8008b58:	685b      	ldreq	r3, [r3, #4]
 8008b5a:	6063      	str	r3, [r4, #4]
 8008b5c:	bf04      	itt	eq
 8008b5e:	1852      	addeq	r2, r2, r1
 8008b60:	6022      	streq	r2, [r4, #0]
 8008b62:	6004      	str	r4, [r0, #0]
 8008b64:	e7ec      	b.n	8008b40 <_free_r+0x24>
 8008b66:	4613      	mov	r3, r2
 8008b68:	685a      	ldr	r2, [r3, #4]
 8008b6a:	b10a      	cbz	r2, 8008b70 <_free_r+0x54>
 8008b6c:	42a2      	cmp	r2, r4
 8008b6e:	d9fa      	bls.n	8008b66 <_free_r+0x4a>
 8008b70:	6819      	ldr	r1, [r3, #0]
 8008b72:	1858      	adds	r0, r3, r1
 8008b74:	42a0      	cmp	r0, r4
 8008b76:	d10b      	bne.n	8008b90 <_free_r+0x74>
 8008b78:	6820      	ldr	r0, [r4, #0]
 8008b7a:	4401      	add	r1, r0
 8008b7c:	1858      	adds	r0, r3, r1
 8008b7e:	4282      	cmp	r2, r0
 8008b80:	6019      	str	r1, [r3, #0]
 8008b82:	d1dd      	bne.n	8008b40 <_free_r+0x24>
 8008b84:	6810      	ldr	r0, [r2, #0]
 8008b86:	6852      	ldr	r2, [r2, #4]
 8008b88:	605a      	str	r2, [r3, #4]
 8008b8a:	4401      	add	r1, r0
 8008b8c:	6019      	str	r1, [r3, #0]
 8008b8e:	e7d7      	b.n	8008b40 <_free_r+0x24>
 8008b90:	d902      	bls.n	8008b98 <_free_r+0x7c>
 8008b92:	230c      	movs	r3, #12
 8008b94:	602b      	str	r3, [r5, #0]
 8008b96:	e7d3      	b.n	8008b40 <_free_r+0x24>
 8008b98:	6820      	ldr	r0, [r4, #0]
 8008b9a:	1821      	adds	r1, r4, r0
 8008b9c:	428a      	cmp	r2, r1
 8008b9e:	bf04      	itt	eq
 8008ba0:	6811      	ldreq	r1, [r2, #0]
 8008ba2:	6852      	ldreq	r2, [r2, #4]
 8008ba4:	6062      	str	r2, [r4, #4]
 8008ba6:	bf04      	itt	eq
 8008ba8:	1809      	addeq	r1, r1, r0
 8008baa:	6021      	streq	r1, [r4, #0]
 8008bac:	605c      	str	r4, [r3, #4]
 8008bae:	e7c7      	b.n	8008b40 <_free_r+0x24>
 8008bb0:	bd38      	pop	{r3, r4, r5, pc}
 8008bb2:	bf00      	nop
 8008bb4:	20000aa0 	.word	0x20000aa0

08008bb8 <_malloc_r>:
 8008bb8:	b570      	push	{r4, r5, r6, lr}
 8008bba:	1ccd      	adds	r5, r1, #3
 8008bbc:	f025 0503 	bic.w	r5, r5, #3
 8008bc0:	3508      	adds	r5, #8
 8008bc2:	2d0c      	cmp	r5, #12
 8008bc4:	bf38      	it	cc
 8008bc6:	250c      	movcc	r5, #12
 8008bc8:	2d00      	cmp	r5, #0
 8008bca:	4606      	mov	r6, r0
 8008bcc:	db01      	blt.n	8008bd2 <_malloc_r+0x1a>
 8008bce:	42a9      	cmp	r1, r5
 8008bd0:	d903      	bls.n	8008bda <_malloc_r+0x22>
 8008bd2:	230c      	movs	r3, #12
 8008bd4:	6033      	str	r3, [r6, #0]
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	bd70      	pop	{r4, r5, r6, pc}
 8008bda:	f000 f8a3 	bl	8008d24 <__malloc_lock>
 8008bde:	4a21      	ldr	r2, [pc, #132]	; (8008c64 <_malloc_r+0xac>)
 8008be0:	6814      	ldr	r4, [r2, #0]
 8008be2:	4621      	mov	r1, r4
 8008be4:	b991      	cbnz	r1, 8008c0c <_malloc_r+0x54>
 8008be6:	4c20      	ldr	r4, [pc, #128]	; (8008c68 <_malloc_r+0xb0>)
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	b91b      	cbnz	r3, 8008bf4 <_malloc_r+0x3c>
 8008bec:	4630      	mov	r0, r6
 8008bee:	f000 f845 	bl	8008c7c <_sbrk_r>
 8008bf2:	6020      	str	r0, [r4, #0]
 8008bf4:	4629      	mov	r1, r5
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	f000 f840 	bl	8008c7c <_sbrk_r>
 8008bfc:	1c43      	adds	r3, r0, #1
 8008bfe:	d124      	bne.n	8008c4a <_malloc_r+0x92>
 8008c00:	230c      	movs	r3, #12
 8008c02:	6033      	str	r3, [r6, #0]
 8008c04:	4630      	mov	r0, r6
 8008c06:	f000 f88e 	bl	8008d26 <__malloc_unlock>
 8008c0a:	e7e4      	b.n	8008bd6 <_malloc_r+0x1e>
 8008c0c:	680b      	ldr	r3, [r1, #0]
 8008c0e:	1b5b      	subs	r3, r3, r5
 8008c10:	d418      	bmi.n	8008c44 <_malloc_r+0x8c>
 8008c12:	2b0b      	cmp	r3, #11
 8008c14:	d90f      	bls.n	8008c36 <_malloc_r+0x7e>
 8008c16:	600b      	str	r3, [r1, #0]
 8008c18:	50cd      	str	r5, [r1, r3]
 8008c1a:	18cc      	adds	r4, r1, r3
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	f000 f882 	bl	8008d26 <__malloc_unlock>
 8008c22:	f104 000b 	add.w	r0, r4, #11
 8008c26:	1d23      	adds	r3, r4, #4
 8008c28:	f020 0007 	bic.w	r0, r0, #7
 8008c2c:	1ac3      	subs	r3, r0, r3
 8008c2e:	d0d3      	beq.n	8008bd8 <_malloc_r+0x20>
 8008c30:	425a      	negs	r2, r3
 8008c32:	50e2      	str	r2, [r4, r3]
 8008c34:	e7d0      	b.n	8008bd8 <_malloc_r+0x20>
 8008c36:	428c      	cmp	r4, r1
 8008c38:	684b      	ldr	r3, [r1, #4]
 8008c3a:	bf16      	itet	ne
 8008c3c:	6063      	strne	r3, [r4, #4]
 8008c3e:	6013      	streq	r3, [r2, #0]
 8008c40:	460c      	movne	r4, r1
 8008c42:	e7eb      	b.n	8008c1c <_malloc_r+0x64>
 8008c44:	460c      	mov	r4, r1
 8008c46:	6849      	ldr	r1, [r1, #4]
 8008c48:	e7cc      	b.n	8008be4 <_malloc_r+0x2c>
 8008c4a:	1cc4      	adds	r4, r0, #3
 8008c4c:	f024 0403 	bic.w	r4, r4, #3
 8008c50:	42a0      	cmp	r0, r4
 8008c52:	d005      	beq.n	8008c60 <_malloc_r+0xa8>
 8008c54:	1a21      	subs	r1, r4, r0
 8008c56:	4630      	mov	r0, r6
 8008c58:	f000 f810 	bl	8008c7c <_sbrk_r>
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	d0cf      	beq.n	8008c00 <_malloc_r+0x48>
 8008c60:	6025      	str	r5, [r4, #0]
 8008c62:	e7db      	b.n	8008c1c <_malloc_r+0x64>
 8008c64:	20000aa0 	.word	0x20000aa0
 8008c68:	20000aa4 	.word	0x20000aa4

08008c6c <realloc>:
 8008c6c:	4b02      	ldr	r3, [pc, #8]	; (8008c78 <realloc+0xc>)
 8008c6e:	460a      	mov	r2, r1
 8008c70:	4601      	mov	r1, r0
 8008c72:	6818      	ldr	r0, [r3, #0]
 8008c74:	f000 b858 	b.w	8008d28 <_realloc_r>
 8008c78:	20000010 	.word	0x20000010

08008c7c <_sbrk_r>:
 8008c7c:	b538      	push	{r3, r4, r5, lr}
 8008c7e:	4c06      	ldr	r4, [pc, #24]	; (8008c98 <_sbrk_r+0x1c>)
 8008c80:	2300      	movs	r3, #0
 8008c82:	4605      	mov	r5, r0
 8008c84:	4608      	mov	r0, r1
 8008c86:	6023      	str	r3, [r4, #0]
 8008c88:	f7ff fe7c 	bl	8008984 <_sbrk>
 8008c8c:	1c43      	adds	r3, r0, #1
 8008c8e:	d102      	bne.n	8008c96 <_sbrk_r+0x1a>
 8008c90:	6823      	ldr	r3, [r4, #0]
 8008c92:	b103      	cbz	r3, 8008c96 <_sbrk_r+0x1a>
 8008c94:	602b      	str	r3, [r5, #0]
 8008c96:	bd38      	pop	{r3, r4, r5, pc}
 8008c98:	20000d60 	.word	0x20000d60

08008c9c <_raise_r>:
 8008c9c:	291f      	cmp	r1, #31
 8008c9e:	b538      	push	{r3, r4, r5, lr}
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	460d      	mov	r5, r1
 8008ca4:	d904      	bls.n	8008cb0 <_raise_r+0x14>
 8008ca6:	2316      	movs	r3, #22
 8008ca8:	6003      	str	r3, [r0, #0]
 8008caa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cae:	bd38      	pop	{r3, r4, r5, pc}
 8008cb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008cb2:	b112      	cbz	r2, 8008cba <_raise_r+0x1e>
 8008cb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008cb8:	b94b      	cbnz	r3, 8008cce <_raise_r+0x32>
 8008cba:	4620      	mov	r0, r4
 8008cbc:	f000 f830 	bl	8008d20 <_getpid_r>
 8008cc0:	462a      	mov	r2, r5
 8008cc2:	4601      	mov	r1, r0
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cca:	f000 b817 	b.w	8008cfc <_kill_r>
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d00a      	beq.n	8008ce8 <_raise_r+0x4c>
 8008cd2:	1c59      	adds	r1, r3, #1
 8008cd4:	d103      	bne.n	8008cde <_raise_r+0x42>
 8008cd6:	2316      	movs	r3, #22
 8008cd8:	6003      	str	r3, [r0, #0]
 8008cda:	2001      	movs	r0, #1
 8008cdc:	e7e7      	b.n	8008cae <_raise_r+0x12>
 8008cde:	2400      	movs	r4, #0
 8008ce0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	4798      	blx	r3
 8008ce8:	2000      	movs	r0, #0
 8008cea:	e7e0      	b.n	8008cae <_raise_r+0x12>

08008cec <raise>:
 8008cec:	4b02      	ldr	r3, [pc, #8]	; (8008cf8 <raise+0xc>)
 8008cee:	4601      	mov	r1, r0
 8008cf0:	6818      	ldr	r0, [r3, #0]
 8008cf2:	f7ff bfd3 	b.w	8008c9c <_raise_r>
 8008cf6:	bf00      	nop
 8008cf8:	20000010 	.word	0x20000010

08008cfc <_kill_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	4c07      	ldr	r4, [pc, #28]	; (8008d1c <_kill_r+0x20>)
 8008d00:	2300      	movs	r3, #0
 8008d02:	4605      	mov	r5, r0
 8008d04:	4608      	mov	r0, r1
 8008d06:	4611      	mov	r1, r2
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	f7ff fe21 	bl	8008950 <_kill>
 8008d0e:	1c43      	adds	r3, r0, #1
 8008d10:	d102      	bne.n	8008d18 <_kill_r+0x1c>
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	b103      	cbz	r3, 8008d18 <_kill_r+0x1c>
 8008d16:	602b      	str	r3, [r5, #0]
 8008d18:	bd38      	pop	{r3, r4, r5, pc}
 8008d1a:	bf00      	nop
 8008d1c:	20000d60 	.word	0x20000d60

08008d20 <_getpid_r>:
 8008d20:	f7ff be0e 	b.w	8008940 <_getpid>

08008d24 <__malloc_lock>:
 8008d24:	4770      	bx	lr

08008d26 <__malloc_unlock>:
 8008d26:	4770      	bx	lr

08008d28 <_realloc_r>:
 8008d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2a:	4607      	mov	r7, r0
 8008d2c:	4614      	mov	r4, r2
 8008d2e:	460e      	mov	r6, r1
 8008d30:	b921      	cbnz	r1, 8008d3c <_realloc_r+0x14>
 8008d32:	4611      	mov	r1, r2
 8008d34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d38:	f7ff bf3e 	b.w	8008bb8 <_malloc_r>
 8008d3c:	b922      	cbnz	r2, 8008d48 <_realloc_r+0x20>
 8008d3e:	f7ff feed 	bl	8008b1c <_free_r>
 8008d42:	4625      	mov	r5, r4
 8008d44:	4628      	mov	r0, r5
 8008d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d48:	f000 f814 	bl	8008d74 <_malloc_usable_size_r>
 8008d4c:	42a0      	cmp	r0, r4
 8008d4e:	d20f      	bcs.n	8008d70 <_realloc_r+0x48>
 8008d50:	4621      	mov	r1, r4
 8008d52:	4638      	mov	r0, r7
 8008d54:	f7ff ff30 	bl	8008bb8 <_malloc_r>
 8008d58:	4605      	mov	r5, r0
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	d0f2      	beq.n	8008d44 <_realloc_r+0x1c>
 8008d5e:	4631      	mov	r1, r6
 8008d60:	4622      	mov	r2, r4
 8008d62:	f7ff fec7 	bl	8008af4 <memcpy>
 8008d66:	4631      	mov	r1, r6
 8008d68:	4638      	mov	r0, r7
 8008d6a:	f7ff fed7 	bl	8008b1c <_free_r>
 8008d6e:	e7e9      	b.n	8008d44 <_realloc_r+0x1c>
 8008d70:	4635      	mov	r5, r6
 8008d72:	e7e7      	b.n	8008d44 <_realloc_r+0x1c>

08008d74 <_malloc_usable_size_r>:
 8008d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d78:	1f18      	subs	r0, r3, #4
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	bfbc      	itt	lt
 8008d7e:	580b      	ldrlt	r3, [r1, r0]
 8008d80:	18c0      	addlt	r0, r0, r3
 8008d82:	4770      	bx	lr

08008d84 <_init>:
 8008d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d86:	bf00      	nop
 8008d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d8a:	bc08      	pop	{r3}
 8008d8c:	469e      	mov	lr, r3
 8008d8e:	4770      	bx	lr

08008d90 <_fini>:
 8008d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d92:	bf00      	nop
 8008d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d96:	bc08      	pop	{r3}
 8008d98:	469e      	mov	lr, r3
 8008d9a:	4770      	bx	lr
